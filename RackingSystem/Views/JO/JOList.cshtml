
@{
}
<style>
    .table-title {
        color: #fff;
        background: #4b5366;
        border-radius: 3px 3px 0 0;
    }

    .table-title h2 {
        margin: 5px 0 0;
        font-size: 24px;
    }

    .row {
        clear: right;
    }

    .table-filter {
        border-radius: 3px;
        border-color: #ddd;
        box-shadow: none;
    }

    .show-entries select.form-control {
        width: 60px;
        margin: 0 5px;
    }

    .table-filter .row {
        display: flex;
        align-items: center;
    }

    .table-filter .col-sm-12 {
        display: flex;
        justify-content: flex-start; 
    }

    .show-entries {
        display: flex;
        align-items: center; 
        gap: 5px;  
    }

    #selpageSize:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    #selpageSize:hover {
        border-color: #007bff;
    }

    .pagination {
        float: right;
        margin: 0 0 5px;
    }

    .pagination li a {
        border: none;
        font-size: 13px;
        min-width: 30px;
        min-height: 30px;
        color: #999;
        margin : 0 2px;
        line-height: 30px;
        border-radius: 2px !important;
        text-align: center;
        padding: 0 6px;
    }

    .pagination li a:hover {
        color: #666;
    }

    .pagination li.active a {
        background: #03A9F4;
    }

    .pagination li.active a:hover {
        background: #0397d6;
    }

    .pagination li.disabled i {
        font-size: 16px;
        padding-top: 6px;
    }

    .pagination li i {
        font-size: 16px;
        padding-top: 6px
    }

    .custom-table thead th {
        background-color: #F1F6F9; 
        color: #000;
    }

    .custom-table tbody tr:hover td {
        background-color: #F1F6F9; 
    }

    .custom-table tbody {
        font-size: 15px;
    }

    th.gridjs-th, td.gridjs-td {
        padding: 12px 16px !important;
    }

    .view-btn, .edit-btn, .delete-btn {
        font-size: 15px;
    }
</style>

<br />
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-outline ">
                <div class="card-header table-title">
                    <div class="card-title">
                        <h2>JOB Order List <b></b></h2>
                    </div>
                    <div class="card-tools">
                        <button type="button" class="btn btn-success" onclick="navigateToNew('new')">
                            Add New JOB
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row" style="padding:5px;">
                        <div class="col-sm-3" style="">
                            <input id="txtItemCode" name="ItemCode" type="text" class="form-control" placeholder="Item" />
                        </div>
                        @* <div class="col-sm-3">
                            <input id="txtCreatedBySearch" name="CreatedBy" type="text" class="form-control" placeholder="Created By" />
                        </div> *@
                        <div class="col-sm-1 d-flex"> @* col-sm-6 d-flex justify-content-end *@
                            <button type="button" class="btn btn-primary" style="width: 100%; " onclick="loadList(1)"><i class="bi bi-search"></i> </button>
                        </div>
                    </div>
                    <hr />
                    <div class="table-filter">
                        <div class="row" style="padding-left:5px;">
                            <div class="col-sm-12">
                                <div class="show-entries">
                                    <label>Show</label>
                                    <select id="selpageSize" name="pageSize" class="form-control">
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="200">250</option>
                                    </select>
                                    <span>entries</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="gridTable" class="table table-responsive text-nowrap mt-3"></div>
                    @* <div class="table table-striped table-bordered table-responsive text-nowrap">
                        <table id="listTable" class="dt-column-search table table-bordered table-responsive dataTable" style="width:100%">
                            <thead>
                                <tr>
                                    //<th>Job Order Id</th>
                                    <th>Doc No</th>
                                    <th>Doc Date</th>
                                    <th>Description</th>
                                    <th>Status</th>
                                    <th>Created Date</th>
                                    <th>Created By</th>
                                    <th>Updated Date</th>
                                    <th>Updated By</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div> *@

                    <div class="clearfix">
                        <div class="hint-text">Showing <b id="lblCurCount">0</b> of <b id="lblTotal">0</b> entries</div>
                        <ul class="pagination" id="ulPagination">
                        </ul>
                        <input type="hidden" id="txtCurPage">
                        <input type="hidden" id="txtTotalRecord">
                        <input type="hidden" id="txtPageSize">
                        <input type="hidden" id="txtTotalPage">
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @* <link href="~/css/datatables.min.css" rel="stylesheet"> *@
    <link rel="stylesheet" href="~/css/sweetalert2.min.css">
    <link rel="stylesheet" href="~/css/gridjs.min.css">

    @* <script src="~/js/datatables.min.js"></script> *@
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/sweetalert2.all.min.js"></script>
    <script src="~/js/gridjs.umd.js"></script>

    <script type="text/javascript">
        let itemIndex = 1;
        let gridInstance = null;

        $(document).ready(function () {
            // getBOMList();
            loadList();
            // $('#listTable').DataTable({
            //     data: null,
            //     paging: false,
            //     searching: false,
            //     "info": false,
            //     "bDestroy": true,
            // });
        });

        // function getBOMList() {
        //      $.ajax({
        //         url: "/BOM/GetActiveBOMList/",
        //         type: "GET",
        //         dataType: 'JSON',
        //         contentType: 'application/json; charset=utf-8',
        //         success: function (result) {
        //             if (result.success == true) {
        //                 console.log(result.data);

        //                 itemList = result.data.map(function (i) {
        //                     return {
        //                         itemId : i.item_Id,
        //                         itemCode: i.itemCode,
        //                         itemDescription: i.description,
        //                     };
        //                 });

        //                 const dropdownIds = ['subItem1'];
        //                 dropdownIds.forEach(function (id) {
        //                     const dropdown = document.getElementById(id);
        //                     dropdown.innerHTML = "";

        //                     const defaultOption = document.createElement("option");
        //                     defaultOption.value = "";
        //                     defaultOption.textContent = "Choose an Item";
        //                     defaultOption.disabled = true;
        //                     defaultOption.selected = true;
        //                     dropdown.appendChild(defaultOption);

        //                     result.data.forEach(function (i) {
        //                         const option = document.createElement("option");
        //                         option.value = i.item_Id;
        //                         option.textContent = i.itemCode;
        //                         dropdown.appendChild(option);
        //                     });
        //                 });
        //             } else {
        //                 swal.fire({
        //                     icon: 'error',
        //                     title: 'Wait',
        //                     text: result.errMessage
        //                 });
        //             }
        //         },
        //         error: function (error) {
        //             swal.fire({
        //                 icon: 'error',
        //                 title: 'Wait',
        //                 text: error.val
        //             });
        //         }
        //     });
        // }

        function loadList() {
             $.ajax({
                 url: "/JO/GetJOList/",
                 type: "GET",
                 dataType: 'JSON',
                 contentType: 'application/json; charset=utf-8',
                 beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    swal.close()
                    if (result.success == true) {

                        if (gridInstance) {
                            gridInstance.destroy();
                        }
                        // console.log("data", result.data);

                        gridInstance = new gridjs.Grid({
                            columns: [
                                { name: 'JobOrder ID', id: 'jobOrder_Id', hidden: true }, 
                                { name: 'Doc No', id: 'docNo', width: '160px' },
                                { 
                                    name: 'Doc Date', 
                                    id: 'docDate',
                                    formatter: (cell, row) => {
                                        const dateString = row.cells[2].data.split('.')[0];
                                        const date = new Date(dateString);

                                        if (isNaN(date)) {
                                            return 'Invalid Date';
                                        }
                                        return date.toLocaleString('en-GB', {
                                            year: 'numeric',
                                            month: 'numeric',
                                            day: 'numeric',
                                        });
                                    }
                                },
                                { name: 'Description', id: 'description' },
                                { name: 'Status', id: 'status' },
                                { 
                                    name: 'Created Date', 
                                    formatter: (cell, row) => {
                                        const dateString = row.cells[5].data.split('.')[0];
                                        const date = new Date(dateString);

                                        if (isNaN(date)) {
                                            return 'Invalid Date';
                                        }
                                        return date.toLocaleString('en-GB', {
                                            year: 'numeric',
                                            month: 'numeric',
                                            day: 'numeric',
                                            hour: 'numeric',
                                            minute: 'numeric',
                                            hour12: true,
                                        });
                                    }
                                },
                                { name: 'Created By', id: 'createdBy' },
                                // { name: 'Updated Date', id: 'updatedDate' },
                                // { name: 'Updated By', id: 'updatedBy' },
                                { 
                                    name: 'Action', 
                                    formatter: (cell, row) => {
                                        // const rawData = JSON.stringify({
                                        //     jobOrder_Id: row.cells[0].data,
                                        //     docNo: row.cells[1].data,
                                        //     docDate: row.cells[2].data,
                                        //     description: row.cells[3].data,
                                        //     status: row.cells[4].data,
                                        //     createdDate: row.cells[5].data,
                                        //     createdBy: row.cells[6].data,
                                        //     updatedDate: row.cells[7].data,
                                        // });
                                        const rawData = JSON.stringify(row);

                                        return gridjs.html(`
                                            <div style="display:flex;">
                                                <button class="btn btn-primary d-grid view-btn me-2" data-row='${rawData}' onclick="navigateToView(${row.cells[0].data}, 'view')">
                                                    <span><i class="bi bi-eye"></i> View</span>
                                                </button>
                                                <button class="btn btn-warning d-grid edit-btn me-2" data-row='${rawData}' onclick="navigateToEdit(${row.cells[0].data}, 'edit')">
                                                    <span><i class="bi bi-pencil-square"></i> Edit</span>
                                                </button>
                                                <button class="btn btn-danger d-grid delete-btn" data-id="${row.cells[0].data}">
                                                    <span><i class="bi bi-trash"></i> Delete</span>
                                                </button>
                                            </div>
                                        `);
                                    }
                                },
                            ],
                            data: result.data,
                            pagination: false,
                            search: false,
                            sort: true,
                            className: {
                                table: 'custom-table',
                            }
                        }).render(document.getElementById("gridTable"));
                        // $('#listTable').DataTable( {
                        //     data: result.data,
                        //     paging: false,
                        //     searching: false,
                        //     "info": false,
                        //     "bDestroy": true,
                        //     columns: [
                        //         // { data: 'jobOrder_Id' },
                        //         { data: 'docNo' },
                        //         { 
                        //             data: null ,
                        //             render: function (data, type, row, meta) {
                        //                 const docDate = new Date(row.docDate);
                        //                 const formattedDate = docDate.toLocaleString('en-GB', {
                        //                     year: 'numeric',
                        //                     month: 'short',
                        //                     day: 'numeric',
                        //                     hour: 'numeric',
                        //                     minute: 'numeric',
                        //                     hour12: true
                        //                 });
                        //                 return formattedDate;
                        //             }
                        //         },
                        //         { data: 'description' },
                        //         { data: 'status' },
                        //         { data: 'createdDate' },
                        //         { data: 'createdBy' },
                        //         { data: 'updatedDate' },
                        //         { data: 'updatedBy' },
                        //         {
                        //             data: null,
                        //             render: function (data, type, row, meta) {
                        //                 const rawData = JSON.stringify(row).replace(/"/g, "&quot;");
                        //                 return `<div style="display:flex;">
                        //                             <button class="btn btn-success d-grid edit-btn" style="margin-right:10px;" data-row="${rawData}">
                        //                                 <span><i class="bi bi-pencil-square"></i>Edit</span>
                        //                             </button>
                        //                             <button class="btn btn-danger deactivate-account delete-btn" data-id="${row.jobOrder_Id}">
                        //                                 <span><i class="bi bi-trash"></i>Delete</span>
                        //                             </button>
                        //                         </div>`;
                        //             }
                        //         },
                        //     ],
                        // });

                        // var curCnt = 0;
                        // var pageSize = parseInt($("#selpageSize").val());
                        // var startEntry = ((page - 1) * pageSize) + 1;
                        // var ttlRecords = result.totalRecords === -1 ? $('#lblTotal').text() : result.totalRecords;
                        // var endEntry = Math.min(page * pageSize, ttlRecords);

                        // if (ttlRecords === 0 || startEntry > ttlRecords) {
                        //     startEntry = 0;
                        //     endEntry = 0;
                        // }
                        // $('#lblCurCount').html(`${startEntry} to ${endEntry}`);

                        // if (page == 1) {
                        //     $('#lblTotal').html(result.totalRecords);
                        //     $('#ulPagination').html('');

                        //     var pageSize = $('#selpageSize').val();
                        //     const myDiv = document.getElementById('ulPagination');
                        //     var ttlPage = result.totalRecords / pageSize;
                        //     if ((result.totalRecords % pageSize) > 0) {
                        //         ttlPage = ttlPage + 1;
                        //     }
                        //     $('#txtTotalRecord').val(result.totalRecords);
                        //     $('#txtTotalPage').val(ttlPage);

                        //     myDiv.innerHTML += '<li class="page-item disabled"><a href="javascript:prevPage()">Previous</a></li>';
                        //     for (var i = 1; i <= ttlPage; i++) {
                        //         if (i == 1) {
                        //                myDiv.innerHTML += '<li class="page-item active" id="btnP'+ i +'"><a href="javascript:loadList('+ i +')" class="page-link">'+ i +'</a></li>';
                        //         }
                        //         else {
                        //                myDiv.innerHTML += '<li class="page-item" id="btnP'+ i +'"><a href="javascript:loadList('+ i +')" class="page-link">'+ i +'</a></li>';
                        //         }
                        //     }
                        //     myDiv.innerHTML += '<li class="page-item disabled"><a href="javascript:nextPage()">Next</a></li>';
                        // }
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
             });
        }

        function navigateToNew(mode) {
            window.location.href = '@Url.Action("JODetails", "JO", new { id = "_id_", mode = "_mode_" })'.replace('_id_', 0).replace('_mode_', mode);
        }

        function navigateToView(id, mode) {
            window.location.href = '@Url.Action("JODetails", "JO", new { id = "_id_", mode = "_mode_" })'.replace('_id_', id).replace('_mode_', mode);
        }

        function navigateToEdit(id, mode) {
            window.location.href = '@Url.Action("JODetails", "JO", new { id = "_id_", mode = "_mode_" })'.replace('_id_', id).replace('_mode_', mode);
        }

        $('#gridTable').on('click', '.delete-btn', function () {
            const id = $(this).attr('data-id');
            deleteJob(id);
        });

        function deleteJob(id) {
            swal.fire({
                title: "Are you sure want to delete?",
                text: "You will not be able to recover this record!",
                inputAttributes: {
                    autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'ok',
                cancelButtonText: 'cancel',
                allowOutsideClick: false
              }).then(function(r) {
                if (r.isConfirmed == true) {
                    var data = {
                        JobOrder_Id: id,
                    };
                    $.ajax({
                        url: '/JO/DeleteJob',
                        type: 'DELETE',
                        data: JSON.stringify(data),
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            Swal.fire({
                                text: 'Please Wait',
                                width: '300px',

                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                showConfirmButton: false,
                            });
                            Swal.showLoading()
                        },
                        success: function (result) {
                            if (result.success == true) {
                                swal.fire({
                                    icon: 'success',
                                    title: "Success Deleted",
                                    text: "",
                                    didClose: () => {
                                      window.location.reload();
                                    }
                                });
                            }
                            else {
                                swal.fire({
                                    icon: 'error',
                                    title: "Wait",
                                    text: result.errMessage
                                });
                            }
                        },
                        error: function (error) {
                            console.log(error);
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: error.val
                            });
                        }
                    });

                } else {
                    return;
                }
              });
        }
    </script>
}