@model RackingSystem.Models.Trolley.TrolleyListDTO
@{}

<style>
    .table-title {
        color: #fff;
        background: #4b5366;
        /*     padding: 16px 25px;
                margin: -20px -25px 10px; */
        border-radius: 3px 3px 0 0;
    }

    .table-title h2 {
        margin: 5px 0 0;
        font-size: 24px;
    }

    .error-message {
        color: red;
        font-size: 0.875rem; 
        margin-top: 5px;
    }

    .is-invalid {
        border-color: red;
    }

    .is-valid {
        border-color: green;
    }

    .row .form-check {
        margin-left: 10px;
    }
</style>

<br />

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-outline ">
                <div class="card-header table-title">
                    <div class="card-title">
                        <h2>Universal Trolley List <b></b></h2>
                    </div>
                    <div class="card-tools">
                        <button type="button" class="btn btn-success" onclick="newTrolleyForm()">
                            Add New Universal Trolley
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table table-striped table-bordered table-responsive text-nowrap">
                        <table id="listTable" class="dt-column-search table table-bordered table-responsive dataTable" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Universal Trolley Code</th>
                                    <th>IP Address</th>
                                    <th>Remark</th>
                                    <th>Total Column</th>
                                    <th>Total Row</th>
                                    <th>Is Active</th>
                                    @* <th>Status</th> *@
                                    <th>Side</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Update Universal Trolley</h4>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label" for="txtCode">Universal Trolley Code</label>
                    <input type="text" class="form-control" name="LoaderCode" id="txtCode" aria-describedby="Trolley Code">
                    <div id="txtCodeError" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="txtIP">IP Address</label>
                    <input type="text" class="form-control" name="IP" id="txtIP" aria-describedby="IP Address" oninput="formatIP(this)">
                    <div id="txtIPError" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="txtTotalCol">Total Column</label>
                    <input type="number" class="form-control" name="TotalCol" id="txtTotalCol" aria-describedby="Total Column">
                    <div id="txtTotalColError" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="txtTotalRow">Total Row</label>
                    <input type="number" class="form-control" name="TotalRow" id="txtTotalRow" aria-describedby="Total Row">
                    <div id="txtTotalRowError" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="txtRemark">Remark</label>
                    <input type="text" class="form-control" name="Remark" id="txtRemark" aria-describedby="Remark">
                    <div id="txtRemarkError" class="error-message"></div>
                </div>
                <div class="mb-3 row">
                    <label class="form-label">Select the Trolley side</label>
                    <div class="col-3 form-check">
                        <input class="form-check-input" type="radio" id="sideA" name="side" value="0" checked/>
                        <label for="sideA">Side A</label>
                    </div>
                    <div class="col-3 form-check">
                        <input class="form-check-input" type="radio" id="sideB" name="side" value="1" />
                        <label for="sideB">Side B</label>
                    </div>
                </div>
                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="chkIsActive">
                    <label class="form-check-label" for="chkIsActive">Is Active</label>
                </div>

                <input type="hidden" id="txtId">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="saveTrolley()">Save</button>
                <button type="button" class="btn btn-outline-secondary" onclick="cancelForm()">Cancel</button>
            </div>

             <input type="hidden" id="txtId">

        </div>
    </div>
</div>


@section Scripts
{
    <link href="~/css/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/sweetalert2.min.css">

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/datatables.min.js"></script>
    <script src="~/js/sweetalert2.all.min.js"></script>

	<script type="text/javascript">
        $(document).ready(function () {

            loadList();
        });

        function loadList() {
            $.ajax({
                url: "/Trolley/GetTrolleyList/",
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    console.log("result", result);
                    swal.close()
                    if (result.success == true) {
                        $('#listTable').DataTable( {
                            data: result.data,
                            paging: true,
                            pageLength: 50,
                            lengthMenu: [50, 100, 250, 500, 1000],
                            columns: [
                                { data: 'trolleyCode' },
                                { data: 'ipAddress' },
                                { data: 'remark' },
                                { data: 'totalCol' },
                                { data: 'totalRow' },
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        if (row.isActive == true) {
                                            return '<span><i class="bi bi-check-square" style="color: darkgreen;"></i></span>'
                                        }
                                        else {
                                            return '<span><i class="bi bi-app""></i></span>'
                                        }
                                    }
                                },
                                // { data: 'status' },
                                {   data: 'side', 
                                    render: function(data, type, row, meta) {
                                        const sideMap = {
                                            0: 'A',
                                            1: 'B'
                                        };
                                        return sideMap[data];
                                    }
                                }, 
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        const rawData = JSON.stringify(row).replace(/"/g, "&quot;");
                                        return `<div style="display:flex;">
                                                    <button class="btn btn-success d-grid edit-trolley-btn" style="margin-right:10px;" data-row="${rawData}">
                                                        <span><i class="bi bi-pencil-square"></i>Edit</span>
                                                    </button>
                                                    <button class="btn btn-danger deactivate-account delete-trolley-btn" data-id="${row.trolley_Id}" data-code="${row.trolleyCode}">
                                                        <span><i class="bi bi-trash"></i>Delete</span>
                                                    </button>
                                                </div>`;
                                    }
                                }
                            ],
                        });
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function newTrolleyForm()
        {   
            removeErrMsg(true);
            $("#txtId").val("0");
            $('#txtIP').val("");
            $("#txtCode").val("");
            $("#txtTotalCol").val("");
            $("#txtTotalRow").val("");
            $("#txtRemark").val("");
            document.getElementById("sideA").checked = true;
            document.getElementById("chkIsActive").checked = true;
            $("#myModal").modal("show");
        }

        function cancelForm() {
            $('#myModal').modal("toggle");
            removeErrMsg(true);
        }

        $('#listTable').on('click', '.edit-trolley-btn', function() {
            const row = JSON.parse($(this).attr('data-row'));
            editTrolleyForm(row);
        });

        function editTrolleyForm(row) {
            $('#txtId').val(row.trolley_Id);
            $('#txtIP').val(row.ipAddress);
            $("#txtCode").val(row.trolleyCode);
            $("#txtTotalCol").val(row.totalCol);
            $("#txtTotalRow").val(row.totalRow);
            $("#txtRemark").val(row.remark);

            if (row.side == "A") {
                document.getElementById("sideA").checked = true;
            } else {
                document.getElementById("sideB").checked = true;
            }

            if (row.isActive == true) {
                document.getElementById("chkIsActive").checked = true;
            } else {
                document.getElementById("chkIsActive").checked = false;
            }
            $("#myModal").modal("show");
        }

        function removeErrMsg(clearValue = false) {
            const fields = [
                { id: 'txtCode', name: 'Trolley Code', required: true, numeric: false },
                { id: 'txtIP', name: 'IP Address', required: true, numeric: false },
                { id: 'txtRemark', name: 'Remark', required: true, numeric: false },
                { id: 'txtTotalCol', name: 'Total Column', required: true, numeric: true, min: 1 },
                { id: 'txtTotalRow', name: 'Total Row', required: true, numeric: true, min: 1 },
            ];

            fields.forEach(function(field) {
                const input = document.getElementById(field.id);
                const errorline = document.getElementById(field.id + 'Error');

                if (input)
                {
                    input.classList.remove('is-invalid');
                    input.classList.remove('is-valid');
                    if (clearValue) input.value = '';
                }

                if (errorline)
                {
                    errorline.textContent = '';
                }
            });

            if (clearValue) document.getElementById('chkIsActive').checked = false;
        }

        function showError(fieldId, message) {
            document.getElementById(fieldId).classList.add('is-invalid');
            document.getElementById(fieldId + 'Error').textContent = message;
        }

        function formatIP(input) {
            let value = input.value.replace(/[^\d]/g, '');
            // let formattedValue = '';
            // for (let i = 0; i < value.length; i++) {
            //     if (i > 0 && i % 3 === 0) {
            //         formattedValue += '.';
            //     }
            //     formattedValue += value[i];
            // }

            // input.value = formattedValue;
            if (input.value.length > 15) {
                input.value = input.value.slice(0, 15);
            }
        }

        function validateTrolley() {
            //remove previous err msg
            removeErrMsg();

            let isValid = true;
            const fields = [
                { id: 'txtCode', name: 'Trolley Code', required: true, numeric: false },
                { id: 'txtIP', name: 'IP Address', required: true, numeric: false },
                { id: 'txtRemark', name: 'Remark', required: true, numeric: false },
                { id: 'txtTotalCol', name: 'Total Column', required: true, numeric: true, min: 1 },
                { id: 'txtTotalRow', name: 'Total Row', required: true, numeric: true, min: 1 },
            ];

            fields.forEach(field => {
                const value = document.getElementById(field.id).value.trim();

                if (field.required && value === '') {
                    showError(field.id, `Please enter a ${field.name}.`);
                    isValid = false;
                    return;
                }

                if (field.numeric && (isNaN(value) || Number(value) < (field.min || 0))) {
                    showError(field.id, `Please enter a valid ${field.name} (number >= ${field.min || 0}).`);
                    isValid = false;
                }
            });

            return isValid;
        }

        function saveTrolley()
        {
            if (validateTrolley())
            {
                var data = {
                    Trolley_Id: parseInt($('#txtId').val()) || 0,
                    TrolleyCode: $('#txtCode').val(),
                    IPAddress: $('#txtIP').val(),
                    Remark: $('#txtRemark').val(),
                    TotalCol: parseInt($('#txtTotalCol').val()) || 0,
                    TotalRow: parseInt($('#txtTotalRow').val()) || 0,
                    IsActive: chkIsActive.checked ? true : false,
                    Side: parseInt($("input[name='side']:checked").val()) || 0,
                };

                console.log(data);

                $.ajax({
                    url: '/Trolley/SaveTrolley',
                    type: 'POST',
                    data: JSON.stringify(data),
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        Swal.fire({
                            text: 'Please Wait',
                            width: '300px',
                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            showConfirmButton: false,
                        });
                        Swal.showLoading()
                    },
                    success: function (result) {
                        if (result.success == true) {
                            $("#colModal").modal("toggle");
                            swal.fire({
                                icon: 'success',
                                title: "Success Update",
                                text: "",
                                didClose: () => {
                                  window.location.reload();
                                }
                            });
                        }
                        else {
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: result.errMessage
                            });
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                    }
                });
            }
        }

        $('#listTable').on('click', '.delete-trolley-btn', function() {
            const id = $(this).attr('data-id');
            const slotCode = $(this).attr('data-code');
            deleteTrolley(id, slotCode);
        });

        function deleteTrolley(id, trolleyCode) {
            swal.fire({
                title: "Are you sure want to delete?",
                text: "You will not be able to recover this record!",
                inputAttributes: {
                    autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'ok',
                cancelButtonText: 'cancel',
                allowOutsideClick: false
              }).then(function(r) {
                if (r.isConfirmed == true) {

                    var data = {
                        Trolley_id: id,
                        TrolleyCode: trolleyCode,
                        TotalCol: 0,
                        TotalRow: 0,
                        IsActive: false
                    }

                    $.ajax({
                        url: '/Trolley/DeleteTrolley',
                        type: 'DELETE',
                        data: JSON.stringify(data),
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            Swal.fire({
                                text: 'Please Wait',
                                width: '300px',

                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                showConfirmButton: false,
                            });
                            Swal.showLoading()
                        },
                        success: function (result) {
                            if (result.success == true) {
                                swal.fire({
                                    icon: 'success',
                                    title: "Success Deleted",
                                    text: "",
                                    didClose: () => {
                                      window.location.reload();
                                    }
                                });
                            }
                            else {
                                swal.fire({
                                    icon: 'error',
                                    title: "Wait",
                                    text: result.errMessage
                                });
                            }
                        },
                        error: function (error) {
                            console.log(error);
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: error.val
                            });
                        }
                    });

                } else {
                    return;
                }
              });

        }

	</script>

}