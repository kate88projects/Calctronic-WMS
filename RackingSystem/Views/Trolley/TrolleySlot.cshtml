@model RackingSystem.Models.Trolley.TrolleySlotDTO
@{
}

<style>
    .table-title {
        color: #fff;
        background: #4b5366;
        border-radius: 3px 3px 0 0;
    }

    .table-title h2 {
        margin: 5px 0 0;
        font-size: 24px;
    }

    .error-message {
        color: red;
        font-size: 0.875rem; 
        margin-top: 5px;
    }

    .is-invalid {
        border-color: red;
    }

    .is-valid {
        border-color: green;
    }

    .text-link {
        color: blue;
        cursor: pointer;
        display: block;
        text-align: right;
        margin-bottom: 10px;
    }

    .hidden {
        display: none;
        margin-top: 10px;
        padding: 10px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
    }
        
    #columnMatchingLabel {
        text-align: center;
        width: 100%;
        font-weight: bold;
    }

    .modal-body {
      max-height: calc(100vh - 200px); 
      overflow-y: auto
    }

    .matching-btn {
        justify-content: center;
    }

    .bi-upload {
        padding-left: 10px;
    }
</style>

<br />

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-outline ">
                <div class="card-header table-title">
                    <div class="card-title">
                        <h2>Universal Trolley Slot List <b></b></h2>
                    </div>
                    <div class="card-tools">
                        <div class="btn-group">
                            <button type="button" class="btn btn-warning">Import</button>
                            <button type="button" class="btn btn-warning dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="true">
                                <span class="visually-hidden">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu" data-popper-placement="bottom-start" style="position: absolute; inset: 0px auto auto 0px; margin: 0px; transform: translate3d(114.5px, 40px, 0px);">
                                <li><a class="dropdown-item" href="#" id="dTemp" onclick="downloadTemp('slots')">Download Trolley Slot List Template</a></li>
                                <li><a class="dropdown-item" href="#" id="dTemp" onclick="downloadTemp('pulses')">Download Update Trolley Pulses Template</a></li>
                                <li><a class="dropdown-item" href="#" onclick="triggerFileInput('importSlot')">Import Slot from Excel</a></li>
                            </ul>
                            <input type="file" id="fileInput" accept=".xlsx, .xls, .csv" style="display:none;" onchange="handleFileUpload(event)">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="triggerFileInput('updatePulses')">
                            Update Pulses By Excel
                        </button>
                        <button type="button" class="btn btn-success" onclick="newSlotColForm()">
                            Add New Trolley Slot Column
                        </button>
                        <button type="button" class="btn btn-success" onclick="newSlotForm()">
                            Add New Trolley Slot
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table table-striped table-bordered table-responsive text-nowrap">
                        <table id="listTable" class="dt-column-search table table-bordered table-responsive dataTable" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Universal Trolley</th>
                                    <th>Universal Trolley Slot Code</th>
                                    <th>Column No</th>
                                    <th>Row No</th>
                                    @* <th>Reel No</th> *@
                                    <th>Is Active</th>
                                    <th>Is Left</th>
                                    <th>X Pulse</th>
                                    <th>Z Pulse</th>
                                    <th>QR-X Pulse</th>
                                    <th>QR-Z Pulse</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="columnMatchingModal">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="columnMatchingLabel">Map CSV Columns to Data Table Columns</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="csvColumns">
          <div class="row">
              <div id="csvColumnContent"></div> 
              <div id="dataTableColumns"></div> 
          </div>
      </div>
      <div class="modal-footer matching-btn">
        <button type="button" class="btn btn-primary" onclick="processAndSubmitData()">Submit<i class="bi bi-upload fs-5"></i></button>
      </div>
      <input type="hidden" id="updateType" />
    </div>
  </div>
</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Update Slot</h4>
            </div>
            @* <form action="/Slot/SaveSlot" method="post"> *@
                <div class="modal-body">
                    <div class="mb-3">
                    <label class="form-label" for="ddTrolley">Universal Trolley</label>
                        <select class="form-select" aria-label="Default select example" name="Trolley" id="ddTrolley">
                            @* <option selected>Please choose trolley</option> *@
                        </select>
                        <div id="ddTrolleyError" class="error-message"></div>
                    </div>
                    <div class="mb-3">
                    <label class="form-label" for="txtCode">Universal Trolley Slot Code</label>
                        <input type="text" class="form-control" name="SlotCode" id="txtCode" aria-describedby="Slot Code">
                        <div id="txtCodeError" class="error-message"></div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtColNo">Column No</label>
                            <input type="text" class="form-control" name="ColNo" id="txtColNo" aria-describedby="Column No">
                            <div id="txtColNoError" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtRowNo">Row No</label>
                            <input type="text" class="form-control" name="RowNo" id="txtRowNo" aria-describedby="Row No">
                            <div id="txtRowNoError" class="error-message"></div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtXPulse">X Pulse</label>
                            <input type="number" class="form-control" name="XPulse" id="txtXPulse" aria-describedby="X Pulse" min="1">
                            <div id="txtXPulseError" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtYPulse">Z Pulse</label>
                            <input type="number" class="form-control" name="YPulse" id="txtYPulse" aria-describedby="Z Pulse" min="1">
                            <div id="txtYPulseError" class="error-message"></div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtQrXPulse">QR-X Pulse</label>
                            <input type="number" class="form-control" name="QrXPulse" id="txtQrXPulse" aria-describedby="Qr-X Pulse" min="1">
                            <div id="txtQrXPulseError" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtQrYPulse">QR-Z Pulse</label>
                            <input type="number" class="form-control" name="QrYPulse" id="txtQrYPulse" aria-describedby="Qr-Z Pulse" min="1">
                            <div id="txtQrYPulseError" class="error-message"></div>
                        </div>
                    </div>

                    <div id="additional" class="hidden">
                        <div class="row mb-3">
                            <div class="col">
                                <label class="form-label" for="txtAddPulse1">Additional Pulse 1</label>
                                <input type="number" class="form-control" name="AddPulse1" id="txtAddPulse1" aria-describedby="Additional Pulse 1" min="1" pattern="\d*">
                                <div id="txtAddPulse1Error" class="error-message"></div>
                            </div>
                            <div class="col">
                                <label class="form-label" for="txtAddPulse2">Additional Pulse 2</label>
                                <input type="number" class="form-control" name="AddPulse2" id="txtAddPulse2" aria-describedby="Additional Pulse 2" min="1">
                                <div id="txtAddPulse2Error" class="error-message"></div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <label class="form-label" for="txtAddPulse3">Additional Pulse 3</label>
                                <input type="number" class="form-control" name="AddPulse3" id="txtAddPulse3" aria-describedby="Additional Pulse 3" min="1">
                                <div id="txtAddPulse3Error" class="error-message"></div>
                            </div>
                            <div class="col">
                                <label class="form-label" for="txtAddPulse4">Additional Pulse 4</label>
                                <input type="number" class="form-control" name="AddPulse4" id="txtAddPulse4" aria-describedby="Additional Pulse 4" min="1">
                                <div id="txtAddPulse4Error" class="error-message"></div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <label class="form-label" for="txtAddPulse5">Additional Pulse 5</label>
                                <input type="number" class="form-control" name="AddPulse5" id="txtAddPulse5" aria-describedby="Additional Pulse 5" min="1">
                                <div id="txtAddPulse5Error" class="error-message"></div>
                            </div>
                            <div class="col">
                                <label class="form-label" for="txtAddPulse6">Additional Pulse 6</label>
                                <input type="number" class="form-control" name="AddPulse6" id="txtAddPulse6" aria-describedby="Additional Pulse 6"" min="1">
                                <div id="txtAddPulse6Error" class="error-message"></div>
                            </div>
                        </div>
                    </div>

                    <span id="textlink" class="text-link" tabIndex="0" onclick="customPulses('myModal', true)"><i class="fas fa-plus-circle"></i> Additional Pulses</span>

                    <div class="col form-check mb-3">
                        <input type="checkbox" class="form-check-input" id="chkIsActive">
                        <label class="form-check-label" for="chkIsActive">Is Active</label>
                    </div>
                    <div class="col form-check mb-3">
                        <input type="checkbox" class="form-check-input" id="chkIsLeft">
                        <label class="form-check-label" for="chkIsLeft">Is Left</label>
                    </div>
                    
                    <input type="hidden" id="txtId">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="saveSlot()">Save</button> 
                    <button type="button" class="btn btn-outline-secondary" onclick="cancelForm('myModal')">Cancel</button>
                </div>
            @* </form> *@
        </div>
    </div>
</div>

<div class="modal fade" id="colModal" role="dialog">
    <div class="modal-dialog modal-lg">

        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Update Slot</h4>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label" for="ddTrolley1">Universal Trolley</label>
                        <select class="form-select" aria-label="Default select example" name="Trolley" id="ddTrolley1"></select>
                        <div id="ddTrolley1Error" class="error-message"></div>
                    </div>
                    <div class="col">
                        <label class="form-label" for="txtCodeFormat">Universal Trolley Slot Code Format</label>
                        <input type="text" class="form-control" name="SlotCodeFormat" id="txtCodeFormat" aria-describedby="Slot Code Format">
                        <div id="txtCodeFormatError" class="error-message"></div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label" for="txtColFrom">Column No From</label>
                        <input type="number" class="form-control" name="ColNo" id="txtColFrom" aria-describedby="Slot Code">
                        <div id="txtColFromError" class="error-message"></div>
                        @* <span asp-validation-for="SlotCode" class="text-danger"></span> *@
                    </div>
                    <div class="col">
                        <label class="form-label" for="txtTotalCol">Total Column</label>
                        <input type="number" class="form-control" name="TotalCol" id="txtTotalCol" aria-describedby="Total Col">
                        <div id="txtTotalColError" class="error-message"></div>
                    </div>
                    <div class="col">
                        <label class="form-label" for="txtRowFrom">Row No From</label>
                        <input type="number" class="form-control" name="RowNo" id="txtRowFrom" aria-describedby="Row No">
                        <div id="txtRowFromError" class="error-message"></div>

                    </div>
                    <div class="col">
                        <label class="form-label" for="txtTotalRow">Total Row</label>
                        <input type="number" class="form-control" name="TotalRow" id="txtTotalRow" aria-describedby="Total Row">
                        <div id="txtTotalRowError" class="error-message"></div>
                    </div>
                </div>
               
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label" for="txtStartXPulse">X Pulse</label>
                        <input type="number" class="form-control" name="XPulse" id="txtStartXPulse" aria-describedby="X Pulse">
                        <div id="txtStartXPulseError" class="error-message"></div>
                    </div>
                    <div class="col">
                        <label class="form-label" for="txtXPulseIncrement">X Pulse Increment</label>
                        <input type="number" class="form-control" name="XPulseIncrement" id="txtXPulseIncrement" aria-describedby="X Pulse Increment">
                        <div id="txtXPulseIncrementError" class="error-message"></div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label" for="txtStartYPulse">Z Pulse</label>
                        <input type="number" class="form-control" name="YPulse" id="txtStartYPulse" aria-describedby="Z Pulse">
                        <div id="txtStartYPulseError" class="error-message"></div>
                    </div>
                    <div class="col">
                        <label class="form-label" for="txtYPulseIncrement">Z Pulse Increment</label>
                        <input type="number" class="form-control" name="YPulseIncrement" id="txtYPulseIncrement" aria-describedby="Z Pulse Increment">
                        <div id="txtYPulseIncrementError" class="error-message"></div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label" for="txtStartQrXPulse">QR-X Pulse</label>
                        <input type="number" class="form-control" name="QrXPulse" id="txtStartQrXPulse" aria-describedby="Qr-X Pulse">
                        <div id="txtStartQrXPulseError" class="error-message"></div>
                    </div>
                    <div class="col">
                        <label class="form-label" for="txtQrXPulseIncrement">QR-X Pulse Increment</label>
                        <input type="number" class="form-control" name="QrXPulseIncrement" id="txtQrXPulseIncrement" aria-describedby="Qr-X Pulse Increment">
                        <div id="txtQrXPulseIncrementError" class="error-message"></div>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col">
                        <label class="form-label" for="txtStartQrYPulse">QR-Z Pulse</label>
                        <input type="number" class="form-control" name="QrYPulse" id="txtStartQrYPulse" aria-describedby="Qr-Z Pulse">
                        <div id="txtStartQrYPulseError" class="error-message"></div>
                    </div>
                    <div class="col">
                        <label class="form-label" for="txtQrYPulseIncrement">QR-Z Pulse Increment</label>
                        <input type="number" class="form-control" name="QrYPulseIncrement" id="txtQrYPulseIncrement" aria-describedby="Qr-Z Pulse Increment">
                        <div id="txtQrYPulseIncrementError" class="error-message"></div>
                    </div>
                </div>

                <div id="additional2" class="hidden">
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtStartAddPulse1">Additional Pulse 1</label>
                            <input type="number" class="form-control" name="AddPulse1" id="txtStartAddPulse1" aria-describedby="Additional Pulse 1" min="1">
                            <div id="txtStartAddPulse1Error" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtAddPulse1Inc">Additional Pulse 1 Increment</label>
                            <input type="number" class="form-control" name="AddPulse1Inc" id="txtAddPulse1Inc" aria-describedby="Additional Pulse 1 Increment" min="1">
                            <div id="txtAddPulse1IncError" class="error-message"></div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtStartAddPulse2">Additional Pulse 2</label>
                            <input type="number" class="form-control" name="AddPulse2" id="txtStartAddPulse2" aria-describedby="Additional Pulse 2" min="1">
                            <div id="txtStartAddPulse2Error" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtAddPulse2Inc">Additional Pulse 2 Increment</label>
                            <input type="number" class="form-control" name="AddPulse2Inc" id="txtAddPulse2Inc" aria-describedby="Additional Pulse 2 Increment" min="1">
                            <div id="txtAddPulse2IncError" class="error-message"></div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtStartAddPulse3">Additional Pulse 3</label>
                            <input type="number" class="form-control" name="AddPulse3" id="txtStartAddPulse3" aria-describedby="Additional Pulse 3" min="1">
                            <div id="txtStartAddPulse3Error" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtAddPulse3Inc">Additional Pulse 3 Increment</label>
                            <input type="number" class="form-control" name="AddPulse3Inc" id="txtAddPulse3Inc" aria-describedby="Additional Pulse 3 Increment" min="1">
                            <div id="txtAddPulse3IncError" class="error-message"></div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtStartAddPulse4">Additional Pulse 4</label>
                            <input type="number" class="form-control" name="AddPulse4" id="txtStartAddPulse4" aria-describedby="Additional Pulse 4" min="1">
                            <div id="txtStartAddPulse4Error" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtAddPulse4Inc">Additional Pulse 4 Increment</label>
                            <input type="number" class="form-control" name="AddPulse4Inc" id="txtAddPulse4Inc" aria-describedby="Additional Pulse 4 Increment" min="1">
                            <div id="txtAddPulse4IncError" class="error-message"></div>
                        </div>
                   </div>
                   <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtStartAddPulse5">Additional Pulse 5</label>
                            <input type="number" class="form-control" name="AddPulse5" id="txtStartAddPulse5" aria-describedby="Additional Pulse 5" min="1">
                            <div id="txtStartAddPulse5Error" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtAddPulse5Inc">Additional Pulse 5 Increment</label>
                            <input type="number" class="form-control" name="AddPulse5Inc" id="txtAddPulse5Inc" aria-describedby="Additional Pulse 5 Increment" min="1">
                            <div id="txtAddPulse5IncError" class="error-message"></div>
                        </div>
                   </div>
                   <div class="row mb-3">
                        <div class="col">
                            <label class="form-label" for="txtStartAddPulse6">Additional Pulse 6</label>
                            <input type="number" class="form-control" name="AddPulse6" id="txtStartAddPulse6" aria-describedby="Additional Pulse 6" min="1">
                            <div id="txtStartAddPulse6Error" class="error-message"></div>
                        </div>
                        <div class="col">
                            <label class="form-label" for="txtAddPulse6Inc">Additional Pulse 6 Increment</label>
                            <input type="number" class="form-control" name="AddPulse6Inc" id="txtAddPulse6Inc" aria-describedby="Additional Pulse 6 Increment" min="1">
                           <div id="txtAddPulse6IncError" class="error-message"></div>
                        </div>
                   </div>
                </div>

                <span id="textlink2" class="text-link" tabindex="0" onclick="customPulses('colModal', true)"><i class="fas fa-plus-circle"></i> Additional Pulses</span>

                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="chkIsActive">
                    <label class="form-check-label" for="chkIsActive">Is Active</label>
                </div>
                <div class="col form-check mb-3">
                    <input type="checkbox" class="form-check-input" id="chkIsLeft">
                    <label class="form-check-label" for="chkIsLeft">Is Left</label>
                </div>
                    
                <input type="hidden" id="txtId">
                @* <input type="hidden" id="txtTrolleyId"> *@

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="saveRangeOfSlot()">Save</button>
                <button type="button" class="btn btn-outline-secondary" onclick="cancelForm('colModal')">Cancel</button>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
	<link href="~/css/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/sweetalert2.min.css">

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/datatables.min.js"></script>
    <script src="~/js/sweetalert2.all.min.js"></script>    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.1/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>

	<script type="text/javascript">
        var trolleyCodeList = [];

        $(document).ready(async function () {
            getDropdownTrolley();
            loadList();
        });

        function loadList() {
             console.log("trolley", trolleyCodeList);

            $.ajax({
                url: "/Trolley/GetTrolleySlotList/",
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    swal.close()
                    if (result.success == true) {
                        $('#listTable').DataTable( {
                            data: result.data,
                            paging: true,
                            pageLength: 50,
                            lengthMenu: [50, 100, 250, 500, 1000],
                            columns: [
                                { 
                                    data: 'trolley_Id',
                                    render: function (data, type, row) {
                                        console.log("here", trolleyCodeList);

                                        var trolley = trolleyCodeList.find(function(i) {
                                            return i.trolleyId === data;
                                        });
                                        return trolley ? trolley.trolleyCode: '';
                                    }
                                },
                                { data: 'trolleySlotCode' },
                                { data: 'colNo' },
                                { data: 'rowNo' },
                                // { data: 'reelNo'},
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        if (row.isActive == true) {
                                            return '<span><i class="bi bi-check-square" style="color: darkgreen;"></i></span>'
                                        }
                                        else {
                                            return '<span><i class="bi bi-app""></i></span>'
                                        }
                                    }
                                },
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        if (row.isLeft == true) {
                                            return '<span><i class="bi bi-check-square" style="color: darkgreen;"></i></span>'
                                        }
                                        else {
                                            return '<span><i class="bi bi-app""></i></span>'
                                        }
                                    }
                                },
                                { data: 'xPulse' },
                                { data: 'yPulse' },
                                { data: 'qrxPulse' },
                                { data: 'qryPulse' },
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        const rawData = JSON.stringify(row).replace(/"/g, "&quot;");
                                        return `<div style="display:flex;">
                                                    <button class="btn btn-success d-grid edit-slot-btn" style="margin-right:10px;" data-row="${rawData}">
                                                        <span><i class="bi bi-pencil-square"></i>Edit</span>
                                                    </button>
                                                    <button class="btn btn-danger deactivate-account delete-slot-btn" data-id="${row.trolleySlot_Id}" data-code=${row.trolleySlotCode}">
                                                        <span><i class="bi bi-trash"></i>Delete</span>
                                                    </button>
                                                </div>`;
                                    }
                                }
                            ],
                        });
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function newSlotForm() {
            getDropdownTrolley();

            $("#txtId").val("0");
            $('#ddTrolley').val("");
            $("#txtCode").val("");
            $("#txtColNo").val("");
            $("#txtRowNo").val("");
            $("#txtXPulse").val("");
            $("#txtYPulse").val("");
            $("#txtQrXPulse").val("");
            $("#txtQrYPulse").val("");
            document.getElementById("chkIsActive").checked = true;
            $("#myModal").modal("show");
        }

        function newSlotColForm() {
            $("#colModal").modal("show");
        }

        function getDropdownTrolley() {
            // return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/Trolley/GetActiveTrolleyList/",
                    type: "GET",
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    success: function (result) {
                        if (result.success == true) {

                            trolleyCodeList = result.data.map(function (t) {
                                return {
                                    trolleyId: t.trolley_Id,
                                    trolleyCode: t.trolleyCode,
                                };
                            });
                            console.log("trolley list", trolleyCodeList);
                            const dropdownIds = ['ddTrolley', 'ddTrolley1'];
                            dropdownIds.forEach(function (id) {
                                const dropdown = document.getElementById(id);
                                dropdown.innerHTML = "";

                                const defaultOption = document.createElement("option");
                                defaultOption.value = "";
                                defaultOption.textContent = "Select a trolley";
                                defaultOption.disabled = true;
                                defaultOption.selected = true;
                                dropdown.appendChild(defaultOption);

                                result.data.forEach(function (t) {
                                    const option = document.createElement("option");
                                    option.value = t.trolley_Id;
                                    option.textContent = t.trolleyCode;
                                    dropdown.appendChild(option);
                                });
                            });
                            // resolve();
                        } else {
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: result.errMessage
                            });
                            // reject(new Error(result.errMessage));
                        }
                    },
                    error: function (error) {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                        // reject(new Error(error.val)); 
                    }
                });
            // });
        }

        function cancelForm(modalId) {
            $('#' + modalId).modal("toggle");

            var fields;
            if (modalId == "colModal") {
                fields = ['txtCodeFormat', 'txtColFrom', 'txtTotalCol', 'txtRowFrom', 'txtTotalRow', 'txtStartXPulse', 'txtXPulseIncrement', 'txtStartYPulse', 'txtYPulseIncrement', 'txtStartQrXPulse', 'txtQrXPulseIncrement', 'txtStartQrYPulse', 'txtQrYPulseIncrement'];
            } 
            else {
                fields = ['ddTrolley', 'txtCode', 'txtColNo', 'txtRowNo', 'txtXPulse', 'txtYPulse', 'txtQrXPulse', 'txtQrYPulse', 'txtAddPulse1', 'txtAddPulse2', 'txtAddPulse3', 'txtAddPulse4', 'txtAddPulse5', 'txtAddPulse6'];
            }
            removeErrMsg(fields, true);
            customPulses(modalId);
        }

        function validateColModal(fields) {
            removeErrMsg(fields.map(f => f.id));
            let isValid = true;

            fields.forEach(field => {
                const value = document.getElementById(field.id).value.trim();

                if (field.required && value === '') {
                    if (field.dropdown)
                    {
                        showError(field.id, `Please choose a ${field.name}.`);
                        isValid = false;
                    }
                    else 
                    {
                        if (!field.allowEmpty)
                        {
                            showError(field.id, `Please enter a ${field.name}.`);
                            isValid = false;
                        }
                    }
                    return;
                }

                if (field.numeric && (isNaN(value.trim()) || Number(value) < (field.min))) {
                    showError(field.id, `Please enter a valid ${field.name} (number >= ${field.min}).`);
                    isValid = false;
                }
            });
            return isValid;
        }

        function showError(fieldId, message) {
            document.getElementById(fieldId).classList.add('is-invalid');
            document.getElementById(fieldId + 'Error').textContent = message;
        }

        function removeErrMsg(fields, clearValue = false) {
            if (fields != null)
            {
                if (!Array.isArray(fields)) {
                    fields = [fields];
                }

                fields.forEach(function(field) {
                    document.getElementById(field).classList.remove('is-invalid');
                    document.getElementById(field).classList.remove('is-valid');
                    document.getElementById(field + 'Error').textContent = '';
                    if (clearValue) document.getElementById(field).value = '';
                });
            }
        }

        function saveSlot() {
            const fields = [
                { id: 'ddTrolley', name: 'Trolley', required: true, numeric: false, dropdown: true },
                { id: 'txtCode', name: 'Slot Code', required: true, numeric: false },
                { id: 'txtColNo', name: 'Column No', required: true, numeric: true, min: 1 },
                { id: 'txtRowNo', name: 'Row No', required: true, numeric: true, min: 1 },
                { id: 'txtXPulse', name: 'X Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtYPulse', name: 'Y Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtQrXPulse', name: 'Qr-X Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtQrYPulse', name: 'Qr-Y Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtAddPulse1', name: 'Additional Pulse 1', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse2', name: 'Additional Pulse 2', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse3', name: 'Additional Pulse 3', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse4', name: 'Additional Pulse 4', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse5', name: 'Additional Pulse 5', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse6', name: 'Additional Pulse 6', required: true, numeric: true, min: 0, allowEmpty: true },
            ];
          
            if (validateColModal(fields)) {
                var data = {
                    Trolley_Id: $('#ddTrolley').val(),
                    TrolleySlot_Id: parseInt($("#txtId").val()) || 0,
                    TrolleySlotCode: $("#txtCode").val(),
                    ColNo: parseInt($("#txtColNo").val()) || 0,
                    RowNo: parseInt($("#txtRowNo").val()) || 0,
                    XPulse: parseInt($("#txtXPulse").val()) || 0,
                    YPulse: parseInt($("#txtYPulse").val()) || 0,
                    QRXPulse: parseInt($("#txtQrXPulse").val()) || 0,
                    QRYPulse: parseInt($("#txtQrYPulse").val()) || 0,
                    Add1Pulse: parseInt($('#txtAddPulse1').val()) || 0,
                    Add2Pulse: parseInt($('#txtAddPulse2').val()) || 0,
                    Add3Pulse: parseInt($('#txtAddPulse3').val()) || 0,
                    Add4Pulse: parseInt($('#txtAddPulse4').val()) || 0,
                    Add5Pulse: parseInt($('#txtAddPulse5').val()) || 0,
                    Add6Pulse: parseInt($('#txtAddPulse6').val()) || 0,
                    IsActive: $('#myModal').find('#chkIsActive').prop("checked"),
                    IsLeft: $('#myModal').find('#chkIsLeft').prop("checked")
                };

                console.log(data);

                $.ajax({
                    url: '/Trolley/SaveTrolleySlot',
                    type: 'POST',
                    data: JSON.stringify(data),
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        Swal.fire({
                            text: 'Please Wait',
                            width: '300px',

                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            showConfirmButton: false,
                        });
                        Swal.showLoading()
                    },
                    success: function (result) {
                        if (result.success == true) {
                            $("#myModal").modal("toggle");
                            swal.fire({
                                icon: 'success',
                                title: "Success Update",
                                text: "",
                                didClose: () => {
                                  window.location.reload();
                                }
                            });
                        }
                        else {
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: result.errMessage
                            });
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                    }
                });
            }
        }

        function customPulses(modalId, isChange) {
            let container, text;

            if (modalId === "myModal") {
                container = document.getElementById("additional");
                text = document.getElementById("textlink");
            } else {
                container = document.getElementById("additional2");
                text = document.getElementById("textlink2");
            }

            const isHidden = container.classList.contains("hidden");

            if (isHidden) {
                if (isChange)
                {
                    container.classList.remove("hidden");
                    text.innerHTML = '<i class="fas fa-minus-circle"></i> Additional Pulses';
                }
                
                if (modalId == "myModal") {
                    for (let i = 1; i <= 6; i++) {
                        removeErrMsg(`txtAddPulse${i}`);
                    }
                }
                else 
                {
                    for (let i = 1; i <= 6; i++) {
                        removeErrMsg(`txtStartAddPulse${i}`);
                        removeErrMsg(`txtAddPulse${i}Inc`);
                    }
                }

            } else {
                
                container.classList.add("hidden");
                text.innerHTML = '<i class="fas fa-plus-circle"></i> Additional Pulses';
                
                
                if (modalId == "myModal") {
                    for (let i = 1; i <= 6; i++) {
                        const field = document.getElementById(`txtAddPulse${i}`);
                        if (field) field.value = "";
                    }
                }
                else 
                {
                    for (let i = 1; i <= 6; i++) {
                        const field = document.getElementById(`txtStartAddPulse${i}`);
                        const field2 = document.getElementById(`txtAddPulse${i}Inc`);
                        if (field) field.value = "";
                        if (field2) field2.value = "";
                    }
                }
            }
        }

        $('#listTable').on('click', '.edit-slot-btn', function () {
            const row = JSON.parse($(this).attr('data-row'));
            editSlotForm(row);
        });

        async function editSlotForm(row) {
            var hasValue = false;

            $('#ddTrolley').val(row.trolley_Id);
            $('#txtId').val(row.trolleySlot_Id);
            $('#txtCode').val(row.trolleySlotCode);
            $('#txtColNo').val(row.colNo);
            $("#txtRowNo").val(row.rowNo);
            $("#txtXPulse").val(row.xPulse);
            $("#txtYPulse").val(row.yPulse);
            $("#txtQrXPulse").val(row.qrxPulse);
            $("#txtQrYPulse").val(row.qryPulse);

            var addPulseFields = [
                { field: "#txtAddPulse1", value: row.add1Pulse },
                { field: "#txtAddPulse2", value: row.add2Pulse },
                { field: "#txtAddPulse3", value: row.add3Pulse },
                { field: "#txtAddPulse4", value: row.add4Pulse },
                { field: "#txtAddPulse5", value: row.add5Pulse },
                { field: "#txtAddPulse6", value: row.add6Pulse },
            ];

            addPulseFields.forEach(function(item) {
                $(item.field).val(item.value > 0 ? item.value : "");
                if (item.value > 0) hasValue = true; 
            });

            document.getElementById("chkIsActive").checked = row.isActive === true || row.isActive === "true";
            document.getElementById("chkIsLeft").checked = row.isLeft === true || row.isLeft === "true";
            if (hasValue) customPulses('myModal', true);

            $("#myModal").modal("show");
        }

        $('#listTable').on('click', '.delete-slot-btn', function () {
            const id = $(this).attr('data-id');
            const slotCode = $(this).attr('data-code');
            deleteSlot(id, slotCode);
        });

        function deleteSlot(id, slotCode) {
            swal.fire({
                title: "Are you sure want to delete?",
                text: "You will not be able to recover this record!",
                inputAttributes: {
                    autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'ok',
                cancelButtonText: 'cancel',
                allowOutsideClick: false
              }).then(function(r) {
                if (r.isConfirmed == true) {
                    var data = {
                        TrolleySlot_Id: id,
                        TrolleySlotCode: slotCode,
                        ColNo: 0,
                        RowNo: 0,
                        IsActive: false
                    }

                    $.ajax({
                        url: '/Trolley/DeleteTrolleySlot',
                        type: 'DELETE',
                        data: JSON.stringify(data),
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            Swal.fire({
                                text: 'Please Wait',
                                width: '300px',

                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                showConfirmButton: false,
                            });
                            Swal.showLoading()
                        },
                        success: function (result) {
                            if (result.success == true) {
                                swal.fire({
                                    icon: 'success',
                                    title: "Success Deleted",
                                    text: "",
                                    didClose: () => {
                                      window.location.reload();
                                    }
                                });
                            }
                            else {
                                swal.fire({
                                    icon: 'error',
                                    title: "Wait",
                                    text: result.errMessage
                                });
                            }
                        },
                        error: function (error) {
                            console.log(error);
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: error.val
                            });
                        }
                    });

                } else {
                    return;
                }
              });
        }

        function saveRangeOfSlot() {
            let addPulseFields;
            const fields = [
                { id: 'ddTrolley1', name: 'Trolley', required: true, numeric: false, dropdown: true },
                { id: 'txtCodeFormat', name: 'Slot Code Format', required: true, numeric: false },
                { id: 'txtColFrom', name: 'Column No From', required: true, numeric: true, min: 1 },
                { id: 'txtTotalCol', name: 'Total Column', required: true, numeric: true, min: 1 },
                { id: 'txtRowFrom', name: 'Row No From', required: true, numeric: true, min: 1 },
                { id: 'txtTotalRow', name: 'Total Row', required: true, numeric: true, min: 1 },
                { id: 'txtStartXPulse', name: 'X Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtXPulseIncrement', name: 'X Pulse Increment', required: true, numeric: true, min: 0 },
                { id: 'txtStartYPulse', name: 'Y Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtYPulseIncrement', name: 'Y Pulse Increment', required: true, numeric: true, min: 0 },
                { id: 'txtStartQrXPulse', name: 'Qr-X Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtQrXPulseIncrement', name: 'Qr-X Pulse Increment', required: true, numeric: true, min: 0 },
                { id: 'txtStartQrYPulse', name: 'Qr-Y Pulse', required: true, numeric: true, min: 0 },
                { id: 'txtQrYPulseIncrement', name: 'Qr-Y Pulse Increment', required: true, numeric: true, min: 0 },
                { id: 'txtStartAddPulse1', name: 'Additional Pulse 1', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse1Inc', name: 'Additional Pulse 1 Increment', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtStartAddPulse2', name: 'Additional Pulse 2', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse2Inc', name: 'Additional Pulse 2 Increment', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtStartAddPulse3', name: 'Additional Pulse 3', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse3Inc', name: 'Additional Pulse 3 Increment', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtStartAddPulse4', name: 'Additional Pulse 4', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse4Inc', name: 'Additional Pulse 4 Increment', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtStartAddPulse5', name: 'Additional Pulse 5', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse5Inc', name: 'Additional Pulse 5 Increment', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtStartAddPulse6', name: 'Additional Pulse 6', required: true, numeric: true, min: 0, allowEmpty: true },
                { id: 'txtAddPulse6Inc', name: 'Additional Pulse 6 Increment', required: true, numeric: true, min: 0, allowEmpty: true },
            ];

            if (validateColModal(fields)) {
                var data = {
                    Trolley_Id: parseInt($('#ddTrolley1').val()),
                    TrolleySlot_Id: parseInt($("#txtId").val()) || 0,
                    TrolleySlotFormat: $('#txtCodeFormat').val(),
                    StartCol: parseInt($("#txtColFrom").val()) || 0,
                    TotalCols: parseInt($("#txtTotalCol").val()) || 0,
                    StartRow: parseInt($("#txtRowFrom").val()) || 0,
                    TotalRows: parseInt($("#txtTotalRow").val()) || 0,
                    XPulse: parseInt($("#txtStartXPulse").val()) || 0,
                    XPulseIncrement: parseInt($("#txtXPulseIncrement").val()) || 0,
                    YPulse: parseInt($("#txtStartYPulse").val()) || 0,
                    YPulseIncrement: parseInt($("#txtYPulseIncrement").val()) || 0,
                    QRXPulse: parseInt($("#txtStartQrXPulse").val()) || 0,
                    QRXPulseIncrement: parseInt($("#txtQrXPulseIncrement").val()) || 0,
                    QRYPulse: parseInt($("#txtStartQrYPulse").val()) || 0,
                    QRYPulseIncrement: parseInt($("#txtQrYPulseIncrement").val()) || 0,
                    Add1Pulse: parseInt($('#txtStartAddPulse1').val()) || 0,
                    Add1PulseIncrement: parseInt($('#txtAddPulse1Inc').val()) || 0,
                    Add2Pulse: parseInt($('#txtStartAddPulse2').val()) || 0,
                    Add2PulseIncrement: parseInt($("#txtAddPulse2Inc").val()) || 0,
                    Add3Pulse: parseInt($('#txtStartAddPulse3').val()) || 0,
                    Add3PulseIncrement: parseInt($('#txtAddPulse3Inc').val()) || 0,
                    Add4Pulse: parseInt($('#txtStartAddPulse4').val()) || 0,
                    Add4PulseIncrement: parseInt($('#txtAddPulse4Inc').val()) || 0,
                    Add5Pulse: parseInt($('#txtStartAddPulse5').val()) || 0,
                    Add5PulseIncrement: parseInt($('#txtAddPulse5Inc').val()) || 0,
                    Add6Pulse: parseInt($('#txtStartAddPulse6').val()) || 0,
                    Add6PulseIncrement: parseInt($('#txtAddPulse6Inc').val()) || 0,
                    IsActive: $('#colModal').find('#chkIsActive').prop("checked"),
                    IsLeft: $('#colModal').find('#chkIsLeft').prop("checked"),
                };

                $.ajax({
                    url: '/Trolley/SaveRangeOfTrolleySlot',
                    type: 'POST',
                    data: JSON.stringify(data),
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        Swal.fire({
                            text: 'Please Wait',
                            width: '300px',

                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            showConfirmButton: false,
                        });
                        Swal.showLoading()
                    },
                    success: function (result) {
                        if (result.success == true) {
                            $("#myModal").modal("toggle");
                            swal.fire({
                                icon: 'success',
                                title: "Success Update",
                                text: "",
                                didClose: () => {
                                    window.location.reload();
                                }
                            });
                        }
                        else {
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: result.errMessage
                            });
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                    }
                });
            }
        }

        function downloadTemp(type) {
            var book = XLSX.utils.book_new();
            book.Props = {
                Title: "Template",
                Subject: type === "slots" ? "Slot List" : "Pulses",
                Author: "Flex Software Consulting Sdn Bhd",
                CreatedDate: new Date()
            };

            var book_header = type === "slots" ? [
                ['Trolley Code', 'Trolley Slot Code', 'Column No', 'Row No', 'Is Active', 'Is Left', 'X Pulse', 'Z Pulse', 'QR-X Pulse', 'QR-Z Pulse', 
                'Additional Pulse 1', 'Additional Pulse 2', 'Additional Pulse 3', 'Additional Pulse 4', 'Additional Pulse 5', 'Additional Pulse 6']
            ] : [
                ['Trolley Slot Code', 'X Pulse', 'Z Pulse', 'QR-X Pulse', 'QR-Z Pulse', 
                'Additional Pulse 1', 'Additional Pulse 2', 'Additional Pulse 3', 'Additional Pulse 4', 'Additional Pulse 5', 'Additional Pulse 6']
            ];

            var booksheet = XLSX.utils.aoa_to_sheet(book_header);
            // const bs = XLSX.utils.json_to_sheet(book_header);
            booksheet['!cols'] = type === "slots" ? [
                {wpx: 70}, {wpx: 100}, {wpx: 60}, {wpx: 50}, {wpx: 50}, {wpx: 50}, {wpx: 50}, {wpx: 50}, 
                {wpx: 60}, {wpx: 60}, {wpx: 100}, {wpx: 100}, {wpx: 100}, {wpx: 100}, {wpx: 100}, {wpx: 100}
            ] : [
                {wpx: 100}, {wpx: 50}, {wpx: 50}, {wpx: 60}, {wpx: 60},
                {wpx: 100}, {wpx: 100}, {wpx: 100}, {wpx: 100}, {wpx: 100}, {wpx: 100}
            ]
            XLSX.utils.book_append_sheet(book, booksheet, "Sheet1");
            XLSX.writeFile(book, type === "slots" ? "TrolleySlotListTemplate.xlsx" : "TrolleySlotPulsesTemplate.xlsx");
        }

        function triggerFileInput(source) {
            const input = document.getElementById('fileInput');
            input.value = ""; 
            input.dataset.source = source;
            input.click();
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            const source = event.target.dataset.source;

            if (file) 
            {
                const reader = new FileReader();
                const fileExtension = file.name.split('.').pop().toLowerCase();
                if (fileExtension === 'csv' || fileExtension === 'xlsx' || fileExtension === 'xls') {
                    reader.onload = function(e) {
                        const content = e.target.result;
                        processFileContent(content, fileExtension, source);
                    };
            
                    if (fileExtension === 'csv') {
                        reader.readAsText(file);
                    } else {
                        reader.readAsArrayBuffer(file); 
                    }
                }
                else {
                    alert("Only CSV, XLSX, and XLS files are supported.");
                }
            }
        }

        function processFileContent(content, fileExtension, source) {
            try {
                let data;
        
                if (fileExtension === 'csv') {
                    data = XLSX.read(content, { type: 'string', codepage: 65001 });
                    data = XLSX.utils.sheet_to_json(data.Sheets[data.SheetNames[0]], { header: 1 });
                } else {
                    const workbook = XLSX.read(content, { type: 'array' });
                    const sheet = workbook.Sheets[workbook.SheetNames[0]];
                    data = XLSX.utils.sheet_to_json(sheet, { header: 1 });
                }

                if (!data || data.length === 0) {
                    alert("The uploaded file appears to be empty or malformed.");
                    return;
                }

                const columns = data[0]; 
                if (columns.length === 0) {
                    alert("No headers found in the file.");
                    return;
                }

                uploadedFileContent = content;
                uploadedFileExtension = fileExtension;
                showColumnMapping(columns, source);

            } catch (error) {
                console.error("Error processing the file:", error);
                alert("Failed to process the uploaded file.");
            }
        }

        function showColumnMapping(columns, source) {
            let dataTableColumns;

            if (source == "importSlot") {
                dataTableColumns = ['Trolley Code', 'Trolley Slot Code', 'Column No', 'Row No', 'Is Active', 'Is Left', 'X Pulse', 'Z Pulse', 'QR-X Pulse', 'QR-Z Pulse',
                                     'Additional Pulse 1', 'Additional Pulse 2', 'Additional Pulse 3', 'Additional Pulse 4', 'Additional Pulse 5', 'Additional Pulse 6'];
                $('#updateType').val("slots");
            }
            else {
                dataTableColumns = ['Trolley Slot Code',  'X Pulse', 'Z Pulse', 'QR-X Pulse', 'QR-Z Pulse',
                                     'Additional Pulse 1', 'Additional Pulse 2', 'Additional Pulse 3', 'Additional Pulse 4', 'Additional Pulse 5', 'Additional Pulse 6'];
                $('#updateType').val("pluses"); 
            }

            let columnDropdowns = '';
    
            const isMatch = (col1, col2) => {
                const col1Str = String(col1).toLowerCase().replace(/\s+/g, '');
                const col2Str = String(col2).toLowerCase().replace(/\s+/g, '');
                return col1Str === col2Str;
            };

            columns.forEach((column, index) => {
                const matchedCol = dataTableColumns.find(col => isMatch(col, column));

                columnDropdowns += `
                <div class="container">
                    <div class="row justify-content-center align-items-center mb-3">
                        <div class="col-5">
                            <label class="form-label mb-0">File Column: ${column}</label>
                        </div>
                        <div class="col-5">
                            <select class="form-select column-mapping" 
                                    data-col="${column}" 
                                    id="column${index}">
                                <option value="">Select Matching Column</option>
                                ${dataTableColumns.map(col => `
                                    <option value="${col}" ${matchedCol === col ? 'selected' : ''}>${col}</option>
                                `).join('')}
                            </select>
                        </div>
                    </div>
                </div>`;
            });

            document.getElementById('csvColumnContent').innerHTML = columnDropdowns;
            $('#columnMatchingModal').modal("show");
        }

        function captureUserMappings() {
            const mappings = {};
            document.querySelectorAll('.column-mapping').forEach((selectElement, index) => {
                const selectedValue = selectElement.value; 
                const columnName = selectElement.getAttribute('data-col');
                if (selectedValue) {
                    mappings[columnName] = selectedValue;
                } else {
                    console.log(`No selection for column: ${columnName}`);
                }
            });
            return mappings;
        }

        function processAndSubmitData() {
            let workbook;
            let slotsData;
            userMappings = captureUserMappings();
            content = uploadedFileContent;
            fileExtension = uploadedFileExtension;
            const updateType = $('#updateType').val();

            try {
                if (fileExtension === 'csv') {
                    workbook = XLSX.read(content, { type: 'string', codepage: 65001 });
                } else {
                    workbook = XLSX.read(content, { type: 'array' });
                }

                const sheet = workbook.Sheets[workbook.SheetNames[0]];
                const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });

                const columns = data[0]; 
                const colIndex = {};

                if (updateType === "slots")
                {
                    const fieldNames = [
                        'Trolley Code', 'Trolley Slot Code', 'Column No', 'Row No', 'X Pulse', 'Y Pulse', 'Qr-X Pulse', 'Qr-Y Pulse',
                        'Additional Pulse 1', 'Additional Pulse 2', 'Additional Pulse 3', 'Additional Pulse 4', 'Additional Pulse 5', 'Additional Pulse 6',
                        'Is Active', 'Is Left'
                    ];
                    fieldNames.forEach(field => {
                        colIndex[field] = columns.indexOf(normalizeString(userMappings, field));
                    });

                    const parseBool = val =>
                        val === true || val === 1 || val === '1' || val === 'true' || val === 'TRUE';

                    slotsData = data.slice(1).map(row => {
                        var trolley = trolleyCodeList.find(x => x.trolleyCode == row[0]);

                        return {
                            Trolley_Id: trolley.trolleyId,
                            TrolleySlotCode: row[colIndex['Trolley Slot Code']],
                            ColNo: row[colIndex['Column No']],
                            RowNo: row[colIndex['Row No']],
                            XPulse: row[colIndex['X Pulse']],
                            YPulse: row[colIndex['Y Pulse']],
                            QRXPulse: row[colIndex['Qr-X Pulse']],
                            QRYPulse: row[colIndex['Qr-Y Pulse']],
                            Add1Pulse: row[colIndex['Additional Pulse 1']],
                            Add2Pulse: row[colIndex['Additional Pulse 2']],
                            Add3Pulse: row[colIndex['Additional Pulse 3']],
                            Add4Pulse: row[colIndex['Additional Pulse 4']],
                            Add5Pulse: row[colIndex['Additional Pulse 5']],
                            Add6Pulse: row[colIndex['Additional Pulse 6']],
                            IsActive: parseBool(row[colIndex['Is Active']]),
                            IsLeft: parseBool(row[colIndex['Is Left']]),
                        };
                    });
                }
                else {
                    const fieldNames = [
                        'Trolley Slot Code','X Pulse', 'Y Pulse', 'Qr-X Pulse', 'Qr-Y Pulse',
                        'Additional Pulse 1', 'Additional Pulse 2', 'Additional Pulse 3', 'Additional Pulse 4', 'Additional Pulse 5', 'Additional Pulse 6',
                        'Is Active', 'Is Left'
                    ];
                    fieldNames.forEach(field => {
                        colIndex[field] = columns.indexOf(normalizeString(userMappings, field));
                    });

                    // const parseBool = val =>
                    //     val === true || val === 1 || val === '1' || val === 'true' || val === 'TRUE';

                    slotsData = data.slice(1).map(row => {
                        return {
                            TrolleySlotCode: row[colIndex['Trolley Slot Code']],
                            XPulse: row[colIndex['X Pulse']],
                            YPulse: row[colIndex['Y Pulse']],
                            QRXPulse: row[colIndex['Qr-X Pulse']],
                            QRYPulse: row[colIndex['Qr-Y Pulse']],
                            Add1Pulse: row[colIndex['Additional Pulse 1']],
                            Add2Pulse: row[colIndex['Additional Pulse 2']],
                            Add3Pulse: row[colIndex['Additional Pulse 3']],
                            Add4Pulse: row[colIndex['Additional Pulse 4']],
                            Add5Pulse: row[colIndex['Additional Pulse 5']],
                            Add6Pulse: row[colIndex['Additional Pulse 6']],
                            // IsActive: parseBool(row[colIndex['Is Active']]),
                            // IsLeft: parseBool(row[colIndex['Is Left']]),
                        };
                    });
                }

                console.log(slotsData);
                saveExcelSlots(slotsData, content, updateType); 

            } catch (error) {
                console.error("Error processing the file:", error);
                alert("Failed to process the uploaded file.");
            }
        }

        function normalizeString(userMappings, str) {
            var rValue = str;

            if (userMappings != null)
            {
                rValue = userMappings[str];
            }

            return rValue;
        }

        function saveExcelSlots(slotsData, bookBuffer, source) {
            const url = source == "slots" ? '/Trolley/SaveExcelTrolleySlot' : '/Trolley/UpdateExcelTSPulses';
            if (slotsData != null)
            {
                $.ajax({
                    url: url, 
                    type: 'POST',
                    data: JSON.stringify(slotsData),
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        Swal.fire({
                            text: 'Please Wait',
                            width: '300px',

                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            showConfirmButton: false,
                        });
                        Swal.showLoading()
                    },
                    success: function(response) {
                        if (response.success == true) {
                            swal.fire({
                                icon: 'success',
                                title: "Success Update",
                                text: "",
                                didClose: () => {
                                    window.location.reload();
                                }
                            });
                        } else {
                           if (response.data && response.data.length > 0) {
                               markErrorsInSheet(bookBuffer, response.data, source);
                               swal.fire({
                                  icon: 'warning',
                                  title: "Validation Issues Found",
                                  text: "Review on returned file and fix errors."
                               });
                               $('#columnMatchingModal').modal("toggle");

                           } else {
                               swal.fire({
                                  icon: 'error',
                                  title: "Wait",
                                  text: response.errMessage
                               });
                           }
                        }
                    },
                    error: function(xhr, status, error) {
                        console.log(error);
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                    }
                });
            }
        }

        async function markErrorsInSheet(bookBuffer, errorRows, updateType) {
              const workbook = new ExcelJS.Workbook();
              await workbook.xlsx.load(bookBuffer);
              const worksheet = workbook.getWorksheet(1); 
              const columnsToHighlight = updateType === "slots" ? [2, 3, 4, 17] : [1, 12];

              // let colorIndex = 0;
              // const highlightColors = [
              //     'FFCCCC', 
              //     'FFE5CC', 
              //     'FFFFCC', 
              //   ];

              // Add "Error" header 
              const headerRow = worksheet.getRow(1);
              const errIdx = updateType === "slots" ? 17 : 12;
              headerRow.getCell(errIdx).value = 'Error';
              headerRow.commit();

              worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                if (rowNumber === 1) return; 
                const errorRow = errorRows[rowNumber - 2];
                console.log(errorRow);

                  // const fillColor = highlightColors[colorIndex % highlightColors.length];
                  // colorIndex++;
                  console.log("error index" , errIdx);
                  console.log(columnsToHighlight);

                  if (errorRow && errorRow.errorMsg != "")
                  {
                      columnsToHighlight.forEach(colNum => {
                            const cell = row.getCell(colNum);
                            cell.fill = { 
                                type: 'pattern',
                                pattern: 'solid',
                                fgColor: { argb: 'FFCCCC' }
                            };
                        });
                     row.getCell(errIdx).value = errorRow.errorMsg;
                  }
              });

              // Export updated file
              const updatedBuffer = await workbook.xlsx.writeBuffer();
              const blob = new Blob([updatedBuffer], {
                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
              });

              const link = document.createElement("a");
              link.href = URL.createObjectURL(blob);
              link.download = "TrolleySlotList_Errors.xlsx";
              link.click();

              Swal.fire({
                icon: 'warning',
                title: "Validation Issues Found",
                text: "Review on returned file and fix errors."
              });
        }
	</script>
}

