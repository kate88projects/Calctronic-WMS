
@{
}


<style type="text/css">
    body {
        color: #566787;
        background: #f5f5f5;
        /* font-family: 'Varela Round', sans-serif; */
        /* font-size: 13px; */
    }

    .status {
        font-size: 30px;
        margin: 2px 2px 0 0;
        display: inline-block;
        vertical-align: middle;
        line-height: 10px;
    }

    .table-title {
        color: #fff;
        background: #4b5366;
        /*     padding: 16px 25px;
        margin: -20px -25px 10px; */
        border-radius: 3px 3px 0 0;
    }

    .table-title h2 {
        margin: 5px 0 0;
        font-size: 24px;
    }

    .containerDtl {
        height: 100%;
        width: 100%;
        border-radius: 10px;
        overflow: hidden;
        background-color: white;
        /* padding: 30px;        */
        /* display: flex; 
        justify-content: center; 
        align-items: center;  */

    }

    .containerDtlHistory {
        width: 100%;
        border-radius: 10px;
        overflow: hidden;
        background-color: white;
        padding: 30px;
    }

    .containerDtlHistory p {
        margin-bottom: 0;
    }

    .containerDtlHistory input {
        padding: 10px 0;
        margin-bottom: 10px;
    }

    .progressBar {
        margin-bottom: 30px;
        overflow: hidden;
        color: lightgray;
        display: flex;
        /* justify-content: space-between;*/
        margin-top: 10px;
        padding: 10px 10px 0px;
        /*position: relative; */
    }

    .progressBar li {
        list-style-type: none;
        font-size: 15px;
        width: 16.66%;
        float: left;
        font-weight: 400;
        text-align: center;
        position: relative;
        z-index: 1;
    }

    .progressBar .active {
        color: #673ab7;
    }

    .progressBar li::before {
        width: 50px;
        height: 50px;
        line-height: 50px;
        display: block;
        font-size: 20px;
        color: #fff;
        background: lightgrey;
        border-radius: 50%;
        margin: 0 auto 10px auto;
        padding: 2px;
    }

    .progressBar li::after {
        content: "";
        width: 100%;
        height: 2px;
        background: lightgrey;
        position: absolute;
        left: 50px;
        top: 25px;
        z-index: -1;
    }

    .progressBar li.active::before {
        background: #673ab7;
    }

    .progressBar li.next::after {
        background: #673ab7;
    }

    .progressBar #step1::before {
        content: "1";
        font-family: Arial;
    }

    .progressBar #step2::before {
        content: "2";
        font-family: Arial;
    }

    .progressBar #step3::before {
        content: "3";
        font-family: Arial;
    }

    .progressBar #step4::before {
        content: "4";
        font-family: Arial;
    }

    .progressBar #step5::before {
        content: "5";
        font-family: Arial;
    }

    .progressBar #stepLast::before {
        content: "6";
        font-family: Arial;
    }

    .progressBar #stepLast::after {
        width: 0;
    }

    .form-group {
        display: none;
    }

    .form-group.form-active {
        display: block;
        margin: 30px 0;
    }

    .form-group-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding-bottom: 10px;
    }

    .form-title {
        color: #673ab7;
        text-align: center;
        font-size: 28px;
        margin: 20px 0;
    }

    .error-message {
        color: red;
        font-size: 15px;
    }

    .hidden {
        display: none;
    }

    @@media (min-width: 1440px) {
        .progressBar li::after {
            left: 100px;
        }
    }
/* 
    .gauge {
        position: relative;
        border-radius: 50%/100% 100% 0 0;
        background-color: var(--color, #a22);
        overflow: hidden;
    }

    .gauge:before {
        content: "";
        display: block;
        padding-top: 50%; 
        // ratio of 2:1
    }

    .gauge .chart {
        overflow: hidden;
    }

    .gauge .mask {
        position: absolute;
        left: 20%;
        right: 20%;
        bottom: 0;
        top: 40%;
        background-color: #fff;
        border-radius: 50%/100% 100% 0 0;
    }

    .gauge .percentage {
        position: absolute;
        top: -1px;
        left: -1px;
        bottom: 0;
        right: -1px;
        background-color: var(--background, #aaa);
        transform: rotate(var(--rotation));
        transform-origin: bottom center;
        transition-duration: 600;
    }

    .gauge:hover {
        --rotation: 100deg;
    }

    .gauge .value {
        position: absolute;
        bottom: 0%;
        left: 0;
        width: 100%;
        text-align: center;
    }

    .gauge .min {
        position: absolute;
        bottom: 0;
        left: 5%;
    }

    .gauge .max {
        position: absolute;
        bottom: 0;
        right: 5%;
    }

    .gauge-container {
      width: 150px;
      height: 80px;
      display: block;
      float: left;
      padding: 10px;
      background-color: #222;
      margin: 7px;
      border-radius: 3px;
      position: relative;
    }
    .gauge-container > .label {
      position: absolute;
      right: 0;
      top: 0;
      display: inline-block;
      background: rgba(0, 0, 0, 0.5);
      font-family: monospace;
      font-size: 0.8em;
      padding: 5px 10px;
    }

    .wrapper {
      height: 100px;
      float: left;
      margin: 7px;
      overflow: hidden;
    }
    .wrapper > .gauge-container {
      margin: 0;
    } */

    /* .text-bg-light {
        background-color: grey !important;
    } */

    .gauge-container {
      width: 160px;
      height: 120px;
      display: block;
      float: left;
      padding: 10px;
      /* margin: 7px; */
      border-radius: 3px;
      position: relative;
    }

    .svg-gauge {
      &__container {
        position: relative;
        height: 150px;
      }
      &__paths {
        /* margin: 20px auto 10px; */
        height: 80px;
        svg {
          fill: none;
        }
        svg path {
          transition: 0.3s;
        }
      }
    }
    .svg-gauge__paths text.label {
      fill: black;
      font-family: monospace;
      font-size: 18px;
      font-weight: bold;
      pointer-events: none; 
    }
    
    path {
        fill: none;
    }
     /*
    .tabbed ul {
        margin: 0px;
        padding: 0px;
        overflow: hidden;
        float: left;
        padding-left: 48px;
        list-style-type: none;
    }

     .tabbed ul li {
        display: block;
        float: right;
        padding: 10px 24px 8px;
        background-color: #FFF;
        margin-right: 46px;
        z-index: 2;
        position: relative;
        cursor: pointer;
        color: #777;
        text-transform: uppercase;
        font: 600 13px/20px robot, 'Open Sans', Helveticam sans-serif;
        transition: all 250ms ease;
    }

    .tabbed ul li:before,
    .tabbed ul li:after {
        display: block;
        content: " ";
        position: absolute;
        top: 0;
        height: 100%;
        width: 44px;
        background-color: #FFF;
        transition: all 250ms ease;
    } 

    .tabbed ul li:before {
        right: -24px;
        transform: skew(30deg, 0deg);
        box-shadow: rgba(0, 0, 0, .1) 3px 2px 5px, inset rgba(255, 255, 255, .09) -1px 0;
    }

    .tabbed ul li:after {
        left: -24px;
        transform: skew(30deg, 0deg);
        box-shadow: rgba(0, 0, 0, .1) -3px 2px 5px, inset rgba(255, 255, 255, .09) 1px 0;
    }

    .tabbed ul li.active {
        z-index: 3;
    }

    .tabbed ul li.active,
    .tabbed ul li.active:before,
    .tabbed ul li.active:after {
        background-color: #000;
        color: #fff;
    }

    .tabbed.round ul li {
        border-radius: 8px 8px 0 0;
    }

    .tabbed.round ul li:before {
        border-radius: 0 8px 0 0;
    }

    .tabbed.round ul li:after {
        border-radius: 8px 0 0 0;
    }  */

    /* .btnTab {
        /* border: 1px solid black; 
        width: 100%;
        border-radius: 0px;
    }

    .tabContainer {
        background-color: #f2f2f2;
        padding-top: 16px;
    } */

    /* .left-body {
        padding-top: 0 !important;
    } */

    .reelDtl {
        background-color: #f2f2f2;
        padding: 10px 10px 10px 20px;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .badge-container {
        /* position: relative; */
    }

    .badge {
        /* position: absolute;
        top: 0;
        right: 0; */
        width: 80px;
        padding: 5px;
        font-size: 13px;
        font-weight: normal;
    }

    .col-md-6 {
        padding: 0px;
    }

    .col-md-7 {
        padding: 20px 20px 20px 0px;
    }
}
</style>

<div class="container-fluid">

    <div class="row">
        <div class="col-12">
            <div class="card card-outline ">
                <div class="card-header table-title">
                    <div class="card-title">
                        <h2>NEW Auto Loader Task <b></b></h2>
                    </div>
                    <div class="card-tools">
                        <button type="button" class="btn btn-danger" onclick="restartStep()">
                            NEW LOADER
                        </button>
                        <button type="button" class="btn btn-warning" onclick="restartItem()">
                            CHANGE REEL
                        </button>
                        <button type="button" class="btn btn-success" onclick="endTask()">
                            END TASK
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-md-3" style="padding-right:0px;">
                        
                         <div class="card-body" style="background: #f2f2f2; width:100%; height:100%; padding-right:0px;">
                          @*  <div class="row g-0 tabContainer">
                                <div class="col loadTab">
                                    <Button class="btn btn-dark btnTab" type="button" onclick="changeTabContent('Loader')">Loader</Button>
                                </div>
                                <div class="col">
                                    <Button class="btn btn-light btnTab" type="button" onclick="changeTabContent('Reel')">Reel</Button>
                                </div>
                            </div> *@

                            <div class="container containerDtlHistory" style="min-height:100px;" id="loaderTabContent">
                                <div class="row">
                                    <div class="col-12">
                                        <p class="text-center"><strong>- Loader  <span id="loaderName"></span> - </strong></p>
                                        <br />
                                         <div class="progress-group">
                                            <i class="" style="color: red;" id="icon-c1"></i>
                                            Column 1
                                            <div class="float-end" style="display: flex; flex-direction: column; align-items: flex-end; margin-bottom: 5px;">
                                                <span style="font-size: 14px; line-height: 1.2;">
                                                    <b id="percent-c1">0%</b>
                                                </span>
                                                <span style="font-size: 10px; color: gray; line-height: 1.2;">
                                                    <b id="balance-c1">10</b> left /<span id="colHeight-c1">10</span> mm
                                                </span>
                                            </div>
                                            <div class="progress progress-sm" style="width: 100%;">
                                                <div class="progress-bar bg-success" id="c1" role="progressbar" style="width: 0%"></div>
                                            </div>
                                        </div>
                                        <div class="progress-group mt-3">
                                            <i class="" style="color: red;" id="icon-c2"></i>
                                            Column 2
                                            <div class="float-end" style="display: flex; flex-direction: column; align-items: flex-end; margin-bottom: 5px;">
                                                <span style="font-size: 14px; line-height: 1.2;">
                                                    <b id="percent-c2">0%</b>
                                                </span>
                                                <span style="font-size: 10px; color: gray; line-height: 1.2;">
                                                    <b id="balance-c2">10</b> left /<span id="colHeight-c2">10</span> mm
                                                </span>
                                            </div>
                                            <div class="progress progress-sm" style="width: 100%;">
                                                <div class="progress-bar bg-success" id="c2" role="progressbar" style="width: 0%"></div>
                                            </div>
                                        </div>
                                        <div class="progress-group mt-3">
                                            <i class="" style="color: red;" id="icon-c3"></i>
                                            Column 3
                                            <div class="float-end" style="display: flex; flex-direction: column; align-items: flex-end; margin-bottom: 5px;">
                                                <span style="font-size: 14px; line-height: 1.2;">
                                                    <b id="percent-c3">0%</b>
                                                </span>
                                                <span style="font-size: 10px; color: gray; line-height: 1.2;">
                                                    <b id="balance-c3">10</b> left /<span id="colHeight-c3">10</span> mm
                                                </span>
                                            </div>
                                            <div class="progress progress-sm" style="width: 100%;">
                                                <div class="progress-bar bg-success" id="c3" role="progressbar" style="width: 0%"></div>
                                            </div>
                                        </div>
                                        <div class="progress-group mt-3">
                                            <i class="" style="color: red;" id="icon-c4"></i>
                                            Column 4
                                            <div class="float-end" style="display: flex; flex-direction: column; align-items: flex-end; margin-bottom: 5px;">
                                                <span style="font-size: 14px; line-height: 1.2;">
                                                    <b id="percent-c4">0%</b>
                                                </span>
                                                <span style="font-size: 10px; color: gray; line-height: 1.2;">
                                                    <b id="balance-c4">10</b> left /<span id="colHeight-c4">10</span> mm
                                                </span>
                                            </div>
                                            <div class="progress progress-sm" style="width: 100%;">
                                                <div class="progress-bar bg-success" id="c4" role="progressbar" style="width: 0%"></div>
                                            </div>
                                        </div>
                                        <hr />
                                        <div>
                                            <div style="width: 100%; display: flex; justify-content: center;" class="batteryContainer">
                                            @* <div class="gauge" style="width: 200px; --rotation:180deg; --color:#5cb85c; --background:#e9ecef;">
                                                <div class="percentage"></div>
                                                <div class="mask"></div>
                                                <span class="value"><span style="font-size:12px;">Battery : </span>100%</span>
                                            </div>*@
                                                <div class="svg-gauge svg-gauge__container gauge-container">
                                                  <div class="svg-gauge__paths">
                                                    <svg width="160" height="100" xmlns="http://www.w3.org/2000/svg">
                                                      <path d="M 10 80 A 65 65 0 1 1 140 80" stroke="#d3d3d3" stroke-width="13" stroke-linecap="round"/>
                                                      <g id="svg-graph-meter-value"></g>
                                                      <text x="48%" y="60%" text-anchor="middle" dy="0.3em" style="font-size: 12px;" >Battery</text>
                                                      <text x="48%" y="80%" text-anchor="middle" dy="0.3em" class="label" id="svg-gauge-percentage-2">90 %</text>
                                                    </svg>
                                                  </div>
                                                </div>
                                            </div>
                                            <span id="batteryErr" class="error-message d-flex justify-content-center align-items-center" style="font-size: 12px;"></span>
                                        </div>
                                        
                                    </div>
                                    @* <div class="col-12">
                                        <p>Auto Loader ID : </p>
                                        <input class="form-control" type="text" id="txtHLoader" disabled> 
                                        <p>Column : </p>
                                        <input class="form-control" type="text" id="txtHCol" disabled>
                                        <p>Balance Height : </p>
                                        <input class="form-control" type="text" id="txtHColBal" disabled>
                                    </div>*@
                                </div>
                            </div>
                            @* <br /> *@
                           @*  <div class="container containerDtlHistory hidden" style="min-height:100px;" id="reelTabContent">
                                <div class="badge-container" style="height: 30px;">
                                    <span class="badge rounded-pill bg-danger" id="badgeTitle">N/A</span>
                                </div>
                                <p>Reel ID</p>
                                <div class="reelDtl" id="txtHReelID">A</div>
                                <p>Item</p>
                                <div class="reelDtl" id="txtHItem">2</div>
                                <p>Ext. Height</p>
                                <div class="reelDtl" id="txtHExtH">3</div>
                                <p>Act. Height </p>
                                <div class="reelDtl" id="txtHActH">2</div>
                                @* <input class="form-control" type="text" id="txtHReelID" disabled> *@
                                @* <input class="form-control" type="text" id="txtHItem" disabled> *@
                                @* <input class="form-control" type="text" id="txtHExtH" disabled> *@
                                @* <input class="form-control" type="text" id="txtHActH" disabled> *@
                            @* </div> *@
                        </div>
                    </div>
                    <div class="col-sm-12 col-md-6" style="padding-left:0px;">
                        <div class="card-body" style="background: #f2f2f2; height:100%;">
                            <div class="container containerDtl">
                                <ul class="progressBar">
                                    <li class="active" id="step1">Loader</li>
                                    <li id="step2">Column</li>
                                    <li id="step3">Reel</li>
                                    <li id="step4">Pre-Load</li>
                                    <li id="step5">Put</li>
                                    <li id="stepLast">Finalize</li>
                                </ul>
                                <div class="form-group" id="sec1">
                                    <div class="row">
                                        <h2 class="form-title">Step 1 :: Scan Loader </h2>
                                        <div class=" " id="pnl1_body">
                                            <div class="row">
                                                <div class="col-sm-5 col-md-5" style="text-align: center;">
                                                    <img src="~/assets/img/barcode.gif" style="width:80%;" />
                                                </div>
                                                <div class="col-sm-7 col-md-7">
                                                    <div class="input-group">
                                                        <input class="form-control" type="text" placeholder="Scan or Insert Loader ID ... " id="txtScanLoader">
                                                        <span class="input-group-text" onclick="clearLoaderScanCode()">X</span>
                                                    </div>
                                                    <br />
                                                    <p id="pLoader1">Loader : <span id="loadStatus1"></span>
                                                        <span class="error-message" id="err1"></span>
                                                    </p>
                                                    <button class="btn btn-success" id="btnNext1" style="width:100%;" onclick="step1()" > Next </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" id="sec2">
                                    <div class="row">
                                        <h2 class="form-title">Step 2 :: Check Column </h2>
                                        <div class=" " id="pnl2_body">
                                            <div class="row">
                                                <div class="col-sm-5 col-md-5" style="text-align: center;">
                                                    <img src="~/assets/img/loading.gif" style="width:80%;" />
                                                </div>
                                                <div class="col-sm-7 col-md-7">
                                                    <p>Auto Loader : <span id="startStatus"></span></p>
                                                    <p id="pCol2">Available Column : <span id="colStatus2"></span>
                                                        <span class="error-message" id="errCol2"></span>
                                                    </p>

                                                    <p id="pFork2">Fork Status : <span id="forkStatus2"></span>
                                                        <span class="error-message" id="errFork2"></span>
                                                    </p>
                                                    <button class="btn btn-warning hidden" id="btnRetry2" style="width:100%;" onclick="retry2('col')">Retry Column Checking</button>
                                                    <button class="btn btn-warning hidden" id="btnRetry2-1" style="width:100%;" onclick="retry2('start')">Retry Load Process</button>
                                                    <button class="btn btn-success hidden" id="btnNext2" style="width:100%;" onclick="step2()"> Next </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" id="sec3">
                                    <div class="row">
                                        <h2 class="form-title">Step 3 :: Scan Reel ID </h2>
                                        <div class=" " id="pnl3_body">
                                            <div class="row">
                                                <div class="col-sm-5 col-md-5" style="text-align: center;">
                                                    <img src="~/assets/img/qr-code (1).gif" style="width:80%;" />
                                                </div>
                                                <div class="col-sm-7 col-md-7">
                                                    <div class="input-group">
                                                        <input class="form-control" type="text" placeholder="Scan or Insert Reel ID ... " id="txtScanItem">
                                                        <span class="input-group-text" onclick="clearItemScanCode()">X</span>
                                                    </div>
                                                    <br />
                                                    <p id="pItem3"> Item : <span id="itemStatus"></span>
                                                        <span class="error-message" id="errItem3"></span>
                                                    </p>
                                                    <p id="pReel3">
                                                        Reel ID : <span id="reelIdentity"></span>
                                                    </p>
                                                    <p id="pHeight3">
                                                        Est. Height : <span id="reelHeight"></span>
                                                    </p>
                                                    <button class="btn btn-warning hidden" style="width:100%;" onclick="retry3()" id="btnRetry3"> Retry Scan Reel ID </button>
                                                    <button class="btn btn-success hidden" style="width:100%;" onclick="step3()" id="btnNext3"> Next </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" id="sec4">
                                    <div classs="row">
                                        <h2 class="form-title">Step 4 :: Pre-Load Confirmation </h2>
                                        <div id="pnl5_body">
                                            <div class="row">
                                                <div class="col-sm-5 col-md-5" style="text-align: center;">
                                                    <img src="~/assets/img/pre-load.gif" style="width:80%;" />
                                                </div>
                                                <div class="col-sm-7 col-md-7">
                                                    <p>Load Reel Process: <span id="loadProcess4" class="error-message"></span></p>
                                                    <p>Auto Loader Status: <span id="loadConfirm4"></span></p>

                                                    <span class="error-message" id="startErr" class="d-flex justify-content-center hidden mb-2"> </span>
                                                    <button class="btn btn-warning hidden" onclick="loadPLC(4)" id="btnRetryStart" style="width:100%;">Retry Start to Load Reel</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" id="sec5">
                                    <div class="row">
                                        <h2 class="form-title">Step 5 :: Check Actual Height </h2>
                                        <div class=" " id="pnl4_body">
                                            <div class="row">
                                                <div class="col-sm-5 col-md-5" style="text-align: center;">
                                                    <img src="~/assets/img/3d-scanning.gif" style="width:80%;" />
                                                </div>
                                                <div class="col-sm-7 col-md-7">
                                                    <p id="pLoader4"> Auto Loader Column : <span id="loadCol4"></span>
                                                        <span class="error-message" id="errCol4"> </span>
                                                    </p>
                                                    <p id="pHeight4">
                                                        Actual Height : <span id="heightStatus4"></span>
                                                    </p>

                                                    <div class="mb-2">
                                                        <i class="bi bi-exclamation-triangle-fill hidden" style="color: red;" id="exclamIcon"></i> 
                                                        <span id="errActHeight" class="error-message mb-2"></span>
                                                    </div>
                                                    <button class="btn btn-warning hidden" onclick="loadPLC(5)" id="btnRetry4" style="width:100%;">Retry Reel Height Measurement</button>
                                                    <button class="btn btn-success hidden"  onclick="loadPLC(6)" id="btnNext4" style="width:100%;"> Next </button>
                                                    <button class="btn btn-warning hidden" onclick="warnBeforeTurnCol(5)" id="btnRetryTurn" style="width:100%">Turn to Next Column</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" id="secLast">
                                    <div class="row form-group-row">
                                        <h2 class="form-title">Step 6 :: Finalizing </h2>
                                        <div class=" " id="pnlLast_body">
                                            <div class="row">
                                                <div class="col-sm-5 col-md-5" style="text-align: center;">
                                                    <img src="~/assets/img/padlock.gif" style="width:80%;" />
                                                </div>
                                                <div class="col-sm-7 col-md-7">
                                                    <p style="text-align:center;" id="pTextLast">Waiting finish loading reel ...</p>

                                                    <button class="btn btn-warning" onclick="loadPLC(6)" id="btnRetryLast" style="width:100%;">Retry Save</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <input type="hidden" id="txtLoaderId">
                            <input type="hidden" id="txtLoaderCode">
                            <input type="hidden" id="txtEstHeight">
                            <input type="hidden" id="txtActHeight">
                            <input type="hidden" id="txtReelCode">
                            <input type="hidden" id="txtICol">
                            <div id="dataDiv" data-dec-height=""></div>
                        </div>
                    </div>
                    <div class="col-sm-12 col-md-3" style="padding-left:0px;">
                        <div class="card-body" style="background: #f2f2f2; width:100%; height:100%;padding-right:20px; padding-left:0px;">
                            <div class="container containerDtlHistory" style="min-height:100px;">
                                <div class="row" style="margin-bottom: 10px;">
                                    <div class="col-sm-6" style="display: flex; flex-direction: column; justify-content: flex-end;">
                                        <div class="badge-container" style="height: 30px;">
                                            <span class="badge rounded-pill bg-danger" id="badgeTitle">N/A</span>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <img src="~/assets/img/reel.gif" style="width: 100%;"/>
                                    </div>
                                </div>
                                <p>Reel ID</p>
                                <div class="reelDtl" id="txtHReelID">-</div>
                                <p>Item</p>
                                <div class="reelDtl" id="txtHItem">-</div>
                                <p>Est. Height</p>
                                <div class="reelDtl" id="txtHExtH">-</div>
                                <p>Act. Height </p>
                                <div class="reelDtl" id="txtHActH">-</div>
                            </div>
                        </div>
                    </div> 
                </div>
            </div>
        </div>
    </div>

</div>

<div class="modal fade" id="warnTurnModal" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-body" style="padding: 50px;">
                <div class="row">
                    <div class="col-6">
                        <img src="" style="width:100%;" id="turnImg" >
                    </div>
                    <div class="col-6">
                        <p id="warnText" style="font-size:2em;"></p>
                        <button class="btn btn-success" style="width: 100%; height: 150px;" id="turnBtn">Start Turn Column</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="putModal" role="dialog" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-body" style="padding: 50px;">
                <div class="row">
                    <div class="col-6">
                        <img src="~/assets/img/3d-scanning.gif" style="width:100%;" />
                    </div>
                    <div class="col-6">
                        <p class="" style="font-size:32px;">Please tap Start button before placing the reel.</p>
                        <button class="btn btn-success" style="width: 100%; height: 150px;" onclick="loadPLC(5)">Start</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <link href="~/css/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/sweetalert2.min.css">

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/datatables.min.js"></script>
    <script src="~/js/sweetalert2.all.min.js"></script>

    <script type="text/javascript">

        // -- get loader info --
        const scanLoaderEle = document.getElementById('txtScanLoader');
        scanLoaderEle.addEventListener('keyup', function(event) {
          // Check if the pressed key is "Enter" (key code 13 or key property "Enter")
          if (event.key === 'Enter') {
            $('#loadStatus1').text('');
            $('#err1').text('');
            const inputValue = this.value;
            var code = inputValue;
            $.ajax({
                url: "/Loader/GetLoaderInfo_ReadyToLoad?req=" + code,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    swal.close();
                    if (result.success == true) {
                        addLoader(0, result.data.loader_Id, result.data.loaderCode);
                    }
                    else {
                        $('#err1').text(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#err1').text(error.val);
                }
            });
          }
        });

        // -- scan reel ID --
        const scanItemEle = document.getElementById('txtScanItem');
        scanItemEle.addEventListener('keyup', function(event) {
          // Check if the pressed key is "Enter" (key code 13 or key property "Enter")
          if (event.key === 'Enter') {
            const inputValue = this.value;

            $("#txtReelCode").val(inputValue);
            $("#itemModal").modal("toggle");
            loadPLC(3);
          }
        });


        $(document).ready(function () {
            resetColorPLCForm(1);
            newReel();
            loadLoaderList();

            $("#txtLoaderId").val('');
            $("#txtICol").val(1);

            // $("#txtEstHeight").val(0);
            // $("#txtActHeight").val(0);
            // $("#txtReelCode").val('');

            scanLoaderEle.focus();

            // var data=[{
            //   type: "indicator",
            //   mode: "gauge+number+delta",
            //   value: 60,
            //   title: {
            //     text: 'Speed',
            //     font: { size: 14 },
            //     yanchor: 'bottom',
            //     y: 10
            //   },
            //   delta: { increasing: { color: "white" } },
            //   gauge: {
            //     shape: 'angular',
            //     axis: {
            //       range: [0, 100],
            //       visible: true,
            //       tickwidth: 1,
            //       tickcolor: "rgb(178, 178, 178)",
            //       tickvals: [0, 100],
            //       tickmode: 'array',
            //       tickfont: {
            //         size: '100px'
            //       }
            //     },
            //     bar: { color: "rgb(237, 61, 61)", thickness: 1 },
            //     bgcolor: "rgb(178, 178, 178)",
            //     bordercolor: "rgb(178, 178, 178)",
            //   }
            // }];

            // var layout = {
            //   margin: {
            //     l: 30,
            //     r: 30,
            //     b: 5,
            //     t: 0,
            //     pad: 0
            //   }
            // };

            initialGaugeSetup(
                "svg-graph-meter-value",
                "svg-gauge-percentage-2",
                "rgb(228, 0, 0)",
                0,
                setGaugePathValue
            );
            // Plotly.newPlot('myDiv', data, layout);
        });

        function clearLoaderScanCode() {
            scanLoaderEle.focus();
            // $("#txtHLoader").val('');
            // $("#txtHCol").val('');
            // $("#txtHColBal").val('');

            const inputFields = ['#txtScanLoader', '#txtLoaderId', '#txtLoaderCode'];
            inputFields.forEach(i => $(i).val(''));
        }

        function clearItemScanCode() {
            scanItemEle.focus();
            const fields = ['#txtScanItem', '#txtReelCode', '#txtHReelID', '#txtHItem', '#txtHExtH', '#txtHActH'];
            fields.forEach(i => $(i).val(''));
        }

        function restartStep() {
            resetColorPLCForm(1);
            newReel();
            // $("#txtHLoader").val('');
            // $("#txtHCol").val('');
            // $("#txtHColBal").val('');
            $('#loadStatus1').text('');
            $("#txtScanLoader").val('');
            $("#txtICol").val(1);

            scanLoaderEle.focus();
            // $("#txtEstHeight").val(0);
            // $("#txtActHeight").val(0);

            const fields = ['#txtLoaderId', '#txtLoaderCode', '#txtScanLoader', '#loaderName'];
            fields.forEach(i => $(i).val(''));
            // $('#loaderName').text('');

            initialGaugeSetup(
                "svg-graph-meter-value",
                "svg-gauge-percentage-2",
                "rgb(228, 0, 0)",
                0,
                setGaugePathValue
            );

            for (let i = 1; i <= 4; i++)
            {
                if ($(`#icon-c${i}`).hasClass("bi bi-fire"))
                {
                    $(`#icon-c${i}`).removeClass("bi bi-fire");
                    $('#c' + i).removeClass("progress-bar-striped progress-bar-animated bg-warning");
                    $('#c' + i).addClass("bg-success");
                }

                $(`#percent-c${i}`).text("0%");
                $(`#balance-c${i}`).text("10");
                $(`#colHeight-c${i}`).text("10");
                $(`#c${i}`).css('width', '0%');
            }
        }

        function restartItem() {
            var loaderId = $("#txtLoaderId").val();
            if (loaderId == "") {
                restartStep();
                return;
            }

            resetColorPLCForm(3);
            newReel();
            scanLoaderEle.focus();
        }

        function newReel() {
            $('#pt2').html("STEP 2 :: Waiting Scan Reel ... ");
            $('#pt3').html("STEP 3 :: Checking column available ... ");
            $('#pt4').html("STEP 4 :: Reading Reel Info ... ");
            $('#pTextLast').text("STEP 5 :: Keep Record and Finalyzing ... ");
            // $('#pTextLast').text("Waiting finish loading reel ... ");

            const inputs = [
                { id: "#txtScanItem", value: '' },
                { id: "#txtEstHeight", value: 0 },
                { id: "#txtActHeight", value: 0 },
                { id: "#txtReelCode", value: '' },
            ];
            inputs.forEach(input => {
                $(input.id).val(input.value);
            });
            //#loadProcess4
            $('#reelIdentity, #reelHeight, #itemStatus, #heightStatus4, #loadConfirm4, #loadCol4').text('');
            $('#txtHReelID, #txtHItem, #txtHExtH, #txtHActH').text('-');
            $('#exclamIcon').addClass('hidden');
            $("#waiting2, #waiting3, #waiting4, #waitingLast").removeClass("hidden");
            $('#badgeTitle').text('N/A');
            $('#badgeTitle').addClass('bg-danger');
        }

        function resetColorPLCForm(idx) {
            const sections = ['sec1', 'sec2', 'sec3', 'sec4', 'sec5', 'secLast'];
            const steps = ['step1', 'step2', 'step3', 'step4', 'step5', 'stepLast'];

            sections.forEach(id => $('#' + id).removeClass("form-active"));
            steps.forEach(id => $('#' + id).removeClass("next active"));

            if (idx >= 1 && idx <= 5) {
                $('#' + sections[idx - 1]).addClass('form-active');
                
                for (let i = 0; i < idx; i++) {
                    $('#' + steps[i]).addClass('active');
                }

                for (let i = 0; i < idx - 1; i++) {
                    $('#' + steps[i]).addClass('next');
                }
            } else if (idx == 0) {
                return;
            } else {
                $('#' + sections[5]).addClass('form-active');
                for (let i = 0; i < 5; i++) {
                    $('#' + steps[i]).addClass('next active');
                }
                $('#' + steps[5]).addClass('active');
            }
            //, #btnRetryTurn, #btnRetryStart
            $('#btnNext2, #btnNext3, #btnNext4, #btnRetryLast, #exclamIcon, #btnRetry4').addClass('hidden');
            $('#err1, #errCol2, #errFork2, #errItem3, #errCol4, #startErr, #errActHeight, #colStatus2, #forkStatus2').text("");
        }

        function loadLoaderList() {
            $.ajax({
                url: "/Loader/GetLoaderList_ReadyToLoad/",
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading();
                },
                success: function (result) {
                    swal.close();
                    if (result.success == true) {

                        // // Get the select element
                        // const selLoader = document.getElementById('selLoader');
                        // for (const opt of result.data)
                        // {
                        //     const el = document.createElement("option");
                        //     el.textContent = opt.loaderCode;
                        //     el.value = opt.loader_Id;
                        //     selLoader.appendChild(el);
                        // }

                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function addLoader(_type, id, code) {
            if (_type == 1) {
                const selLoader = document.getElementById('selLoader');
                const idx = selLoader.selectedIndex;
                const selectedOption = selLoader.options[idx];
                id = selectedOption.value;
                code = selectedOption.text;

                $.ajax({
                    url: "/Loader/GetLoaderInfo_ReadyToLoad?req=" + code,
                    type: "GET",
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        Swal.fire({
                            text: 'Please Wait',
                            width: '300px',

                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            showConfirmButton: false,
                        });
                        Swal.showLoading()
                    },
                    success: function (result) {
                        swal.close();
                        if (result.success == true) {
                        }
                        else {
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: result.errMessage
                            });
                            return;
                        }
                    },
                    error: function (error) {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                        return;
                    }
                });

            }

            // continue
            $("#txtLoaderId").val(id);
            $("#txtLoaderCode").val(code);
            loadPLC(1);

            $("#txtHLoader").val(code);
        }

        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        function step1() {
            var loaderId = $("#txtLoaderId").val();
            if (loaderId == "") {
                $('#loadStatus1').text('');
                $('#err1').text('Must select Auto Loader');
                return;
            }

            var loaderCode = $("#txtLoaderCode").val();
            var scanCode = $("#txtScanLoader").val();
            if (loaderCode.toUpperCase() != scanCode.toUpperCase()) {
                $('#loadStatus1').text('');
                $('#err1').text('Please rescan the Loader');
                return;
            }

            if ($('#err1').text() == '')
            {
                startBatteryMonitoring(loaderId);
                getLoaderColumn(loaderId);  //get loader column usage and show status 
                retry2();
            }
        }

        function retry2(type) {
            $('#btnRetry2').addClass('hidden');
            $('#btnRetry2-1').addClass('hidden');
            $('#errFork2').text('');
            $('#errCol2').text('');

            if (type != 'col') {
                $('#startStatus').text('');
                startLoad();
            }
            else 
            {
                loadPLC(2);
            }
            setTimeout(3000);
        }

        function step2() {
            resetColorPLCForm(3);

            // $('#itemStatus').text('');
            // $('#reelIdentity').text('');
            // $('#reelHeight').text('');

            // $("#txtEstHeight").val(0);
            // $("#txtActHeight").val(0);
            // const fields = ['#txtReelCode', '#txtHReelID', '#txtHItem', '#txtHExtH', '#txtHActH'];
            // fields.forEach(i => $(i).val(''));
            // $('#btnNext2').addClass('hidden');
        }

        function retry3() {
            $('#errItem3').text('');

            var reelCode = $("#txtReelCode").val();
            var scanCode = $("#txtScanItem").val();
            if (reelCode.toUpperCase() != scanCode.toUpperCase() || (reelCode == "" || scanCode == "")) {
                $('#errItem3').text('Please scan Reel');
                return;
            }

            setTimeout(3000);
            loadPLC(3);
        }

        function step3() {
            if ($('#txtScanItem').val() != $('#txtReelCode').val()) {
                $('#itemStatus, #reelHeight, #reelIdentity').text('');
                $('#errItem3').text('Please rescan the Reel');
                $('#btnNext3').addClass("hidden");
                return;
            }
            resetColorPLCForm(4);
            loadPLC(4);
        }

        async function step5() {
            if ($('#warnTurnModal').hasClass("show")) {
                $('#warnTurnModal').modal("toggle");
            }
            //end column before turn
            $('#btnRetryTurn').addClass('hidden');
            $('#exclamIcon').addClass('hidden');
            $('#errActHeight').text('');

            var chkColTurn = await loadPLCCheckColTurn($("#txtLoaderId").val());
            if (chkColTurn == false) {
                //if not column not ready to turn
                $('#exclamIcon').removeClass("hidden");
                $('#errActHeight').text('Failed to Turn Column.');
                $('#btnRetryTurn').removeClass('hidden');
                $('#btnRetryTurn').text('Retry on Turn Column');
            }
            else{
                turnCol(5);
            }
        }

        function warnBeforeTurnCol(action) {
            let warnText = document.getElementById('warnText');
            let turnBtn = document.getElementById('turnBtn');

            console.log("action no", action);

            if (action == 2) {
                warnText.textContent = "Please make sure hands off and tap Start Turn Column button.";
                turnBtn.onclick = async function() {
                    var chkColTurn = await loadPLCCheckColTurn($("#txtLoaderId").val());
                    console.log("after get turn status", chkColTurn);

                    if (chkColTurn == false) {
                        console.log("here is it?");
                        if ($('#warnTurnModal').hasClass("show")) {
                            $('#warnTurnModal').modal("toggle");
                        }
                        $('#colStatus2').text('');
                        $('#errCol2').text('Failed to Turn Column').css('color', 'red');
                        $('#btnRetry2').removeClass('hidden');
                        $('#btnRetry2').text('Retry on Turn Column');
                    } else {
                        console.log("wait");
                        turnCol(2);
                    }
                };
                $('#turnImg').attr('src', '/assets/img/a-b.gif');
            } else {
                warnText.textContent = "Please take out the Reel and only tap Start Turn Column button.";
                turnBtn.onclick = function() {
                    step5();
                };
                $('#turnImg').attr('src', '/assets/img/take-out-reel.gif');
            }

            $('#warnTurnModal').modal("show");
        }

        async function startLoad() {
            var loaderId = $("#txtLoaderId").val();
            var callStart = await loadPLCStartLoad(loaderId);
            resetColorPLCForm(2);

            if (callStart == true) {
                loadPLC(2);
            }
        }

        async function turnCol(index) {
            if ($("#warnTurnModal").hasClass("show")) {
                $("#warnTurnModal").modal("toggle");
            }
            var loaderId = $("#txtLoaderId").val();
            var iCol = $("#txtICol").val();
            var realCol = await loadPLCGetCurrentColumn(loaderId);
            if (Number(realCol) == 0) {
                if (index == 2) {
                    $('#btnRetry2').removeClass("hidden");
                }
                else {
                    $('#btnRetry4').removeClass("hidden");
                }
            }
            else {
                if (realCol < iCol) {
                    var turnCol = await loadPLCTurnColumn(loaderId, Number(iCol));
                    if (turnCol == false) {
                        if (index == 2) {
                            $('#colStatus2').text('');
                            $('#btnRetry2').removeClass('hidden');
                            $('#errCol2').text('Failed to Turn Column').css('color', 'red');
                        }
                        else {
                            $('#errActHeight').text('Failed to Turn Column').css('color', red);
                            $('#btnRetry4').removeClass('hidden');
                        }
                        return;
                    }
                    else 
                    {
                        $('#loadProcess4').addClass("error-message"); 
                        $('#loadProcess4').text('');
                    }
                    realCol = iCol; // (realCol) + 1;
                }
                const oldCol = iCol-1;
                $('#c' + (oldCol)).addClass("bg-success");
                $('#c' + (oldCol)).removeClass("progress-bar-striped progress-bar-animated bg-warning");
                $(`#icon-c${oldCol}`).removeClass("bi bi-fire");

                $('#c' + iCol).addClass("progress-bar-striped progress-bar-animated bg-warning");
                $(`#icon-c${iCol}`).addClass("bi bi-fire");

                // wait for fork is ready
                // await delay(3000);
                var chkColFork = await loadPLCCheckColFork(loaderId, iCol);
                if (chkColFork == false) {
                    if (index == 2) {
                        $('#btnRetry2').removeClass("hidden");
                        $('#errFork2').text('Fork Not Ready.').css('color', 'red');
                    } 
                    else {
                    }
                }
                else {
                    if (index == 2) {
                        $('#btnNext2').removeClass("hidden");
                        $('#btnRetry2').addClass("hidden");
                    } 
                    else {
                        $('#btnRetryTurn').addClass("hidden");
                        $('#exclamIcon').removeClass("bi-exclamation-triangle-fill");
                        $('#exclamIcon').addClass("bi-info-circle-fill");
                        $('#exclamIcon').css('color', 'green');
                        $('#exclamIcon').removeClass("hidden");

                        $('#errActHeight').text("Column turned successfully. Please try again on reel height measurement.").css('color', 'green');
                        $('#loadCol4').text(iCol);
                        $('#btnRetry4').removeClass("hidden");
                        //back to pre-load stage
                        // resetColorPLCForm(4);
                    }
                }
            }
        }

        async function loadPLC(idx) {

            var loaderId = $("#txtLoaderId").val();

            // step 1 : check loader
            if (idx == 1) {
                resetColorPLCForm(1);
                if (loaderId == "") {
                    $('#err1').text("No loader is selected.");
                    return;
                }

                // await delay(3000);
                var chkLoader = await loadPLCCheckLoader(loaderId);
                console.log('R1::' + chkLoader);
                return;
            }

            var reelCode = $("#txtReelCode").val();
            var iCol = $("#txtICol").val();

            if (idx == 2) {
                // resetColorPLCForm(2);
                $('#startStatus').css('color', 'black');
                $('#colStatus2').text('Checking on Column ' + iCol);

                await delay(3000);

                let attempt = 1;
                let maxAttempts = 4;
                let chkCol = false;

                while (chkCol === false && iCol <= maxAttempts) {
                    chkCol = await loadPLCCheckEstHeight(loaderId, reelCode, iCol);
                    console.log(`R3.${attempt}::` + chkCol);

                    if (chkCol == false) {
                        iCol = Number(iCol) + 1;
                        // $('#pCol3').html("Checking Auto Loader Column: " + iCol);
                        $('#colStatus2').text('Checking on Column ' + iCol);

                        await delay(1000);
                    }
                    attempt;
                }

                console.log('R3.10::' + iCol);

                if (chkCol == false) {
                    $('#btnRetry2').removeClass('hidden');
                } else {
                    $("#txtICol").val(iCol);
                    $("#txtHCol").val(iCol);

                    // check is column correct, else need call turn
                    // await delay(3000);
                    var realCol = await loadPLCGetCurrentColumn(loaderId);

                    if (realCol == 0) {
                        $('#btnRetry2').removeClass('hidden');
                        if (realCol !== false)
                        {
                            $('#colStatus2').text('');
                            $('#errCol2').text('Invalid Column Number');
                        }
                    }
                    else {
                        if (realCol < iCol) {
                            // $('#warnTurnModal').modal('toggle');
                            warnBeforeTurnCol(2);
                        }
                        else {
                            
                            var chkColFork = await loadPLCCheckColFork(loaderId, iCol);
                            if (chkColFork == false) {
                                $('#btnRetry2').removeClass('hidden');
                                $('#errFork2').text('Failed to retrieve fork status').css('color', 'red');
                            }
                            else {
                                // if success then only show next button
                                $('#btnNext2').removeClass('hidden');
                                $('#btnRetry2').addClass('hidden');
                                const oldCol = iCol-1;
                                $('#c' + (oldCol)).addClass("bg-success");
                                $('#c' + (oldCol)).removeClass("progress-bar-striped progress-bar-animated bg-warning");
                                $(`#icon-c${oldCol}`).removeClass("bi bi-fire");

                                $('#c' + iCol).addClass("progress-bar-striped progress-bar-animated bg-warning");
                                $(`#icon-c${iCol}`).addClass("bi bi-fire");
                            }
                        }
                    }
                }
                return;
                // await delay(3000);
            }

            if (idx == 3) {
                if (reelCode == "") {
                    $('#errItem3').text('Please scan Reel.');
                    return;
                }
                // await delay(3000);
                var chkItem = await loadPLCCheckItem(loaderId, reelCode);
                console.log('R2::' + chkItem);
                if (chkItem == false) {
                    $('#btnNext3').addClass('hidden');
                    $('#itemStatus, #reelIdentity, #reelHeight').text('');
                } else {
                    $('#btnNext3').removeClass('hidden');
                    $('#errItem3').text('');
                }
                return;
            }

            // ID = 4
            iCol = $("#txtICol").val();
            if (idx == 4) {
                $('#btnRetryStart').addClass('hidden');
                var loaderId = $("#txtLoaderId").val();
                var callStart;

                if ($('#loadProcess4').hasClass("error-message")) {
                     callStart = await loadPLCStartPutReel(loaderId);
                }
                else {
                    callStart = true;
                }

                if (callStart == true) {
                    var chkColFork = await loadPLCCheckColFork(loaderId, iCol);
                    if (chkColFork == false) {
                        $('#btnRetryStart').removeClass('hidden');
                        $('#btnRetryStart').text('Retry on Checking Status');
                        $('#loadConfirm4').addClass("error-message");
                        $('#loadConfirm4').text('Not ready to load.').css('color', '');

                    }
                    else {
                        $('#loadConfirm4').text('Ready to Load Reel.').css('color', 'black');
                        $('#btnRetryStart').addClass("hidden");
                        $("#putModal").modal("show");
                        // loadPLC(5);
                    }
                }
                return; 
            }

            if (idx == 5) {
                if (loaderId == "" || reelCode == "") {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: "Please start from Step 1."
                    });
                    return;
                }
                
                resetColorPLCForm(5);
                if ($('#putModal').hasClass('show')) {
                    $('#putModal').modal('toggle');
                }
                
                await delay(3000);
                var chkAct = await loadPLCActHeight(loaderId, reelCode, iCol);
                console.log('R4::' + chkAct);
                
                if (chkAct == "99") {
                    // is success
                    $('#btnNext4').removeClass("hidden");
                    $('#btnRetry4').addClass("hidden");
                    $('#errActHeight').text('');
                }
                return;
            }

            if (idx == 6) {
                var h = $("#txtActHeight").val();
                if (loaderId == "" || reelCode == "" || h =="" || h =="0") {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: "Please start from Step 1."
                    });
                    return;
                }

                $('#exclamIcon').removeClass("bi-info-circle-fill");
                $('#exclamIcon').css('color', 'red');
                $('#exclamIcon').addClass("bi-exclamation-triangle-fill");

                resetColorPLCForm(6);
                var chkLast = await loadPLCUpdateDB(loaderId, reelCode, iCol);
                console.log('R5::' + chkLast);
                if (chkLast == false) {
                    $('#pTextLast').text('Failed to update info. Please try again.').css('color', 'red');
                    $('#btnRetryLast').removeClass("hidden");

                    return;
                }
                else {
                    $('#pTextLast').text("STEP 5 :: DONE Finalized ").css('color', 'black');
                    await delay(3000);

                    resetColorPLCForm(2);
                    getLoaderColumn(loaderId);
                    retry2('col');
                    newReel();
                }
                // await delay(3000);
            }

        }

        async function loadPLCCheckLoader(loaderId) {

            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/GetLoaderId/" + loaderId,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('1::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {
                        $('#loadStatus1').text(result.data);
                        $('#loaderName').text(result.data);
                        fResult = true;
                    }
                    else {
                        $('#loadStatus1').text('');
                        $('#err1').text(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#err1').text(error.val);
                }
            });

            return fResult;
        }

        async function loadPLCCheckItem(loaderId, reelCode) {

            var fResult = false;
            // step 2 : scan item
            await $.ajax({
                url: "/api/PLCLoader/VerifyItem/" + reelCode,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('2::' + JSON.stringify(result));
                    if (result.success == true) {
                        $('#itemStatus').text(result.data.itemCode);
                        $('#reelIdentity').text(result.data.reelCode);
                        $('#reelHeight').text(result.data.thickness);

                        $("#txtEstHeight").val(result.data.thickness);
                        $('#txtHReelID').text(result.data.reelCode);
                        $('#txtHItem').text(result.data.itemCode);
                        $('#txtHExtH').text(result.data.thickness);
                        $('#badgeTitle').text("Loading");
                        $('#badgeTitle').removeClass('bg-danger');
                        $('#badgeTitle').addClass('bg-primary');
                        fResult = true;
                    }
                    else {
                        $('#errItem3').text(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#errItem3').text(error.val);
                }
            });

            return fResult;
        }

        async function loadPLCCheckEstHeight(loaderId, reelCode, iCol) {
            // step 3 : check column height balance and change column
            var thickness = $("#txtEstHeight").val();
            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/CheckColumnHeight/" + loaderId + "/" + iCol + "/" + thickness,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3::' + JSON.stringify(result));
                    if (result.success == true) {
                        $('#errCol2').text('');
                        $('#colStatus2').text(iCol);
                        $('#txtHColBal').val(result.data);
                        fResult = true;
                    }
                    else {
                        if (iCol < 4) {
                            // $('#errCol2').text(result.errMessage);
                        }
                        else {
                            $('#errCol2').text('All column is full. Please change loader.');
                        }
                    }
                },
                error: function (error) {
                    if (iCol < 4) {
                        $('#errCol2').text(error.val);
                    }
                    else {
                        $('#errCol2').text('All column is full. Please change loader.');
                    }
                }
            });

            // console.log('3::' + fResult);
            return fResult;
        }

        async function loadPLCGetCurrentColumn(loaderId) {

            var fResult = false;
            await $.ajax({
                url: "/api/PLCLoader/GetCurrentColumn/" + loaderId,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3.2::' + JSON.stringify(result));
                    if (result.success == true) {
                        // fResult = true;
                        fResult = result.data;
                    }
                    else {
                        const msg = (!result.errMessage) ? 'Failed to retrieve current column' : result.errMessage;
                        $('#colStatus2').text('');
                        $('#errCol2').text(msg);
                    }
                },
                error: function (error) {
                    $('#errCol2').text(error.val);
                }
            });

            return fResult;
        }

        // // step 3.2 : call PLC to turn
        async function loadPLCTurnColumn(loaderId, iCol) {

            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/TurnColumn/" + loaderId + "/" + iCol,
                type: "POST",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3.3::' + JSON.stringify(result));
                    if (result.success == true) {
                        fResult = true;
                    }
                    else {
                        $('#errCol2').text(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#errCol2').text(error.val);
                }
            });

            return fResult;
        }

        // // step 3.3 : check column height balance and change column
        async function loadPLCCheckColFork(loaderId, iCol) {

            var fResult = false;
            await $.ajax({
                url: "/api/PLCLoader/GetForkReady/" + loaderId + "/" + iCol,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3.3::' + JSON.stringify(result));
                    if (result.success == true) {
                        $('#forkStatus2').text('Column' + iCol + ' is READY');
                        fResult = true;
                    }
                    else {
                        $('#errFork2').text(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#errFork2').text(error.val);
                }
            });

            return fResult;
        }

        // // step 4 : get actual height balance
        async function loadPLCActHeight(loaderId, reelCode, iCol) {

            var fResult = 0;
            await $.ajax({
                url: "/api/PLCLoader/GetReelActualHeight/" + loaderId + "/" + iCol,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('4::' + JSON.stringify(result));
                    if (result.success == true) {
                        $('#errCol4').text(''); //remove err msg
                        $("#txtActHeight").val(result.data[1]);
                        $('#loadCol4').text(iCol);
                        $('#heightStatus4').text(result.data[1]);

                        $('#txtHActH').val(result.data[1]);
                        const dataAttr = document.getElementById("dataDiv");
                        dataAttr.dataset.decHeight = result.data[2];

                        fResult = 99;
                    }
                    else {
                        fResult = result.data[0];
                        if (result.data[0] == "1") { //failed to get actual height
                            $('#loadCol4').text(iCol);
                            $('#heightStatus4').text(result.data[1]);
                            $('#exclamIcon').removeClass('hidden');
                            $('#exclamIcon').removeClass("bi-info-circle-fill");
                            $('#exclamIcon').addClass("bi-exclamation-triangle-fill");
                            $('#exclamIcon').css('color', 'red');
                            $('#errActHeight').css('color', 'red');
                            $('#errActHeight').text(result.errMessage.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' '));
                            $('#btnRetry4').removeClass('hidden');
                        }
                        else {
                            if (iCol < 4) {
                                // $('#colStatus2').text((Number(iCol) + 1));
                                $('#loadCol4').text(iCol);
                                $('#heightStatus4').text(result.data[1]);
                                // $('#errCol4').text(result.errMessage);
                                $('#errActHeight').text(result.errMessage);

                                $("#txtICol").val(Number(iCol) + 1);
                                $('#txtHCol').val(Number(iCol) + 1);
                                // $("#warnTurnModal").modal("toggle");
                                $('#btnRetryTurn').removeClass('hidden');
                                $('#exclamIcon').removeClass('hidden');
                            }
                            else {
                                $('#loadCol4').text(iCol);
                                $('#errCol4').text('All column is full, please change auto loader.');
                                $('#heightStatus4').text(result.data[1]);
                            }
                        }
                    }
                },
                error: function (error) {
                    $('#loadCol4').text(iCol);
                    $('#errCol4').text(error.val);
                    $('#heightStatus4').text('');
                }
            });

            return fResult;
        }

        async function loadPLCUpdateDB(loaderId, reelCode, iCol) {
            var actHeight = $("#txtActHeight").val();
            const dataAttr = document.getElementById("dataDiv");
            // step 5 : Save data
            try {
                const rlt = await new Promise((resolve, reject) => {
                    $.ajax({
                        url: "/api/PLCLoader/UpdateReelIntoLoader/" + loaderId + "/" + iCol + "/" + reelCode + "/" + actHeight + "/" + dataAttr.dataset.decHeight,
                        type: "GET",
                        dataType: 'JSON',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {

                        },
                        success: function (result) {
                            console.log('5::' + JSON.stringify(result));
                            if (result.success == true) {
                                $('#pTextLast').text("ALL DONE. Will continue next item after 2 seconds...");

                                // update balance height
                                $('#txtHColBal').val(result.data);
                                resolve(true);
                            }
                            else {
                                $('#pTextLast').text(result.errMessage);
                                resolve(false);
                            }
                        },
                        error: function (error) {
                            $('#pTextLast').html(error.val);
                            resolve(false);
                        }
                    });
                });
                return rlt;
            }
            catch (err) {
                $('#pTextLast').text('Unexpected error occured.');
                return false;
            }
        }

        async function loadPLCStartLoad(loaderId) {
            try {
                const result = await new Promise((resolve, reject) => {
                    $.ajax({
                        url: "/api/PLCLoader/StartLoad/" + loaderId,
                        type: "POST",
                        dataType: 'JSON',
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                            if (result.success == false) {
                                $('#btnRetry2-1').removeClass('hidden');
                                $('#startStatus').text('Failed to Start Load Process').css('color', 'red');
                                resolve(false);
                            }
                            else 
                            {
                                $('#btnRetry2-1').addClass('hidden');
                                $('#startStatus').text('Load Process Started').css('font-size', '15px');
                                resolve(true);
                            }
                        },
                        error: function (error) {
                            $('#startStatus').text(error.val).css('color', 'red');
                            resolve(false);
                        }
                    });
                });
                return result;
            } catch (err) {
                // $('#startErr').removeClass('hidden');
                // $('#startErr').text('Unexpected error occurred.');
                $('#loadConfim4').text('Unexpected error occured.');
                return false;
            }
        }

        async function loadPLCStartPutReel(loaderId) {
            try {
                const result = await new Promise((resolve, reject) => {
                    $.ajax({
                        url: "/api/PLCLoader/StartReelLoadIn/" + loaderId,
                        type: "POST",
                        dataType: 'JSON',
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                            if (result.success == false) {
                                //if fail to start, retry for twice but start from third will force them to start from step1
                                if ($('#putModal').hasClass("show")) {
                                    $('#putModal').modal('toggle');
                                }
                                $('#btnRetryStart').removeClass('hidden'); 
                                $('#loadProcess4').text(`Failed to Start... ${result.errMessage.charAt(0).toUpperCase() + result.errMessage.slice(1)}`);
                                $('#loadProcess4').addClass("error-message");
                                resolve(false);
                            }
                            else 
                            {
                                $('#btnRetryStart').addClass('hidden');
                                $('#loadProcess4').text('Process Started');
                                $('#loadProcess4').removeClass("error-message");
                                resolve(true);
                            }
                        },
                        error: function (error) {
                            $('#loadProcess4').text(error.val).css('color', 'red');
                            resolve(false);
                        }
                    });
                });
                return result;
            } catch (err) {
                $('#loadProcess4').text(error.val).css('color', 'red');
                return false;
            }
        }

        async function loadPLCCheckColTurn(loaderId) {
            try {
                const result = await new Promise((resolve, reject) => {
                    $.ajax({
                        url: "/api/PLCLoader/GetReadyToTurn/" + loaderId,
                        type: "GET",
                        dataType: 'JSON',
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                            if (result.success == true) {
                                resolve(true);
                            } else {
                                if ($('#warnTurnModal').hasClass("show")) {
                                    $('#warnTurnModal').modal('toggle');
                                }

                                resolve(false);
                            }
                        },
                        error: function (error) {
                            resolve(false);
                        }
                    })
                })
                return result;
            } catch (err) {
                return false;
            }
        }

        async function endTask() {
            var loaderId = $("#txtLoaderId").val();
            if (loaderId == "") {
                swal.fire({
                    icon: 'error',
                    title: "Wait",
                    text: "No loader is selected."
                });
                return;
            }

            var chkEnd = await loadPLCEndTask(loaderId, 2);
            console.log('R10::' + chkEnd);
            if (chkEnd == true) {
                restartStep();
                //use to determine is start load reel process required again in step4
                $('#loadProcess4').addClass("error-message"); 
                return;
            }
            else 
            {
                swal.fire({
                    icon: 'error',
                    title: "Wait",
                    text: "Failed to End Task. Please try again.",
                });
                return;
            }
        }

        async function loadPLCEndTask(loaderId, action) {
            try {
                const result = await new Promise((resolve, reject) => {
                    $.ajax({
                        url: "/api/PLCLoader/EndTask/" + loaderId,
                        type: "POST",
                        dataType: 'JSON',
                        data: JSON.stringify(action),
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                            console.log('10::' + JSON.stringify(result));
                            if (result.success == true) {
                                resolve(true);
                                // swal.fire({
                                //     icon: 'success',
                                //     title: "Success End Task",
                                //     text: "",
                                // });
                            }
                            else {
                                resolve(false);
                                // swal.fire({
                                //     icon: 'error',
                                //     title: "Wait",
                                //     text: result.errMessage
                                // });
                            }
                        },
                        error: function (error) {
                            // swal.fire({
                            //     icon: 'error',
                            //     title: "Wait",
                            //     text: error.val
                            // });
                            resolve(false);
                        }
                    });
                });
                return result;
            } catch (err) {
                 $('#errActHeight').text(error.val);
                return false;
            }
        }

        function initialGaugeSetup(
            gaugeElementId,
            percentId,
            meterColor,
            initialValue,
            setGaugeValueCallback
        ) {
            const gaugeElement = document.getElementById(gaugeElementId);
            const percentageElement = document.getElementById(percentId);

            percentageElement.textContent = initialValue + " %";
            setGaugeValueCallback(gaugeElement, initialValue, meterColor);

            percentageElement.addEventListener("change", (event) =>
                percentageChangedEvent(
                    gaugeElement,
                    event.target.value,
                    meterColor,
                    setGaugeValueCallback
                )
            );
        }

        percentageChangedEvent = (
            gauge,
            newPercentage,
            color,
            setGaugeValueCallback
        ) => {
            const percentage =
            newPercentage > 100 ? 100 : newPercentage < 0 ? 0 : newPercentage;
            setGaugeValueCallback(gauge, 80, color);
        };

        function setGaugePathValue(gaugeElement, percentage, color) {
            const gaugeRadius = 65;
            const startingY = 80;
            const startingX = 10;

            const zeroBasedY = gaugeRadius * Math.sin(percentageInRadians(percentage));
            const y = -zeroBasedY + startingY;
            const zeroBasedX = gaugeRadius * Math.cos(percentageInRadians(percentage));
            const x = -zeroBasedX + gaugeRadius + startingX;
            // console.log(
            // `percentage: ${percentage}, zeroBasedY: ${zeroBasedY}, y: ${y}, zeroBasedX: ${zeroBasedX}, x: ${x}`
            // );

            gaugeElement.innerHTML = `<path d="M ${startingX} ${startingY}
                A ${gaugeRadius} ${gaugeRadius} 0 0 1 ${x} ${y}"
                stroke="${color}" stroke-width="13" stroke-linecap="round" />`;
        }

        function percentageInRadians(percentage) {
            return percentage * (Math.PI / 100);
        }

        function startBatteryMonitoring(loaderId) {
            getBattery(loaderId);
            setInterval(() => getBattery(loaderId), 300000);
        }

        function getBattery(loaderId) {
            $.ajax({
                url: "/api/PLCLoader/GetBatteryStatus/" + loaderId,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.success == true) {
                        const battery = result.data;
                        const meterColor = getBatteryColor(battery);
                        updateBatteryGauge(battery, meterColor);
                        $('#batteryErr').text('');
                    }
                    else 
                    {
                        //failed to get loader battery
                        $('#batteryErr').text('Battery Status Unavailable').css('');
                    }
                },
                error: function (error) {
                    
                }
            });
        }

        function getBatteryColor(battery) {
            if (battery > 60) {
                return "#4CAF50"; 
            } else if (battery >= 30) {
                return "#FEB21A"; 
            } else {
                return "#F44336"; 
            }
        }

        function updateBatteryGauge(battery, meterColor) {
            const gaugeElement = document.getElementById("svg-graph-meter-value");
            const percentageElement = document.getElementById("svg-gauge-percentage-2");

            percentageElement.textContent = battery + " %";
            setGaugePathValue(gaugeElement, battery, meterColor);
        }

        function getLoaderColumn(loaderId) {
            $.ajax({
                url: "/loader/GetLoaderColumn/",
                type: "POST",
                data: JSON.stringify(loaderId),
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    result.data.forEach(item => {
                        const colNo = item.colNo;
                        const usagePercentage = item.usagePercentage;
                        const colHeight = item.colHeight;
                        const balanceHeight = item.balanceHeight;

                        $(`#percent-c${colNo}`).text(`${usagePercentage}%`);
                        $(`#balance-c${colNo}`).text(`${balanceHeight}`);
                        $(`#colHeight-c${colNo}`).text(`${colHeight}`);
                        $(`#c${colNo}`).css('width', `${usagePercentage}%`);
                    });
                    
                },
                error: function (error) {

                }
            });
        }
    </script>
}
