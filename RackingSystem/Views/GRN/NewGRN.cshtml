
@{
}

<style type="text/css">
    body {
        color: #566787;
        background: #f5f5f5;
        /* font-family: 'Varela Round', sans-serif; */
        /* font-size: 13px; */
    }

    .table-wrapper {
        background: #fff;
        padding: 20px 25px;
        margin: 30px auto;
        border-radius: 3px;
        box-shadow: 0 1px 1px rgba(0,0,0,.05);
    }

       /*  .table-wrapper .btn {
            float: right;
            color: #333;
            background-color: #fff;
            border-radius: 3px;
            border: none;
            outline: none !important;
            margin-left: 10px;
        }

            .table-wrapper .btn:hover {
                color: #333;
                background: #f2f2f2;
            }

            .table-wrapper .btn.btn-primary {
                color: #fff;
                background: #03A9F4;
            }

                .table-wrapper .btn.btn-primary:hover {
                    background: #03a3e7;
                } */

    /* .table-title .btn { */
    /*     font-size: 17px; */
    /*     border: none; */
    /* } */

        /* .table-title .btn i { */
        /*     float: left; */
        /*     font-size: 21px; */
        /*     margin-right: 5px; */
        /* } */

        /* .table-title .btn span { */
        /*     float: left; */
        /*     margin-top: 2px; */
        /*     height: 21px; */
        /* } */

    .table-title {
        color: #fff;
        background: #4b5366;
        padding: 16px 25px;
        margin: -20px -25px 10px;
        border-radius: 3px 3px 0 0;
    }

        .table-title h2 {
            margin: 5px 0 0;
            font-size: 24px;
        }

    .show-entries select.form-control {
        width: 60px;
        margin: 0 5px;
    }

    .table-filter .filter-group {
        float: right;
        margin-left: 15px;
    }

    .table-filter input, .table-filter select {
        height: 34px;
        border-radius: 3px;
        border-color: #ddd;
        box-shadow: none;
    }

    .table-filter {
        padding: 5px 0 15px;
        border-bottom: 1px solid #e9e9e9;
        margin-bottom: 5px;
    }

        .table-filter .btn {
            height: 34px;
        }

        .table-filter label {
            font-weight: normal;
            margin-left: 10px;
        }

        .table-filter select, .table-filter input {
            display: inline-block;
            margin-left: 5px;
        }

        .table-filter input {
            width: 200px;
            display: inline-block;
        }

    .filter-group select.form-control {
        width: 110px;
    }

    .filter-icon {
        float: right;
        margin-top: 7px;
    }

        .filter-icon i {
            font-size: 18px;
            opacity: 0.7;
        }

    table.table tr th, table.table tr td {
        border-color: #e9e9e9;
        padding: 12px 15px;
        vertical-align: middle;
    }

       /*  table.table tr th:first-child {
            width: 150px;
        }

        table.table tr th:last-child {
            width: 80px;
        } */

    table.table-striped tbody tr:nth-of-type(odd) {
        background-color: #fcfcfc;
    }

    table.table-striped.table-hover tbody tr:hover {
        background: #f5f5f5;
    }

    table.table th i {
        font-size: 13px;
        margin: 0 5px;
        cursor: pointer;
    }

    table.table td a {
        font-weight: bold;
        color: #566787;
        display: inline-block;
        text-decoration: none;
    }

        table.table td a:hover {
            color: #2196F3;
        }

        table.table td a.view {
            width: 30px;
            height: 30px;
            color: #2196F3;
            border: 2px solid;
            border-radius: 30px;
            text-align: center;
        }

            table.table td a.view i {
                font-size: 22px;
                margin: 2px 0 0 1px;
            }

    table.table .avatar {
        border-radius: 50%;
        vertical-align: middle;
        margin-right: 10px;
    }

    .status {
        font-size: 30px;
        margin: 2px 2px 0 0;
        display: inline-block;
        vertical-align: middle;
        line-height: 10px;
    }

    .text-success {
        color: #10c469;
    }

    .text-info {
        color: #62c9e8;
    }

    .text-warning {
        color: #FFC107;
    }

    .text-danger {
        color: #ff5b5b;
    }

    .pagination {
        float: right;
        margin: 0 0 5px;
    }

        .pagination li a {
            border: none;
            font-size: 13px;
            min-width: 30px;
            min-height: 30px;
            color: #999;
            margin: 0 2px;
            line-height: 30px;
            border-radius: 2px !important;
            text-align: center;
            padding: 0 6px;
        }

            .pagination li a:hover {
                color: #666;
            }

        .pagination li.active a {
            background: #03A9F4;
        }

            .pagination li.active a:hover {
                background: #0397d6;
            }

        .pagination li.disabled i {
            color: #ccc;
        }

        .pagination li i {
            font-size: 16px;
            padding-top: 6px
        }

    .hint-text {
        float: left;
        margin-top: 10px;
        font-size: 13px;
    }

    div.dt-buttons {
        float: right;
    }



    .panel-focus {
        background-color: #198754 !important;
    }

    .panel {
        background-color: #6c757d !important;
    }

    .panel-dtl-focus {
        background-color: white !important;
    }

        .panel-dtl-focus span {
            color: black;
            background-color: #white;
        }

        .panel-dtl-focus div.timeline-body {
            color: black;
            background-color: white;
        }

        .panel-dtl-focus div.timeline-footer {
            color: black;
            background-color: #white;
        }

    .panel-dtl {
        background-color: #e9ecef !important;
    }

        .panel-dtl span {
            color : grey;
            background-color: #e9ecef;
        }

        .panel-dtl div.timeline-body {
            color: grey;
            background-color: #e9ecef;
        }

        .panel-dtl div.timeline-footer {
            color: grey;
            background-color: #e9ecef;
        }

    .titleDisable {
        background-color: #e9ecef !important;
    }

    .titleDisable span {
        background-color: #e9ecef !important;
        color: darkgray;
    }

    .bodyDisable i {
        background-color: darkgreen !important;
    }

    .bodyDisable div.timeline-body {
        color: grey;
        background-color: #e9ecef;
    }

    .bodyDisable div.timeline-footer {
        color: grey;
        background-color: #e9ecef;
    }

    .error-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .is-invalid {
        border-color: red;
    }

    .is-valid {
        border-color: green;
    }

    .hidden {
        display: none;
    }

    .bi-check-all {
        /* margin-top: 5px;
        margin-left: 16px;
        margin-right: 10px;
        font-size: 26px; */
        color: darkgreen;
    }

    .fa-cog {
        /* margin-top: 5px;
        margin-left: 16px;
        margin-right: 10px; */
        /* font-size:20px; */
        color: #198754;
        animation: rotate 3s linear infinite;
    }

    .err .fa-cog {
        color: red;
        animation: rotate 3s linear infinite;
    }

    @@keyframes rotate {
        from

    {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    }
</style>

<div class="container-fluid">
    <div class="table-wrapper">
        <div class="table-title">
            <div class="row">
                <div class="col-sm-4">
                    <h2>NEW GRN <b></b></h2>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12 col-md-8">
                <div class="card card-success">
                    <div class="card-header " id="pnlGRNH">
                        <h3 class="card-title">1. Receive Info</h3>
                    </div>
                    <div class="card-body" id="pnlGRND">
                        @* <form action="javascript:loadList()"> *@
                        <div class="row" style="padding:5px;">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>Loader</label>
                                    <input id="txtLoader" type="button" class="form-control" style="" placeholder="Loader" onclick="showLoaderForm()" /> 
                                    <div id="txtLoaderError" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label>GRN Batch No</label>
                                    <input id="txtGRN" type="text" class="form-control" style="" placeholder="" maxlength="50" />
                                    <div id="txtGRNError" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label></label>
                                    <div class="row">
                                        <div class="col-sm-12 col-md-4">
                                            <div class="custom-control custom-checkbox">
                                                <input class="custom-control-input" type="checkbox" id="chkPrint">
                                                <label for="chkPrint" class="custom-control-label">Print QR</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-12 col-md-4">
                                            <div class="custom-control custom-checkbox">
                                                <input class="custom-control-input" type="checkbox" id="chkPrintItem">
                                                <label for="chkPrintItem" class="custom-control-label">Print Item</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-12 col-md-4">
                                            <div class="custom-control custom-checkbox">
                                                <input class="custom-control-input" type="checkbox" id="chkLoadToLoader">
                                                <label for="chkLoadToLoader" class="custom-control-label">Start Loader</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding:5px;">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Supplier Name</label>
                                    <input id="txtSupplierName" type="text" class="form-control" style="" placeholder="" onclick="" maxlength="255" />
                                    <div id="txtSupplierNameError" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Supplier Ref No</label>
                                    <input id="txtSupplierRefNo" type="text" class="form-control" style="" placeholder="" maxlength="50" />
                                    <div id="txtSupplierRefNoError" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding:5px;">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Item</label>
                                    <input id="txtItem" type="button" class="form-control" style="" placeholder="" onclick="showItemForm()" />
                                    <div id="txtItemError" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Qty</label>
                                    <input id="txtQty" type="number" class="form-control" style="" placeholder="" />
                                    <div id="txtQtyError" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding:5px;">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Expiry Date</label>
                                    <input id="dtpExDate" name="DateFrom" type="date" class="form-control" placeholder="Expiry Date" />
                                    <div id="dtpExDateError" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group"> 
                                    <label>Remark</label>
                                    <input id="txtRemark" type="text" class="form-control" style="" placeholder="" maxlength="255" />
                                    <div id="txtRemarkError" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding:5px;">
                            <div class="col-sm-12" style="">
                                <button type="button" class="btn btn-block btn-success" style="width:100%;" onclick="addReceive()" id="btnAdd"><i class="bi bi-plus"></i> Add</button>
                            </div>
                        </div>
                        <input type="hidden" id="txtItemId">
                        <input type="hidden" id="txtLoaderId">
                        <input type="hidden" id="txtReelCode">
                        @* </form> *@
                    </div>
                </div>

                <hr />

                <table class="table table-striped table-hover" id="listTable">
                    <thead>
                        <tr>
                            <th>GRN No</th>
                            <th>Item</th>
                            <th>Qty</th>
                            <th>Reel Code</th>
                            <th>Created</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                </table>

            </div>
            <div class="col-sm-12 col-md-4">
                <div class="card card-success">
                    <div class="card-header " id="pnlPLCH">
                        <h3 class="card-title">2. Loader Response</h3>
                    </div>
                    <div class="card-body" id="pnlPLCD">
                        <div class="timeline">
                            @* STEP 1 *@
                            <div class="time-label" id="pnl1_title">
                                <span class="bg-red">STEP 1 :: Check Loader Status ... </span>
                            </div>
                            <div id="pnl1_body">
                                <span id="spin1"><i class="timeline-icon fas fa-cog" ></i></span> <i class="timeline-icon bi bi-check-all text-bg-success" id="done1"></i>
                                @* <i class="timeline-icon bi bi-person text-bg-success"></i> *@
                                <div class="timeline-item">
                                    <div class="timeline-body" style="height:50px;">
                                        <p id="pLoader1">
                                            Loader :
                                        </p>
                                    </div>
                                    <div class="timeline-footer" style="border-top:1px solid rgba(0,0,0,.125); min-height:50px;">
                                        <span style="color:red; font-size:15px;" id="err1"> </span>
                                        <button type="button" class="btn btn-block btn-success" onclick="loadPLC(1);" id="btnRetry1">Retry</button>
                                    </div>
                                </div>
                            </div>

                            @* STEP 2 *@
                            <div class="time-label" id="pnl2_title">
                                <span class="bg-red">STEP 2 :: Waiting Scan Reel ... </span>
                            </div>
                            <div id="pnl2_body">
                                <span id="spin2"><i class="timeline-icon fas fa-cog"></i></span> <i class="timeline-icon bi bi-check-all text-bg-success" id="done2"></i>
                                @* <i class="timeline-icon bi bi-info text-bg-success"></i> *@
                                <div class="timeline-item">
                                    <div class="timeline-body" style="height:150px;">
                                        <p id="pItem2">
                                            Item :
                                        </p>
                                        <p id="pReel2">
                                            Reel ID :
                                        </p>
                                        <p id="pHeight2">
                                            Est. Height :
                                        </p>                                        
                                    </div>
                                    <div class="timeline-footer" style="border-top:1px solid rgba(0,0,0,.125); min-height:50px;">
                                        <span style="color:red; font-size:15px;" id="err2"> </span>
                                        <button type="button" class="btn btn-block btn-success" onclick="loadPLC(2);" id="btnRetry2">Retry</button>
                                    </div>
                                </div>
                            </div>

                            @* STEP 3 *@
                            <div class="time-label" id="pnl3_title">
                                <span class="bg-red">STEP 3 :: Checking column available ... </span>
                            </div>
                            <div id="pnl3_body">
                                <span id="spin3"><i class="timeline-icon fas fa-cog"></i></span> <i class="timeline-icon bi bi-check-all text-bg-success" id="done3"></i>
                                @* <i class="timeline-icon bi bi-info text-bg-success"></i> *@
                                <div class="timeline-item">
                                    <div class="timeline-body" style="height:50px;">
                                        <p id="pItem3">
                                            Auto Loader Column : 1
                                        </p>
                                    </div>
                                    <div class="timeline-footer" style="border-top:1px solid rgba(0,0,0,.125); min-height:50px;">
                                        <span style="color:red; font-size:15px;" id="err3"> </span>
                                        <button type="button" class="btn btn-block btn-success" onclick="loadPLC(1);" id="btnRetry3">Retry</button>
                                    </div>
                                </div>
                            </div>

                            @* STEP 4 *@
                            <div class="time-label" id="pnl4_title">
                                <span class="bg-red">STEP 4 :: Reading Reel Info ... </span>
                            </div>
                            <div id="pnl4_body">
                                <span id="spin4"><i class="timeline-icon fas fa-cog"></i></span> <i class="timeline-icon bi bi-check-all text-bg-success" id="done4"></i>
                                @* <i class="timeline-icon bi bi-info text-bg-success"></i> *@
                                <div class="timeline-item">
                                    <div class="timeline-body" style="height:100px;">
                                        <p id="pLoader4">
                                            Auto Loader Column : 1
                                        </p>
                                        <p id="pHeight4">
                                            Actual Height :
                                        </p>
                                    </div>
                                    <div class="timeline-footer" style="border-top:1px solid rgba(0,0,0,.125); min-height:50px;">
                                        <span style="color:red; font-size:15px;" id="err4"> </span>
                                        <button type="button" class="btn btn-block btn-success" onclick="loadPLC(4);" id="btnRetry4">Retry</button>
                                    </div>
                                </div>
                            </div>

                            @* STEP 5 *@
                            <div class="time-label" id="pnlLast_title">
                                <span class="bg-red">STEP 5 :: Finalizing ... </span>
                            </div>
                            <div id="pnlLast_body">
                                <span id="spinLast"><i class="timeline-icon fas fa-cog"></i></span> <i class="timeline-icon bi bi-check-all text-bg-success" id="doneLast"></i>
                                @* <i class="timeline-icon bi bi-flag text-bg-success"></i> *@
                                <div class="timeline-item">
                                    <div class="timeline-body" style="height:50px;">
                                        <p style="text-align:center;" id="pTextLast">Waiting finish loading reel ...</p>
                                    </div>
                                    <div class="timeline-footer" style="border-top:1px solid rgba(0,0,0,.125);">
                                        @* <span style="color:dimgrey; font-size:15px;">No Error </span> *@
                                        <button type="button" class="btn btn-block btn-success" onclick="loadPLC(5);" id="btnRetryLast">Retry</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input type="hidden" id="txtEstHeight">
                        <input type="hidden" id="txtActHeight">
                    </div>
                </div>
            </div>
        </div>

    </div>

</div>

<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Select Item</h4>
            </div>
            <div class="modal-body">
                <table id="itemTable" class="dt-column-search table table-bordered table-responsive dataTable" style="width:100%">
                    <thead>
                        <tr>
                            <th>Item Code</th>
                            <th>UOM</th>
                            <th>Description</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <input type="hidden" id="txtItemStatus">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="loaderModal" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-body">
                <div class="card card-success">
                    <div class="card-header">
                        <h3 class="card-title">Scan Loader Code</h3>
                    </div>
                    <div class="card-body">
                        <input id="txtScanLoader" class="form-control form-control-lg" type="text" placeholder="Scan Loader ... ">
                        <hr />
                        <p>Or select loader from list : </p>
                        <select class="form-control" id="selLoader">
                        </select>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="addLoader(1, '','')">Done</button>
                <button type="button" class="btn btn-outline-secondary" onclick="cancelLoaderForm()">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myEditModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Update Auto Loader</h4>
            </div>
            @* <form action="/bin/SaveBin" method="post"> *@
            <div class="modal-body">
                <div class="mb-3">
                    <label>Supplier Name</label>
                    <input id="txtSupplierName2" type="text" class="form-control" style="" placeholder="" onclick="" maxlength="255" />
                    <div id="txtSupplierName2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Supplier Ref No</label>
                    <input id="txtSupplierRefNo2" type="text" class="form-control" style="" placeholder="" maxlength="50" />
                    <div id="txtSupplierRefNo2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Item</label>
                    <input id="txtItem2" type="button" class="form-control" style="" placeholder="" onclick="showItemForm2()" />
                    <div id="txtItem2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Qty</label>
                    <input id="txtQty2" type="number" class="form-control" style="" placeholder="" />
                    <div id="txtQty2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Expiry Date</label>
                    <input id="dtpExDate2" name="DateFrom" type="date" class="form-control" placeholder="Expiry Date" />
                    <div id="dtpExDate2Error" class="error-message"></div>
                </div>
                <div class="mb-3 form-check">
                    <label>Remark</label>
                    <input id="txtRemark2" type="text" class="form-control" style="" placeholder="" maxlength="255" />
                    <div id="txtRemark2Error" class="error-message"></div>
                </div>

                <input type="hidden" id="txtId2">
                <input type="hidden" id="txtItemId2">
                <input type="hidden" id="txtLoaderId2">
                <input type="hidden" id="txtReelCode2">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="updateReceive()">Save</button>
                <button type="button" class="btn btn-outline-secondary" onclick="cancelEditForm()">Cancel</button>
            </div>
            @* </form> *@
        </div>
    </div>
</div>

@section Scripts
{
    <link href="~/css/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/sweetalert2.min.css">

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/css/datatables.min.js"></script>
    <script src="~/js/sweetalert2.all.min.js"></script>

    <!-- DataTables Buttons -->
    @* <script src="https://cdn.datatables.net/buttons/1.6.2/js/dataTables.buttons.min.js"></script> *@
    <script src="~/js/datatables.buttons.min.js"></script>
    <!-- JSZip for Excel/CSV -->
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script> *@
    <script src="~/js/jszip.min.js"></script>
    <!-- HTML5 Export Buttons -->
    @* <script src="https://cdn.datatables.net/buttons/1.6.2/js/buttons.html5.min.js"></script> *@
    <script src="~/js/buttons.html5.min.js"></script>

    <script type="text/javascript">

        const scanLoaderEle = document.getElementById('txtScanLoader');

        scanLoaderEle.addEventListener('keyup', function(event) {
          // Check if the pressed key is "Enter" (key code 13 or key property "Enter")
          if (event.key === 'Enter') {

            const inputValue = this.value;
            // alert('Enter key pressed! Value: ');

            var code = inputValue;
            $.ajax({
                url: "/Loader/GetLoaderInfo_ReadyToLoad?req=" + code,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    //console.log(result);
                    swal.close();
                    if (result.success == true) {
                        addLoader(0, result.data.loader_Id, result.data.loaderCode);
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
          }
        });

        $(document).ready(function () {
            $("#txtGRN").val('-');
            resetColorPLCForm(0);
            resetColorForm(1);

            $('#listTable').DataTable({
                searching: true,
                responsive: true,
                dom: 'Bfrtip', // 'B' for Buttons, 'f' for filtering, 'r' for processing display, 't' for table, 'i' for information, 'p' for pagination
                buttons: [
                    'excelHtml5',
                ],
                "order": [[ 4, 'desc' ]],
                 paging: false,
            });

            loadLoaderList();
            loadItemList();

            // loadPLC(0);
        });

        function loadItemList() {
            $.ajax({
                url: "/Item/GetActiveItemList/",
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading();
                },
                success: function (result) {
                    //console.log(result);
                    swal.close();
                    if (result.success == true) {
                        $('#itemTable').DataTable( {
                            dom: 'frtip',
                            ordering: false,
                            data: result.data,
                            paging: true,
                            pageLength: 25,
                            lengthMenu: [25, 50, 100, 250, 500],
                            columns: [
                                { data: 'itemCode' },
                                { data: 'uom' },
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        return '<p><span>' + row.description + '</span><br/>' +
                                        '<span style="font-size:13px;color:grey;">' + row.desc2 + '</span></p>';
                                    }
                                },
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        const rowData = JSON.stringify(row).replace(/"/g, "&quot;");
                                        return `<div style="display:flex;"><button class="btn btn-success d-grid addItem-btn" style="margin-right:10px;"
                                        data-row="${rowData}">
                                        <span><i class="bi bi-plus""></i>  Add</span></button>
                                        </div>`;
                                        // return '<div style="display:flex;"><button class="btn btn-success d-grid" style="margin-right:10px;"' +
                                        // 'onclick="addtemForm(\'' + row.item_Id + '\', \'' + row.itemCode + '\')">' +
                                        // '<span><i class="bi bi-plus""></i>  Add</span></button> ' +
                                        // '</div>';
                                    }
                                }
                            ],
                        });

                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function loadLoaderList() {
            $.ajax({
                url: "/Loader/GetLoaderList_ReadyToLoad/",
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading();
                },
                success: function (result) {
                    // console.log(result);
                    swal.close();
                    if (result.success == true) {

                        // Get the select element
                        const selLoader = document.getElementById('selLoader');
                        for (const opt of result.data)
                        {
                            const el = document.createElement("option");
                            el.textContent = opt.loaderCode;
                            el.value = opt.loader_Id;
                            selLoader.appendChild(el);
                        }
                        
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function showLoaderForm() {
            $("#loaderModal").modal("toggle");
        }

        function addLoader(_type, id, code) {
            if (_type == 1) {
                const selLoader = document.getElementById('selLoader');
                const idx = selLoader.selectedIndex;
                const selectedOption = selLoader.options[idx];
                id = selectedOption.value;
                code = selectedOption.text;


                $.ajax({
                    url: "/Loader/GetLoaderInfo_ReadyToLoad?req=" + code,
                    type: "GET",
                    dataType: 'JSON',
                    // data: JSON.stringify(jsonInput),
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        Swal.fire({
                            text: 'Please Wait',
                            width: '300px',

                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            showConfirmButton: false,
                        });
                        Swal.showLoading()
                    },
                    success: function (result) {
                        //console.log(result);
                        swal.close();
                        if (result.success == true) {
                            // continue
                        }
                        else {
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: result.errMessage
                            });
                        }
                    },
                    error: function (error) {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                    }
                });

            }

            var grn = $("#txtGRN").val();
            if (grn == "-") {
                const date = new Date();
                const year = date.getFullYear();
                const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is 0-indexed
                const day = date.getDate().toString().padStart(2, '0');
                const HH = date.getHours().toString().padStart(2, '0');
                const mm = date.getMinutes().toString().padStart(2, '0');
                const ss = date.getSeconds().toString().padStart(2, '0');

                const formattedDate = `${year}${month}${day}${HH}${mm}`;
                $("#txtGRN").val(formattedDate);
            }

            $("#txtLoader").val(code);
            $("#txtLoaderId").val(id);
            $("#loaderModal").modal("toggle");
        }

        function cancelLoaderForm() {
            $("#loaderModal").modal("toggle");
        }

        function showItemForm() {
            $("#myModal").modal("toggle");
            $("#txtItemStatus").val('New');
        }

        function showItemForm2() {
            $("#myModal").modal("toggle");
            $("#txtItemStatus").val('Edit');
        }

        $('#itemTable').on('click', '.addItem-btn', function () {
            const row = JSON.parse($(this).attr('data-row'));
            addtemForm(row);
        });

        function addtemForm(row) {
            if ($("#txtItemStatus").val() == 'Edit') {
                $("#txtItem2").val(row.itemCode);
                $("#txtItemId2").val(row.item_Id);
            }
            else {
                $("#txtItem").val(row.itemCode);
                $("#txtItemId").val(row.item_Id);
                $("#myModal").modal("toggle");

                const txtQty = document.getElementById('txtQty');
                txtQty.focus();
            }
        }

        // Show error message and highlight invalid fields
        function showError(fieldId, message) {
            document.getElementById(fieldId).classList.add('is-invalid');
            document.getElementById(fieldId + 'Error').textContent = message;
        }

        function removeErrMsg(fields, clearValue = false) {
            fields = ['txtLoader', 'txtGRN', 'txtSupplierName', 'txtSupplierRefNo', 'txtItem', 'txtQty', 'dtpExDate', 'txtRemark' ];
            if (!Array.isArray(fields)) {
                fields = [fields];
            }

            fields.forEach(function(field) {
                document.getElementById(field).classList.remove('is-invalid');
                document.getElementById(field).classList.remove('is-valid');
                document.getElementById(field + 'Error').textContent = '';
                if (clearValue) document.getElementById(field).value = '';
            });
        }

        function checkInput() {
            let isValid = true;
            var txt = document.getElementById("txtLoader");
            if (txt.value == "") {
                showError(txt.id, `Please select Loader.`);
                isValid = false;
            }
            txt = document.getElementById("txtGRN");
            if (txt.value == "") {
                showError(txt.id, `Please enter GRN No.`);
                isValid = false;
            }
            txt = document.getElementById("txtSupplierName");
            if (txt.value == "") {
                showError(txt.id, `Please enter Supplier Name.`);
                isValid = false;
            }
            txt = document.getElementById("txtSupplierRefNo");
            if (txt.value == "") {
                showError(txt.id, `Please enter Supplier Ref No.`);
                isValid = false;
            }
            txt = document.getElementById("txtItem");
            if (txt.value == "") {
                showError(txt.id, `Please select Item.`);
                isValid = false;
            }
            txt = document.getElementById("txtQty");
            if (txt.value == "") {
                showError(txt.id, `Please enter Qty.`);
                isValid = false;
            }
            txt = document.getElementById("dtpExDate");
            if (txt.value == "") {
                showError(txt.id, `Please enter Exipry Date.`);
                isValid = false;
            }
            // txt = document.getElementById("txtRemark");
            // if (txt.value == "") {
            //     showError(txt.id, `Please enter Remark.`);
            //     isValid = false;
            // }
            return isValid;
        }

        function insertItemRow(row) {
            $("#txtReelCode").val(row.reelCode);
            var table = new DataTable('#listTable');   
            
            const rowData = JSON.stringify(row).replace(/"/g, "&quot;");

            //<button class="btn btn-error">Reprint</button>
            table.rows.add([
                [$("#txtGRN").val(), row.itemCode, row.qty, row.reelCode, row.createdDateDisplay,
                    `<button class="btn btn-warning edit-btn" data-row="${rowData}">Edit</button>
                    <button class="btn btn-danger deactivate-account delete-btn" data-id="${row.grnDetail_Id}" data-code="${row.reelCode}"> Delete</button>`]
            ]).draw();

        }

        function readyNewReceive() {
            resetColorForm(1);
            resetColorPLCForm(0);
            $("#txtItem").val('');
            $("#txtItemId").val('');
            $("#txtReelCode").val('');
            $("#txtEstHeight").val(0);
            $("#txtActHeight").val(0);
            // $("#txtQty").val('');
            $("#myModal").modal("toggle");
        }

        function resetColorForm(isGRN) {
            if (isGRN == 1) {
                $("#pnlGRNH").addClass("panel-focus");
                $("#pnlGRND").addClass("panel-dtl-focus");
                $("#pnlPLCH").addClass("panel");
                $("#pnlPLCD").addClass("panel-dtl");

                $('#txtLoader').prop('disabled', false);
                $('#chkPrint').prop('disabled', false);
                $('#chkPrintItem').prop('disabled', false);
                $('#chkLoadToLoader').prop('disabled', false);

                $('#txtSupplierName').prop('disabled', false);
                $('#txtSupplierRefNo').prop('disabled', false);
                $('#txtItem').prop('disabled', false);
                $('#txtQty').prop('disabled', false);
                $('#dtpExDate').prop('disabled', false);
                $('#txtRemark').prop('disabled', false);
                $('#txtGRN').prop('disabled', false);
                $('#btnAdd').prop('disabled', false);

                const btnAdd = document.getElementById('btnAdd');
                btnAdd.style.backgroundColor = '#198754';

            }
            else {
                $("#pnlGRNH").removeClass("panel-focus");
                $("#pnlGRND").removeClass("panel-dtl-focus");
                $("#pnlPLCH").removeClass("panel");
                $("#pnlPLCD").removeClass("panel-dtl");

                $("#pnlPLCH").addClass("panel-focus");
                $("#pnlPLCD").addClass("panel-dtl-focus");
                $("#pnlGRNH").addClass("panel");
                $("#pnlGRND").addClass("panel-dtl");

                $('#txtLoader').prop('disabled', true);
                $('#chkPrint').prop('disabled', true);
                $('#chkPrintItem').prop('disabled', true);
                $('#chkLoadToLoader').prop('disabled', true);

                $('#txtSupplierName').prop('disabled', true);
                $('#txtSupplierRefNo').prop('disabled', true);
                $('#txtItem').prop('disabled', true);
                $('#txtQty').prop('disabled', true);
                $('#dtpExDate').prop('disabled', true);
                $('#txtRemark').prop('disabled', true);
                $('#txtGRN').prop('disabled', true);

                $('#btnAdd').prop('disabled', true);

                const btnAdd = document.getElementById('btnAdd');
                btnAdd.style.backgroundColor = 'grey';

            }

        }

        function resetColorPLCForm(idx) {
            $("#pnl1_title").addClass("titleDisable");
            $("#pnl1_body").addClass("bodyDisable");
            $("#pnl2_title").addClass("titleDisable");
            $("#pnl2_body").addClass("bodyDisable");
            $("#pnl3_title").addClass("titleDisable");
            $("#pnl3_body").addClass("bodyDisable");
            $("#pnl4_title").addClass("titleDisable");
            $("#pnl4_body").addClass("bodyDisable");
            $("#pnlLast_title").addClass("titleDisable");
            $("#pnlLast_body").addClass("bodyDisable");

            $('#spin1').addClass("hidden");
            $("#spin2").addClass("hidden");
            $("#spin3").addClass("hidden");
            $("#spin4").addClass("hidden");
            $("#spinLast").addClass("hidden");
            $("#done1").addClass("hidden");
            $("#done2").addClass("hidden");
            $("#done3").addClass("hidden");
            $("#done4").addClass("hidden");
            $("#doneLast").addClass("hidden");
            $('#btnRetry1').addClass("hidden");
            $("#btnRetry2").addClass("hidden");
            $("#btnRetry3").addClass("hidden");
            $("#btnRetry4").addClass("hidden");
            $("#btnRetryLast").addClass("hidden");

            if (idx == 1) {
                $("#pnl1_title").removeClass("titleDisable");
                $("#pnl1_body").removeClass("bodyDisable");
                $('#err1').html("");
                $("#spin1").removeClass("hidden");
                $('#btnRetry1').removeClass("hidden");
            }
            else if (idx == 2) {
                $("#pnl2_title").removeClass("titleDisable");
                $("#pnl2_body").removeClass("bodyDisable");
                $('#err2').html("");
                $("#spin2").removeClass("hidden");
                $('#btnRetry2').removeClass("hidden");
                $('#done1').removeClass("hidden");
            }
            else if (idx == 3) {
                $("#pnl3_title").removeClass("titleDisable");
                $("#pnl3_body").removeClass("bodyDisable");
                $('#err3').html("");
                $("#spin3").removeClass("hidden");
                $("#spin3").removeClass("hidden");
                $('#done1').removeClass("hidden");
                $('#done2').removeClass("hidden");
            }
            else if (idx == 4) {
                $("#pnl4_title").removeClass("titleDisable");
                $("#pnl4_body").removeClass("bodyDisable");
                $('#err4').html("");
                $("#spin4").removeClass("hidden");
                $('#done1').removeClass("hidden");
                $('#done2').removeClass("hidden");
                $('#done3').removeClass("hidden");
            }
            else if (idx == 0) {
                //
            }
            else {
                $("#pnlLast_title").removeClass("titleDisable");
                $("#pnlLast_body").removeClass("bodyDisable");
                $('#err5').html("");
                $("#spinLast").removeClass("hidden");
                $('#done1').removeClass("hidden");
                $('#done2').removeClass("hidden");
                $('#done3').removeClass("hidden");
                $('#done4').removeClass("hidden");
            }

        }

        $('#listTable').on('click', '.edit-btn', function () {
            const row = JSON.parse($(this).attr('data-row'));
            editItemForm(row);
        });

        // Show error message and highlight invalid fields
        function removeErrMsg2(fields, clearValue = false) {
            fields = ['txtSupplierName2', 'txtSupplierRefNo2', 'txtItem2', 'txtQty2', 'dtpExDate2', 'txtRemark2' ];
            if (!Array.isArray(fields)) {
                fields = [fields];
            }

            fields.forEach(function(field) {
                document.getElementById(field).classList.remove('is-invalid');
                document.getElementById(field).classList.remove('is-valid');
                document.getElementById(field + 'Error').textContent = '';
                if (clearValue) document.getElementById(field).value = '';
            });
        }

        function checkInput2() {
            let isValid = true;
            txt = document.getElementById("txtSupplierName2");
            if (txt.value == "") {
                showError(txt.id, `Please enter Supplier Name.`);
                isValid = false;
            }
            txt = document.getElementById("txtSupplierRefNo2");
            if (txt.value == "") {
                showError(txt.id, `Please enter Supplier Ref No.`);
                isValid = false;
            }
            txt = document.getElementById("txtItem2");
            if (txt.value == "") {
                showError(txt.id, `Please select Item.`);
                isValid = false;
            }
            txt = document.getElementById("txtQty2");
            if (txt.value == "") {
                showError(txt.id, `Please enter Qty.`);
                isValid = false;
            }
            txt = document.getElementById("dtpExDate2");
            if (txt.value == "") {
                showError(txt.id, `Please enter Exipry Date.`);
                isValid = false;
            }
            // txt = document.getElementById("txtRemark2");
            // if (txt.value == "") {
            //     showError(txt.id, `Please enter Remark.`);
            //     isValid = false;
            // }
            return isValid;
        }

        function editItemForm(row) {
            removeErrMsg2([]);
            $("#txtId2").val(row.grnDetail_Id);
            $("#txtItemId2").val(row.item_Id);
            // $("#txtLoaderId2").val(row.loader_Id);
            $("#txtReelCode2").val(row.reelCode);
            $("#txtSupplierName2").val(row.supplierName);
            $("#txtSupplierRefNo2").val(row.supplierRefNo);
            $("#txtItem2").val(row.itemCode);
            $("#txtQty2").val(row.qty);
            $("#dtpExDate2").val(row.expiryDate);
            $("#txtRemark2").val(row.remark);
            $("#myEditModal").modal("show");
        }

        function cancelEditForm() {
            $("#myEditModal").modal("toggle");
        }

        function updateReceive() {
            removeErrMsg2([]);
            if (checkInput2() == false) {
                return;
            }

            var data = {
                ReelCode: $("#txtReelCode2").val(),
                GRNDetail_Id: $("#txtId2").val(),
                SupplierName: $("#txtSupplierName2").val(),
                SupplierRefNo: $("#txtSupplierRefNo2").val(),
                Item_Id: $("#txtItemId2").val(),
                Qty: $("#txtQty2").val(),
                ExpiryDate: $("#dtpExDate2").val(),
                Remark: $("#txtRemark2").val()
            }

            //console.log(JSON.stringify(data));

            $.ajax({
                url: '/GRN/SaveGRNDtl',
                type: 'POST',
                data: JSON.stringify(data),
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    // console.log(result);
                    if (result.success == true) {
                        //Swal.close(); // Close the loading alert
                        swal.fire({
                            icon: 'success',
                            title: "Succes Save",
                            text: "",
                        });
                        $('#myEditModal').modal("toggle");
                        // updateItemRow(result.data);
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    console.log(error);
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });

            // console.log(id);
        }

        $('#listTable').on('click', '.delete-btn', function () {
            const id = $(this).attr('data-id');
            const code = $(this).attr('data-code');

            // Find the row containing the clicked button
            var row = $(this).closest('tr');
            var table = $('#listTable').DataTable();
                
            swal.fire({
                title: "Are you sure want to delete?",
                text: "You will not be able to recover this record!",
                inputAttributes: {
                    autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'ok',
                cancelButtonText: 'cancel',
                allowOutsideClick: false
            }).then(function(r) {
                if (r.isConfirmed == true) {
                    var data = {
                        GRNDetail_Id: id,
                        ReelCode: code
                    }

                    $.ajax({
                        url: '/GRN/DeleteGRNDtl',
                        type: 'DELETE',
                        data: JSON.stringify(data),
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            Swal.fire({
                                text: 'Please Wait',
                                width: '300px',

                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                showConfirmButton: false,
                            });
                            Swal.showLoading();
                        },
                        success: function (result) {
                            if (result.success == true) {
                                // $("#myModal").modal("toggle");
                                swal.fire({
                                    icon: 'success',
                                    title: "Success Deleted",
                                    text: "",
                                });
                                // Remove the row from the DataTable
                                table.row(row).remove().draw();
                            }
                            else {
                                swal.fire({
                                    icon: 'error',
                                    title: "Wait",
                                    text: result.errMessage
                                });
                            }
                        },
                        error: function (error) {
                            console.log(error);
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: error.val
                            });
                        }
                    });

                }
            });
        });

        function addReceive() {
            removeErrMsg([]);
            if (checkInput() == false) {
                return;
            }

            var data = {
                GRNBatchNo: $("#txtGRN").val(),
                SupplierName: $("#txtSupplierName").val(),
                SupplierRefNo: $("#txtSupplierRefNo").val(),
                Item_Id: $("#txtItemId").val(),
                Qty: $("#txtQty").val(),
                ExpiryDate: $("#dtpExDate").val(),
                Remark: $("#txtRemark").val()
            }

            //console.log(JSON.stringify(data));

            $.ajax({
                url: '/GRN/SaveGRNDtl',
                type: 'POST',
                data: JSON.stringify(data),
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    // console.log(result);
                    if (result.success == true) {
                        Swal.close(); // Close the loading alert
                        insertItemRow(result.data);

                        const chkPrint = document.getElementById('chkPrint');
                        const chkLoadToLoader = document.getElementById('chkLoadToLoader');
                        if (chkPrint.checked) {
                            // print sticker ~
                        }

                        if (chkLoadToLoader.checked) {
                            // need call PLC
                            resetColorForm(0);
                            loadPLC(0);

                        } else {
                            // continue new Item
                            readyNewReceive();
                        }
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    console.log(error);
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });

            // console.log(id);
        }

        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

                function retry1() {
            // $('#btnRetry1').addClass("hidden");
            $('#pt1').html("STEP 1 :: Check Loader Status ... ");
            $("#txtLoader").val('');
            $("#txtLoaderId").val('');
            $("#loaderModal").modal("toggle");
        }

        function retry2() {
            resetColorPLCForm(2);
            $('#spin1').removeClass("err");
            $("#txtEstHeight").val(0);
            $("#txtActHeight").val(0);
            $("#txtReelCode").val('');
            // $("#txtICol").val(1);
            $("#itemModal").modal("toggle");
        }

        function retry3() {
            // $("#txtICol").val(1);
            loadPLC(3);
        }

        function cont4() {
            $("#putModal").modal("toggle");
            loadPLC(4);
        }

        async function turnCol() {
            $("#warnTurnModal").modal("toggle");
            var loaderId = $("#txtLoaderId").val();
            var iCol = $("#txtICol").val();
            var realCol = await loadPLCGetCurrentColumn(loaderId);
            if (Number(realCol) == 0) {
                $('#btnRetry3').removeClass("hidden");
            }
            else {
                if (realCol < iCol) {
                    var turnCol = await loadPLCTurnColumn(loaderId, Number(realCol));
                    if (turnCol == false) {
                        return;
                    }
                    realCol = Number(realCol) + 1;
                }
                if (realCol < iCol) {
                    var turnCol = await loadPLCTurnColumn(loaderId, Number(realCol));
                    if (turnCol == false) {
                        return;
                    }
                    realCol = Number(realCol) + 1;
                }
                if (realCol < iCol) {
                    var turnCol = await loadPLCTurnColumn(loaderId, Number(realCol));
                    if (turnCol == false) {
                        return;
                    }
                    realCol = Number(realCol) + 1;
                }

                // wait for fork is ready
                await delay(3000);
                var chkColFork = await loadPLCCheckColFork(loaderId, iCol);
                if (chkColFork == false) {
                    $('#btnRetry3').removeClass("hidden");
                }
                else {
                    $('#pt3').html("STEP 3 :: DONE Ready Column ");
                    $("#putModal").modal("toggle");
                }
            }
        }

        async function loadPLC(idx) {

            var loaderId = $("#txtLoaderId").val();

            // step 1 : check loader
            if (idx == 1) {
                resetColorPLCForm(1);
                // if (loaderId == "") {
                //     $('#spin1').addClass("err");
                //     $('#pLoader1').html("Loader : ");
                //     $('#err1').html("No loader is selected.");
                //     $('#btnRetry1').removeClass("hidden");
                //     return;
                // }

                // await delay(3000);
                var chkLoader = await loadPLCCheckLoader(loaderId);
                console.log('R1::' + chkLoader);
                if (chkLoader == false) {
                    $('#btnRetry1').removeClass("hidden");
                }
                else {
                    $('#pt1').html("STEP 1 :: DONE Check Loader ");

                    resetColorPLCForm(2);
                    $("#txtEstHeight").val(0);
                    $("#txtActHeight").val(0);
                    $("#txtReelCode").val('');
                    // $("#txtICol").val(1);

                    $("#itemModal").modal("toggle");
                }
                return;
            }


            var reelCode = $("#txtReelCode").val();

            if (idx == 2) {
                // await delay(3000);
                var chkItem = await loadPLCCheckItem(loaderId, reelCode);
                console.log('R2::' + chkItem);
                if (chkItem == false) {
                    $('#btnRetry2').removeClass("hidden");
                    return;
                }
                else {
                    $('#pt2').html("STEP 2 :: DONE Read Reel ");
                    idx = 3
                }
            }

            var iCol = $("#txtICol").val();
            if (idx == 3) {
                resetColorPLCForm(3);
                $('#pCol3').html("Checking Auto Loader Column : " + iCol);
                await delay(3000);
                var chkCol = await loadPLCCheckEstHeight(loaderId, reelCode, iCol);
                console.log('R3.1::' + chkCol);
                if (chkCol == false && iCol <= 4) {
                    iCol = Number(iCol) + 1;
                    $('#pCol3').html("Checking Auto Loader Column : " + iCol);
                    await delay(1000);
                    chkCol = await loadPLCCheckEstHeight(loaderId, reelCode, iCol);
                    console.log('R3.2::' + chkCol);
                }
                if (chkCol == false && iCol <= 4) {
                    iCol = Number(iCol) + 1;
                    $('#pCol3').html("Checking Auto Loader Column : " + iCol);
                    await delay(1000);
                    chkCol = await loadPLCCheckEstHeight(loaderId, reelCode, iCol);
                    console.log('R3.3::' + chkCol);
                }
                if (chkCol == false && iCol <= 4) {
                    iCol = Number(iCol) + 1;
                    $('#pCol3').html("Checking Auto Loader Column : " + iCol);
                    await delay(1000);
                    chkCol = await loadPLCCheckEstHeight(loaderId, reelCode, iCol);
                    console.log('R3.4::' + chkCol);
                }
                console.log('R3.10::' + iCol);
                if (chkCol == false) {
                    $('#btnRetry3').removeClass("hidden");
                }
                else {
                    $("#txtICol").val(iCol);

                    // check is column correct, else need call turn
                    // await delay(3000);
                    var realCol = await loadPLCGetCurrentColumn(loaderId);
                    if (realCol == 0) {
                        $('#btnRetry3').removeClass("hidden");
                    }
                    else {
                        if (realCol < iCol) {
                            $("#warnTurnModal").modal("toggle");
                        }
                        // if (realCol < iCol) {
                        //     var turnCol = await loadPLCTurnColumn(loaderId, realCol);
                        //     if (turnCol == false) {
                        //         return;
                        //     }
                        //     realCol = Number(realCol) + 1;
                        // }
                        // if (realCol < iCol) {
                        //     var turnCol = await loadPLCTurnColumn(loaderId, realCol);
                        //     if (turnCol == false) {
                        //         return;
                        //     }
                        //     realCol = Number(realCol) + 1;
                        // }
                        // if (realCol < iCol) {
                        //     var turnCol = await loadPLCTurnColumn(loaderId, realCol);
                        //     if (turnCol == false) {
                        //         return;
                        //     }
                        //     realCol = Number(realCol) + 1;
                        // }

                        // // wait for fork is ready
                        // // await delay(3000);
                        // var chkColFork = await loadPLCCheckColFork(loaderId, iCol);
                        // if (chkColFork == false) {
                        //     $('#btnRetry3').removeClass("hidden");
                        // }
                        // else {
                        //     $("#putModal").modal("toggle");
                        // }
                    }
                }
                return;
                // await delay(3000);
            }

            iCol = $("#txtICol").val();
            if (idx == 4) {
                resetColorPLCForm(4);
                // await delay(1000);
                var chkAct = await loadPLCActHeight(loaderId, reelCode, iCol);
                console.log('R4::' + chkAct);
                if (chkAct == false) {
                    $('#btnRetry4').removeClass("hidden");
                    return;
                }
                else {
                    $('#pt4').html("STEP 4 :: DONE Read Actual Height ");
                    idx = 5;
                }
            }

            if (idx == 5) {
                resetColorPLCForm(5);
                var chkLast = await loadPLCUpdateDB(loaderId, reelCode, iCol);
                console.log('R5::' + chkLast);
                if (chkLast == false) {
                    $('#btnRetry5').removeClass("hidden");
                    return;
                }
                else {
                    $('#ptLast').html("STEP 4 :: DONE Finalize ");
                    await delay(3000);

                    $("#txtScanItem").val('');

                    resetColorPLCForm(2);
                    newReel();

                    $("#itemModal").modal("toggle");
                }
                // await delay(3000);
            }


        }

        async function loadPLCCheckLoader(loaderId) {

            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/GetLoaderId/" + loaderId,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('1::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {
                        $('#pLoader1').html("Loader : " + result.data);
                        $('#err1').html("");
                        $('#spin1').removeClass("err");
                        $('#spin1').addClass("hidden");
                        $("#done1").removeClass("hidden");

                        fResult = true;
                    }
                    else {
                        $('#spin1').addClass("err");
                        $('#pLoader1').html("Loader : unknown");
                        $('#err1').html(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#spin1').addClass("err");
                    $('#pLoader1').html("Loader : unknown");
                    $('#err1').html(error.message);
                }
            });

            return fResult;
        }

        async function loadPLCCheckItem(loaderId, reelCode) {

            var fResult = false;

            // step 2 : scan item
            await $.ajax({
                url: "/api/PLCLoader/VerifyItem/" + reelCode,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('2::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {
                        $('#pItem2').html("Item : " + result.data.itemCode);
                        $('#pReel2').html("Reel ID : " + result.data.reelCode);
                        $('#pHeight2').html("Est. Height : " + result.data.thickness);
                        $('#err2').html("");
                        $('#spin2').removeClass("err");
                        $('#spin2').addClass("hidden");
                        $("#done2").removeClass("hidden");

                        $("#txtEstHeight").val(result.data.thickness);

                        fResult = true;
                    }
                    else {
                        $('#spin2').addClass("err");
                        $('#pLoader2').html("Loader : unknown");
                        $('#err2').html(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#spin2').addClass("err");
                    $('#pLoader2').html("Loader : unknown");
                    $('#err2').html(error.message);
                }
            });

            return fResult;
        }

        async function loadPLCCheckEstHeight(loaderId, reelCode, iCol) {
            var thickness = $("#txtEstHeight").val();
            // step 3 : check column height balance and change column

            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/CheckColumnHeight/" + loaderId + "/" + iCol + "/" + thickness,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {

                        $('#pCol3').html("Auto Loader Column : " + iCol);
                        $('#errCol3').html("");
                        $('#spin3').removeClass("err");
                        $('#spin3').addClass("hidden");
                        $("#done3").removeClass("hidden");

                        fResult = true;

                    }
                    else {
                        if (iCol < 4) {
                            $('#spin3').addClass("err");
                            $('#pCol3').html("Loader : Wait turn to next column ... ");
                            $('#errCol3').html(result.errMessage);
                        }
                        else {
                            $('#spin3').addClass("err");
                            $('#pCol3').html("Loader : All column is full, please change auto loader.");
                            $('#errCol3').html(result.errMessage);
                        }

                    }
                },
                error: function (error) {
                    if (iCol < 4) {
                        $('#spin3').addClass("err");
                        $('#pCol3').html("Loader : Wait turn to next column ... ");
                        $('#errCol3').html(error.message);
                    }
                    else {
                        $('#spin3').addClass("err");
                        $('#pCol3').html("Loader : All column is full, please change auto loader.");
                        $('#errCol3').html(error.message);
                    }
                }
            });

            // console.log('3::' + fResult);
            return fResult;
        }

        async function loadPLCGetCurrentColumn(loaderId) {

            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/GetCurrentColumn/" + loaderId,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3.2::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {
                        fResult = true;
                    }
                    else {
                        $('#spin3').addClass("err");
                        $('#pCol3').html("Loader : Unable get current column ... ");
                        $('#errCol3').html(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#spin3').addClass("err");
                    $('#pCol3').html("Loader : Unable get current column ... ");
                    $('#errCol3').html(result.errMessage);
                }
            });

            return fResult;
        }

        // step 3.2 : call PLC to turn
        async function loadPLCTurnColumn(loaderId, iCol) {

            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/TurnColumn/" + loaderId + "/" + iCol,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3.3::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {
                        fResult = true;
                    }
                    else {
                        $('#spin3').addClass("err");
                        $('#pCol3').html("Loader : Unable to turn column ... ");
                        $('#errCol3').html(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#spin3').addClass("err");
                    $('#pCol3').html("Loader : Unable to turn column ... ");
                    $('#errCol3').html(result.errMessage);
                }
            });

            return fResult;
        }

        // step 3.3 : check column height balance and change column
        async function loadPLCCheckColFork(loaderId, iCol) {

            var fResult = false;

            await $.ajax({
                    url: "/api/PLCLoader/GetForkReady/" + loaderId + "/" + iCol,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('3.3::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {

                        $('#pFork3').html("Fork Status : Column " + iCol + " is READY.");
                        $('#errFork3').html("");
                        $('#spin3').removeClass("err");
                        $('#spin3').addClass("hidden");
                        $("#done3").removeClass("hidden");

                        fResult = true;

                    }
                    else {
                        $('#spin3').addClass("err");
                        $('#pFork3').html("Fork Status : ");
                        $('#errFork3').html(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#spin3').addClass("err");
                    $('#pFork3').html("Fork Status : ");
                    $('#errFork3').html(error.message);
                }
            });

            // console.log('3::' + fResult);
            return fResult;
        }

        // step 4 : get actual height balance
        async function loadPLCActHeight(loaderId, reelCode, iCol) {

            var fResult = false;

            await $.ajax({
                url: "/api/PLCLoader/GetReelActualHeight/" + loaderId + "/" + iCol,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('4::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {
                        $("#txtActHeight").val(result.data);
                        $('#pLoader4').html("Loader : " + iCol);
                        $('#pHeight4').html("Actual Height : " + result.data);
                        $("#done4").removeClass("hidden");

                        fResult = true;
                    }
                    else {
                        if (iCol < 4) {
                            $('#pCol3').html("Auto Loader Column : " + (Number(iCol) + 1));
                            $('#spin4').addClass("err");
                            $('#pLoader4').html("Loader : ");
                            $('#pHeight4').html("Actual Height : " + result.data);
                            $('#err4').html(result.errMessage);

                            $("#txtICol").val(Number(iCol) + 1);
                            $("#warnTurnModal").modal("toggle");
                        }
                        else {
                            $('#spin4').addClass("err");
                            $('#pLoader4').html("Loader : ");
                            $('#pHeight4').html("Actual Height : " + result.data);
                            $('#err4').html(result.errMessage + " All column is full, please change auto loader.");

                        }
                    }
                },
                error: function (error) {
                    $('#spin4').addClass("err");
                    $('#pLoader4').html("Loader : ");
                    $('#pHeight4').html("Actual Height : ");
                    $('#err4').html(error.message);
                }
            });

            return fResult;
        }

        async function loadPLCUpdateDB(loaderId, reelCode, iCol) {
            var actHeight = $("#txtActHeight").val();
            // console.log('5::' + actHeight);

            // step 5 : Save data
            $.ajax({
                url: "/api/PLCLoader/UpdateReelIntoLoader/" + loaderId + "/" + iCol + "/" + reelCode + "/" + actHeight,
                type: "GET",
                dataType: 'JSON',
                // data: JSON.stringify(jsonInput),
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {

                },
                success: function (result) {
                    console.log('5::' + JSON.stringify(result));
                    // swal.close();
                    if (result.success == true) {
                        $('#pTextLast').html("ALL DONE. Will continue next item after 2 seconds...");
                        $("#doneLast").removeClass("hidden");

                        // continue new Item
                    }
                    else {
                        $('#spinLast').addClass("err");
                        $('#pTextLast').html(result.errMessage);
                    }
                },
                error: function (error) {
                    $('#spinLast').addClass("err");
                    $('#pTextLast').html(error.message);
                }
            });

            return true;
        }


    </script>
}
