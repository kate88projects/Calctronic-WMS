@*
*@
@{
}

<style>
    body {
        color: #566787;
        background: #f5f5f5;
        /* font-family: 'Varela Round', sans-serif; */
        /* font-size: 13px; */
    }

    .card {
        background: #f2f2f2;
        height:100%;
    }

    .table-title {
        color: #fff;
        background: #4b5366;
        border-radius: 3px 3px 0 0;
    }

    .table-title h2 {
        margin: 5px 0 0;
        font-size: 24px;
    }

    .title {
        font-weight: 600;
        margin-bottom: 5px; 
        font-size: 18px;
    }

    .title-container {
        width: 40px;  
        height: 100%;
        cursor: pointer;
        display: flex;               
        justify-content: flex-start;
        align-items: center; 
    }

    #grnForm, .tableContainer {
        background-color: #fff;
        padding: 30px;
        border-radius: 20px;
    }

    .detailContainer {
        padding: 5px 25px 0px;
    }

    .select2-container {
        z-index: 9999 !important;
    }

    .select2-selection--single {
        height: 40px !important;  
        width: 100% !important;
        border-radius: 0.375rem;   
        border: 1px solid #ced4da; 
        padding: 8px;  

    }

    div.dt-buttons, nav {
        float: right;
    }

    div.dt-search {
        margin-bottom: 10px;
    }

    .error-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .is-invalid {
        border-color: red;
    }

    .is-valid {
        border-color: green;
    }

    .hidden {
        display: none;
    }
</style>

<br />
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-outline ">
                <div class="card-header table-title">
                    <div class="card-title">
                        <h2>NEW GRN <b></b></h2>
                    </div>
                </div>
                <div class="card-body">
                    <div class id="grnForm">
                        <div class="grnContainer">
                            <div class="row">
                                <div class="col">
                                    <div class="row">
                                        <div class="d-flex">
                                            <i class="bi bi-info-circle" style="font-size: 18px;"></i>
                                            <span class="title titleColor ms-2">Receive Info</span>
                                        </div>
                                    </div>
                                    <div class="detailContainer">
                                        <div class="row mt-2">
                                            <div class="col-md-4">
                                                <label for="txtLoader">Loader</label>
                                                <input id="txtLoader" type="button" class="form-control" style="" placeholder="Loader" onclick="showLoaderForm()" /> 
                                                <div id="txtLoaderError" class="error-message"></div>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="txtGRN">GRN Batch No</label>
                                                <input id="txtGRN" type="text" class="form-control" style="" placeholder="" maxlength="50" /> 
                                                <div id="txtGRNError" class="error-message"></div>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="txtRemark">Remark</label>
                                                <input id="txtRemark" type="text" class="form-control" style="" placeholder="" maxlength="255" />
                                                <div id="txtRemarkError" class="error-message"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-4">
                                                <label for="dtpExDate">Expiry Date</label>
                                                <input id="dtpExDate" name="DateFrom" type="date" class="form-control" placeholder="Expiry Date" oninput="removeErrMsg(this.id)" />
                                                <div id="dtpExDateError" class="error-message"></div>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="txtSupplierName">Supplier Name</label>
                                                <input id="txtSupplierName" type="text" class="form-control" style="" placeholder="" onclick="" maxlength="255" oninput="removeErrMsg(this.id)"/>
                                                <div id="txtSupplierNameError" class="error-message"></div>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="txtSupplierRefNo">Supplier Ref No</label>
                                                <input id="txtSupplierRefNo" type="text" class="form-control" style="" placeholder="" maxlength="50" oninput="removeErrMsg(this.id)"/>
                                                <div id="txtSupplierRefNoError" class="error-message"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-4">
                                                <label for="txtItem">Item</label>
                                                <input id="txtItem" type="button" class="form-control" style="" placeholder="" onclick="showItemForm('New')" />
                                                <div id="txtItemError" class="error-message"></div>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="txtQty">Qty</label>
                                                <input id="txtQty" type="number" class="form-control" style="" placeholder="" oninput="removeErrMsg(this.id)"/>
                                                <div id="txtQtyError" class="error-message"></div>
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-sm-6 col-md-2">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="custom-control-input" type="checkbox" id="chkPrint">
                                                    <label for="chkPrint" class="custom-control-label">Print QR</label>
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-2">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="custom-control-input" type="checkbox" id="chkPrintItem">
                                                    <label for="chkPrintItem" class="custom-control-label">Print Item</label>
                                                </div>
                                            </div>
                                            @* <div class="col-sm-6 col-md-3">
                                                <div class="custom-control custom-checkbox">
                                                    <input class="custom-control-input" type="checkbox" id="chkLoadToLoader">
                                                    <label for="chkLoadToLoader" class="custom-control-label">Start Loader</label>
                                                </div>
                                            </div> *@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-success me-2" id="addButton" onclick="addReceive()"><i class="bi bi-plus-lg"></i> Add</button>
                        </div>
                        <input type="hidden" id="txtItemId">
                        <input type="hidden" id="txtLoaderId">
                        <input type="hidden" id="txtReelCode1">
                    </div>
                    <hr />

                    <div class="tableContainer">
                        <table class="table table-striped table-hover" id="listTable">
                            <thead>
                                <tr>
                                    <th>GRN No</th>
                                    <th>Item</th>
                                    <th>Qty</th>
                                    <th>Reel Code</th>
                                    <th>Created</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
             </div>
        </div>
    </div>
</div>

<div class="modal fade" id="loaderModal" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-body">
                <div class="card card-success">
                    <div class="card-header">
                        <h3 class="card-title">Scan Loader Code</h3>
                    </div>
                    <div class="card-body" style="background-color: #FFF;">
                        <input id="txtScanLoader" class="form-control form-control-lg" type="text" placeholder="Scan Loader ... ">
                        <hr />
                        <p>Or select loader from list : </p>
                        <select class="form-control loader-select" id="selLoader"></select>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="addLoader(1, '','')">Done</button>
                <button type="button" class="btn btn-outline-secondary" onclick="cancelLoaderForm()">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="itemModal" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h4 class="modal-title">Select Item</h4>
            </div>
            <div class="modal-body">
                <table id="itemTable" class="dt-column-search table table-bordered table-responsive dataTable mb-2" style="width:100%">
                    <thead>
                        <tr>
                            <th>Item Code</th>
                            <th>UOM</th>
                            <th>Description</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <input type="hidden" id="txtItemStatus">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" data-bs-backdrop="static" id="myEditModal" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Update GRN</h4>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label>Supplier Name</label>
                    <input id="txtSupplierName2" type="text" class="form-control" style="" placeholder="" onclick="" maxlength="255" oninput="removeErrMsg(this.id)" />
                    <div id="txtSupplierName2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Supplier Ref No</label>
                    <input id="txtSupplierRefNo2" type="text" class="form-control" style="" placeholder="" maxlength="50" oninput="removeErrMsg(this.id)" />
                    <div id="txtSupplierRefNo2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Item</label>
                    <input id="txtItem2" type="button" class="form-control" style="" placeholder="" onclick="showItemForm('Edit')" />
                    <div id="txtItem2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Qty</label>
                    <input id="txtQty2" type="number" class="form-control" style="" placeholder="" oninput="removeErrMsg(this.id)" />
                    <div id="txtQty2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Expiry Date</label>
                    <input id="dtpExDate2" name="DateFrom" type="date" class="form-control" placeholder="Expiry Date" oninput="removeErrMsg(this.id)" />
                    <div id="dtpExDate2Error" class="error-message"></div>
                </div>
                <div class="mb-3">
                    <label>Remark</label>
                    <input id="txtRemark2" type="text" class="form-control" style="" placeholder="" maxlength="255" />
                    <div id="txtRemark2Error" class="error-message"></div>
                </div>

                <input type="hidden" id="txtId2">
                <input type="hidden" id="txtItemId2">
                <input type="hidden" id="txtLoaderId2">
                <input type="hidden" id="txtReelCode2">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="updateReceive()">Save</button>
                <button type="button" class="btn btn-outline-secondary" onclick="cancelEditForm()">Cancel</button>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
    <link rel="stylesheet" href="~/css/sweetalert2.min.css">
    <link rel="stylesheet" href="~/css/select2.min.css">
    <link rel="stylesheet" href="~/css/datatables.min.css">

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/sweetalert2.all.min.js"></script>
    <script src="~/js/datatables.min.js"></script>
    <script src="~/js/select2.min.js"></script>

    <script type="text/javascript">
        const scanLoaderEle = document.getElementById('txtScanLoader');

        scanLoaderEle.addEventListener('keyup', function(event) {
          if (event.key === 'Enter') {

            const inputValue = this.value;
            var code = inputValue;
            $.ajax({
                url: "/Loader/GetLoaderInfo_ReadyToLoad?req=" + code,
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    swal.close();
                    if (result.success == true) {
                        addLoader(0, result.data.loader_Id, result.data.loaderCode);
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
          }
        });

        $(document).ready(function() {
            $('#txtGRN').val('-');
            $('#listTable').DataTable({
                searching: true,
                responsive: true,
                dom: 'Bfrtip',
                buttons: [
                    {
                        extend: 'excelHtml5',
                        text: 'Export Excel',
                        exportOptions: {
                            columns: ':not(:last-child)'
                        }
                    }
                ],
                "order": [[ 4, 'desc' ]],
                 paging: false, 
                 columnDefs: [
                     { targets: '_all', className: 'text-start' }
                 ]
            });

            $('.loader-select').select2({
                placeholder: 'Select an option',
                width: '100%',
                dropdownParent: $('#loaderModal'),
            });

            $('.loader-select').on('select2:open', function() {
                setTimeout(() => {
                    let searchField = document.querySelector('.select2-container--open .select2-search__field');
                    if (searchField) {
                        searchField.focus();
                    }
                }, 100);
            });

            loadLoaderList();
            loadItemList();
        });

        function showLoaderForm() {
            $("#loaderModal").modal("show");
        }

        function cancelLoaderForm() {
            $("#loaderModal").modal("toggle");
        }

        function loadLoaderList() {
            $.ajax({
                url: "/Loader/GetLoaderList_ReadyToLoad/",
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',
                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading();
                },
                success: function (result) {
                    swal.close();
                    if (result.success == true) {
                        console.log("result data", result.data);
                        const dropdown = document.getElementById('selLoader');
                        dropdown.innerHTML = "";

                        result.data.forEach((i, index) => {
                            const option = document.createElement("option");
                            option.value = i.loader_Id;
                            option.textContent = i.loaderCode;
                            if (index === 0) {
                                option.selected = true;
                            }
                            dropdown.appendChild(option);
                        });
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function loadItemList() {
            $.ajax({
                url: "/Item/GetActiveItemList/",
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading();
                },
                success: function (result) {
                    swal.close();
                    if (result.success == true) {
                        $('#itemTable').DataTable( {
                            dom: 'frtip',
                            ordering: false,
                            data: result.data,
                            paging: true,
                            pageLength: 25,
                            lengthMenu: [25, 50, 100, 250, 500],
                            columns: [
                                { data: 'itemCode' },
                                { data: 'uom' },
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        return '<p><span>' + row.description + '</span><br/>' +
                                        '<span style="font-size:13px;color:grey;">' + row.desc2 + '</span></p>';
                                    }
                                },
                                {
                                    data: null,
                                    render: function (data, type, row, meta) {
                                        const rowData = JSON.stringify(row).replace(/"/g, "&quot;");
                                        return `<div style="display:flex;">
                                                    <button class="btn btn-success d-grid addItem-btn" data-row="${rowData}">
                                                        <span><i class="bi bi-plus""></i> Add</span>
                                                    </button>
                                                </div>`;
                                    }
                                }
                            ],
                            columnDefs: [
                                { width: '15%', targets: 0 }, 
                                { width: '10%', targets: 1 }, 
                                { width: '60%', targets: 2 }, 
                                { width: '15%', targets: 3 }  
                            ]
                        });

                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function addLoader(_type, id, code) {
            if (_type == 1) {
                const selLoader = document.getElementById('selLoader');
                const idx = selLoader.selectedIndex;
                const selectedOption = selLoader.options[idx];
                id = selectedOption.value;
                code = selectedOption.text;

                $.ajax({
                    url: "/Loader/GetLoaderInfo_ReadyToLoad?req=" + code,
                    type: "GET",
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        Swal.fire({
                            text: 'Please Wait',
                            width: '300px',

                            allowEscapeKey: false,
                            allowOutsideClick: false,
                            showConfirmButton: false,
                        });
                        Swal.showLoading()
                    },
                    success: function (result) {
                        swal.close();
                        if (result.success == true) {
                            removeErrMsg('txtLoader');
                        }
                        else {
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: result.errMessage
                            });
                        }
                    },
                    error: function (error) {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                    }
                });

            }

            var grn = $("#txtGRN").val();
            if (grn == "-") {
                const date = new Date();
                const year = date.getFullYear();
                const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is 0-indexed
                const day = date.getDate().toString().padStart(2, '0');
                const HH = date.getHours().toString().padStart(2, '0');
                const mm = date.getMinutes().toString().padStart(2, '0');
                const ss = date.getSeconds().toString().padStart(2, '0');

                const formattedDate = `${year}${month}${day}${HH}${mm}`;
                $("#txtGRN").val(formattedDate);
            }

            $("#txtLoader").val(code);
            $("#txtLoaderId").val(id);
            $("#loaderModal").modal("toggle");
        }

        function showItemForm(mode) {
            $('#itemModal').modal("show");
            $('#txtItemStatus').val(mode);
        }

        $('#itemTable').on('click', '.addItem-btn', function() {
            const row = JSON.parse($(this).attr('data-row'));
            addItemForm(row);
        });

        function addItemForm(row) {
            if ($("#txtItemStatus").val() == 'Edit') {
                $("#txtItem2").val(row.itemCode);
                $("#txtItemId2").val(row.item_Id);
                // removeErrMsg('txtItem');
                // $('#itemModal').modal("toggle");
            }
            else {
                $("#txtItem").val(row.itemCode);
                $("#txtItemId").val(row.item_Id);

                const txtQty = document.getElementById('txtQty');
                txtQty.focus();
            }

            removeErrMsg('txtItem');
            $("#itemModal").modal("toggle");
        }

        function validateInput(inputChecks) {
            let isValid = true;

            inputChecks.forEach(input => {
                const el = document.getElementById(input.id);
                if (el && el.value.trim() === "") {
                    showError(input.id, `Please enter ${input.label}.`);
                    isValid = false;
                }
            });

            // var txt = document.getElementById("txtLoader");
            // if (txt.value == "") {
            //     showError(txt.id, `Please select Loader.`);
            //     isValid = false;
            // }
            // txt = document.getElementById("txtGRN");
            // if (txt.value == "") {
            //     showError(txt.id, `Please enter GRN No.`);
            //     isValid = false;
            // }
            // txt = document.getElementById("txtSupplierName");
            // if (txt.value == "") {
            //     showError(txt.id, `Please enter Supplier Name.`);
            //     isValid = false;
            // }
            // txt = document.getElementById("txtSupplierRefNo");
            // if (txt.value == "") {
            //     showError(txt.id, `Please enter Supplier Ref No.`);
            //     isValid = false;
            // }
            // txt = document.getElementById("txtItem");
            // if (txt.value == "") {
            //     showError(txt.id, `Please select Item.`);
            //     isValid = false;
            // }
            // txt = document.getElementById("txtQty");
            // if (txt.value == "") {
            //     showError(txt.id, `Please enter Qty.`);
            //     isValid = false;
            // }
            // txt = document.getElementById("dtpExDate");
            // if (txt.value == "") {
            //     showError(txt.id, `Please enter Exipry Date.`);
            //     isValid = false;
            // }
            return isValid;
        }

        function showError(fieldId, message) {
            document.getElementById(fieldId).classList.add('is-invalid');
            document.getElementById(fieldId + 'Error').textContent = message;
        }

        function removeErrMsg(fields, clearValue = false) {
            if (!Array.isArray(fields)) {
                fields = [fields];
            }

            fields.forEach(function(field) {
                document.getElementById(field).classList.remove('is-invalid');
                document.getElementById(field).classList.remove('is-valid');
                document.getElementById(field + 'Error').textContent = '';
                if (clearValue) document.getElementById(field).value = '';
            });
        }

        function addReceive() {
            const inputChecks = [
                { id: "txtLoader", label: "Loader" },
                { id: "txtGRN", label: "GRN No" },
                { id: "txtSupplierName", label: "Supplier Name" },
                { id: "txtSupplierRefNo", label: "Supplier Ref No" },
                { id: "txtItem", label: "Item" },
                { id: "txtQty", label: "Qty" },
                { id: "dtpExDate", label: "Exipry Date" },
            ];
            removeErrMsg(inputChecks.map(input => input.id));
            
            if (validateInput(inputChecks) == false) {
                return;
            }
            var data = {
                GRNBatchNo: $("#txtGRN").val(),
                SupplierName: $("#txtSupplierName").val(),
                SupplierRefNo: $("#txtSupplierRefNo").val(),
                Item_Id: $("#txtItemId").val(),
                Qty: $("#txtQty").val(),
                ExpiryDate: $("#dtpExDate").val(),
                Remark: $("#txtRemark").val()
            }

            $.ajax({
                url: '/GRN/SaveGRNDtl',
                type: 'POST',
                data: JSON.stringify(data),
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',
                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading();
                },
                success: function (result) {
                    if (result.success == true) {
                        Swal.close(); // Close the loading alert
                        insertItemRow(result.data);

                        const chkPrint = document.getElementById('chkPrint');
                        if (chkPrint.checked) {
                            // print sticker ~
                        }

                        readyNewReceive();
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    console.log(error);
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function insertItemRow(row) {
            $("#txtReelCode").val(row.reelCode);
            var table = new DataTable('#listTable');   
            const rowData = JSON.stringify(row).replace(/"/g, "&quot;");
            table.rows.add([
                [$("#txtGRN").val(), row.itemCode, row.qty, row.reelCode, row.createdDateDisplay,
                 `<button class="btn btn-warning edit-btn" data-row="${rowData}" id="editBtn">
                    <i class="bi bi-pencil-square"></i> Edit</button>
                    <button class="btn btn-primary" id="printQR" onclick="printQR()"> Print QR</button>
                    <button class="btn btn-primary" id="printItem" onclick="printItem()"> Print Item</button>`, 
                    row.grnDetail_Id ]
                // <button class="btn btn-danger deactivate-account delete-btn" data-id="${row.grnDetail_Id}" data-code="${row.reelCode}"> Delete</button>`]
            ]).draw();
        }

        function readyNewReceive() {
            $("#txtItem").val('');
            $("#txtItemId").val('');
            $("#txtReelCode").val('');
            $("#txtEstHeight").val(0);
            $("#txtActHeight").val(0);
            // $("#txtQty").val('');
            $("#itemModal").modal("toggle");
        }

        $('#listTable').on('click', '.edit-btn', function () {
            const row = JSON.parse($(this).attr('data-row'));
            console.log("edit here", row);
            editItemForm(row);

        });

        function editItemForm(row) {
            removeErrMsg(['txtSupplierName2', 'txtSupplierRefNo2', 'txtItem2', 'txtQty2', 'dtpExDate2', 'txtRemark2']);
            $("#txtId2").val(row.grnDetail_Id);
            $("#txtItemId2").val(row.item_Id);
            // $("#txtLoaderId2").val(row.loader_Id);
            $("#txtReelCode2").val(row.reelCode);
            $("#txtSupplierName2").val(row.supplierName);
            $("#txtSupplierRefNo2").val(row.supplierRefNo);
            $("#txtItem2").val(row.itemCode);
            $("#txtQty2").val(row.qty);

            const expiryDate = row.expiryDate.split('T')[0];
            $("#dtpExDate2").val(expiryDate);
            $("#txtRemark2").val(row.remark);
            $("#myEditModal").modal("show");
        }

        function cancelEditForm() {
            $("#myEditModal").modal("toggle");
        }

        //to avoid item modal be blocked by edit form modal
        $('.modal').on('show.bs.modal', function () {
            let zIndex = 1050 + ($('.modal:visible').length * 10);
            $(this).css('z-index', zIndex);
            setTimeout(() => {
                $('.modal-backdrop').not('.stacked')
                    .css('z-index', zIndex - 1)
                    .addClass('stacked');
            }, 0);
        });

        //add back the modal class for edit form after the item modal closed
        $('.modal').on('hidden.bs.modal', function () {
            if ($('.modal:visible').length > 0) {
                $('body').addClass('modal-open');
            }
        });

        function updateReceive() {
            const inputChecks = [
                { id: "txtSupplierName2", label: "Supplier Name" },
                { id: "txtSupplierRefNo2", label: "Supplier Ref No" },
                { id: "txtItem2", label: "Item" },
                { id: "txtQty2", label: "Qty" },
                { id: "dtpExDate2", label: "Exipry Date" },
            ];
            removeErrMsg(inputChecks.map(input => input.id));
            if (validateInput(inputChecks) == false) {
                return;
            }

            var data = {
                ReelCode: $("#txtReelCode2").val(),
                GRNDetail_Id: $("#txtId2").val(),
                SupplierName: $("#txtSupplierName2").val(),
                SupplierRefNo: $("#txtSupplierRefNo2").val(),
                Item_Id: $("#txtItemId2").val(),
                Qty: $("#txtQty2").val(),
                ExpiryDate: $("#dtpExDate2").val(),
                Remark: $("#txtRemark2").val()
            }

            $.ajax({
                url: '/GRN/SaveGRNDtl',
                type: 'POST',
                data: JSON.stringify(data),
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    if (result.success == true) {
                        swal.fire({
                            icon: 'success',
                            title: "Succes Save",
                            text: "",
                        });
                        $('#myEditModal').modal("toggle");
                        refreshListTable(data.GRNDetail_Id);
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    console.log(error);
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });

            // console.log(id);
        }

        function refreshListTable(id) {
            if (id != "") {
                $.ajax({
                    url: '/GRN/GetLatestGRNDetail', 
                    type: 'POST',
                    data: JSON.stringify(id),
                    dataType: 'JSON',
                    contentType: 'application/json; charset=utf-8',
                    success: function(response) {
                        console.log("get latest ", response.data);
                        const updatedData = response.data;
                        var table = $('#listTable').DataTable();

                        table.rows().every(function() {
                            var rowData = this.data();
                            var detailId = rowData[6];

                            if (detailId == id) {
                                rowData[1] = updatedData.itemCode;
                                rowData[2] = updatedData.qty;
                                rowData[3] = updatedData.reelCode;
                                rowData[4] = updatedData.createdDateDisplay;
                                rowData[5] = `<button class="btn btn-warning edit-btn" data-row='${JSON.stringify(updatedData)}'>
                                                <i class="bi bi-pencil-square"></i> Edit</button>
                                                <button class="btn btn-primary" id="printQR" onclick="printQR()"> Print QR</button>
                                                <button class="btn btn-primary" id="printItem" onclick="printItem()"> Print Item</button>`;
                                this.data(rowData).invalidate().draw(false);
                            }
                        });
                    },
                    error: function(error) {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: error.val
                        });
                    }
                });
            }
        }

        function printQR() {

        }

        function printItem() {

        }

    </script>
}