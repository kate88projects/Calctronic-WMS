@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<style>
    .table-title {
        color: #fff;
        background: #4b5366;
        border-radius: 3px 3px 0 0;
    }

    .table-title h2 {
        margin: 5px 0 0;
        font-size: 24px;
    }

    .text-link {
        color: blue;
        float: right;
        margin-bottom: 10px;
    }

    .title {
        padding: 8px;
        font-weight: 600;
        text-align: center;
        margin-bottom: 5px;
    }

    .error-message {
        color: red;
        font-size: 0.875rem; 
        margin-top: 5px;
    }

    .titleColor {
        /* background: #B9E5E8; */
        background: #D6E6F2;
    }

    .subtitleColor {
        background: #E3F4F4;
    }

    .item {
        margin: 10px;
    }

    .title-container {
        right: 16px;
        float: right;
        margin-bottom: 5px;
    }

    .row {
        clear: right;
    }

    .is-invalid {
        border-color: red;
    }

    .is-valid {
        border-color: green;
    }

    .table-filter {
        border-radius: 3px;
        border-color: #ddd;
        box-shadow: none;
        margin-botton: 20px;
    }

    .show-entries select.form-control {
        width: 60px;
        margin: 0 5px;
    }

    .table-filter .row {
        display: flex;
        align-items: center;
    }

    .table-filter .col-sm-12 {
        display: flex;
        justify-content: flex-start; 
    }

    .show-entries {
        display: flex;
        align-items: center; 
        gap: 5px;  
    }

    #selpageSize:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    #selpageSize:hover {
        border-color: #007bff;
    }

    .pagination {
        float: right;
        margin: 0 0 5px;
    }

    .pagination li a {
        border: none;
        font-size: 13px;
        min-width: 30px;
        min-height: 30px;
        color: #999;
        margin : 0 2px;
        line-height: 30px;
        border-radius: 2px !important;
        text-align: center;
        padding: 0 6px;
    }

    .pagination li a:hover {
        color: #666;
    }

    .pagination li.active a {
        background: #03A9F4;
    }

    .pagination li.active a:hover {
        background: #0397d6;
    }

    .pagination li.disabled i {
        font-size: 16px;
        padding-top: 6px;
    }

    .pagination li i {
        font-size: 16px;
        padding-top: 6px
    }

    .custom-table thead th {
        background-color: #F1F6F9; 
        font-size: 16px;
        color: #000;
    }

</style>


<br />
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card card-outline ">
                <div class="card-header table-title">
                    <div class="card-title">
                        <h2>BOM List <b></b></h2>
                    </div>
                    <div class="card-tools">
                        <button type="button" class="btn btn-warning" onclick="navigateToNew('new')">
                            Add New BOM
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row" style="padding:5px;">
                        <div class="col-sm-3" style="">
                            <input id="txtItemCode" name="ItemCode" type="text" class="form-control" placeholder="Item" />
                        </div>
                        <div class="col-sm-3">
                            <input id="txtCreatedBySearch" name="CreatedBy" type="text" class="form-control" placeholder="Created By" />
                        </div>
                        <div class="col-sm-1 d-flex"> @* col-sm-6 d-flex justify-content-end *@
                            <button type="button" class="btn btn-primary" style="width: 100%; " onclick="loadList(1)"><i class="bi bi-search"></i> </button>
                        </div>
                    </div>
                    <hr />
                    <div class="table-filter">
                        <div class="row" style="padding-left:5px;">
                            <div class="col-sm-12">
                                <div class="show-entries">
                                    <label>Show</label>
                                    <select id="selpageSize" name="pageSize" class="form-control">
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="200">250</option>
                                    </select>
                                    <span>entries</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="gridTable" class="table table-responsive text-nowrap"></div>
                       @*  <table id="listTable" class="table table-responsive dataTable" style="width:100%">
                            <thead>
                                <tr>
                                    <th>BOM Id</th>
                                    <th>Item</th>
                                    <th>Description</th>
                                    <th>Is Active</th>
                                    <th>CreatedDate</th>
                                    <th>CreatedBy</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>  *@
                    

                    <div class="clearfix">
                        <div class="hint-text">Showing <b id="lblCurCount">0</b> of <b id="lblTotal">0</b> entries</div>
                        <ul class="pagination" id="ulPagination">
                        </ul>
                        <input type="hidden" id="txtCurPage">
                        <input type="hidden" id="txtTotalRecord">
                        <input type="hidden" id="txtPageSize">
                        <input type="hidden" id="txtTotalPage">
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@* <div class="modal fade" id="newModal" data-bs-backdrop="static">
     <div class="modal-dialog modal-dialog-centered modal-lg">
         <div class="modal-content">
             <div class="modal-header">
                 <h5 class="modal-title" id="bomModalLabel"> Create New BOM</h5>
             </div>
             <div class="modal-body">
                 <div class="row g-0"><span class="title titleColor">BOM</span></div>
                 <div class="row mb-2">
                     <div class="col">
                          <div class="form-floating">
                                <select class="form-select" id="bomName">
                                    <option value="" disabled selected>Choose BOM Item</option>
                                </select>
                                <label for="bomName">BOM Item</label>
                                <div id="bomNameError" class="error-message"></div>
                            </div>
                     </div>
                     <div class="col">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="txtCreatedBy" placeholder="Please enter created person">
                            <label for="txtCreatedBy">Created By</label>
                            <div id="txtCreatedByError" class="error-message"></div>
                        </div>
                    </div>
                 </div>
                 <div class="g-3 mb-2">
                     <div class="col">
                         <div class="form-floating">
                             <input type="text" class="form-control" id="txtdesc" placeholder="Please enter description">
                             <label for="txtdesc">Description</label>
                             <div id="txtdescError" class="error-message"></div>
                         </div>
                     </div>
                </div>
                
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="chkIsActive">
                        <label class="form-check-label" for="chkIsActive">Is Active</label>
                    </div>
                </div>

                <div class="row g-0"><span class="title subtitleColor">Sub Item</span></div>
                <div class="itemContainer" id="itemContainer">
                    <div class="itemBlock" id="itemBlock" data-index="1">
                        <div class="item">
                            <div class="title-container">
                              <span class="item-title">Item 1</span>
                              <i class="fa fa-trash" onclick="removeItem(this)" tabindex="0"></i>
                            </div>
                            <div class="row mb-2">
                                <div class="col">
                                    <div class="form-floating">
                                        <select class="form-select" id="subItem1" required></select>
                                        <label for="subItem1">Sub Item</label>
                                        <div id="subItem1Error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="txtQty1" placeholder="Please enter quantity" required>
                                        <label for="txtQty1">Quantity</label>
                                        <div id="txtQty1Error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="g-3 mb-3">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="txtRemark1" placeholder="Please enter remark" required>
                                    <label for="txtRemark1">Remark</label>
                                    <div id="txtRemark1Error" class="error-message"></div>
                                </div>
                            </div>
                            <input type="hidden" id="txtBomDtlId1">
                        </div>
                    </div>
                </div>
                    
                <span id="textlink" class="text-link mt-2" tabindex="0"><i class="fas fa-plus-circle"></i> Sub Item</span>
                <input type="hidden" id="txtBomId">
             </div>
             <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="saveBOM()">Save</button>
                <button type="button" class="btn btn-outline-secondary" onclick="cancelForm()">Cancel</button>
            </div>
         </div>
     </div>
</div> *@


@section Scripts
{
    @* <link href="~/css/datatables.min.css" rel="stylesheet"> *@
    <link rel="stylesheet" href="~/css/sweetalert2.min.css">

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @* <script src="~/js/datatables.min.js"></script> *@
    <script src="~/js/sweetalert2.all.min.js"></script>
    <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
    <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>


    <script type="text/javascript">
        let itemIndex = 1;
        var itemList = [];
        let gridInstance = null;

        $(document).ready(async function () {
            $('#txtTotalRecord').val(0);
            $('#txtTotalPage').val(1);
            getFinishedItemList();
            // getRawItemList();
            loadList(1);
        });

        function prevPage() {
            var curPage = $('#txtCurPage').val();
            if (curPage == 1) {
                return;
            }
            loadlList(curPage - 1);
        }

        function nextPage() {
            var curPage = $('#txtCurPage').val();
            var ttl = $('#txtTotalRecord').val();
            var paeSize = $('#txtPageSize').val();
            var ttlPage = $('#txtTotalPage').val();

            if ((curPage + 1) > ttlPage) {
                return;
            } 
            loadList(curPage + 1);
        }

        function loadList(page) {

            $('#txtCurPage').val(page);
            $('#txtPageSize').val($('#selpageSize').val());
            var ttlPage = $('#txtTotalPage').val();
            for (var j =1; j <= ttlPage; j++) {
                $('#btnP' + j).removeClass("active");
            }
            $('#btnP' + page).addClass('active');

            var data = {
                ItemCode: $('#txtItemCode').val(),
                CreatedBy: $('#txtCreatedBySearch').val(),
                page: page, 
                pageSize: $('#selpageSize').val(),
            };

            $.ajax({
                url: "/BOM/GetBOMList/",
                type: "POST",
                data: JSON.stringify(data),
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    Swal.fire({
                        text: 'Please Wait',
                        width: '300px',

                        allowEscapeKey: false,
                        allowOutsideClick: false,
                        showConfirmButton: false,
                    });
                    Swal.showLoading()
                },
                success: function (result) {
                    swal.close()
                    if (result.success == true) {

                        if (gridInstance) { 
                            gridInstance.destroy();
                        }
                        console.log(result.data);

                        gridInstance = new gridjs.Grid({
                            columns: [
                                { name: 'BOM ID', id: 'boM_Id' },
                                { 
                                    name: 'Item Code', 
                                    id: 'item_Id',
                                    formatter: (cell) => {
                                        const item = itemList.find(i => i.itemId === cell);
                                        return item ? item.itemCode : '';
                                    }
                                },
                                { 
                                    name: 'Description', 
                                    id: 'description' ,
                                    formatter: (cell) => {
                                        const maxLength = 50;
                                        if (!cell) return '';
                                        return cell.length > maxLength
                                            ? gridjs.html(`<span title="${cell}">${cell.substring(0, maxLength)}...</span>`)
                                            : cell;
                                    }
                                },
                                { 
                                    name: 'Status', 
                                    id: 'isActive',
                                    formatter: (cell, row) => {
                                        return row.cells[3].data === true
                                          ? gridjs.html('<span class="badge rounded-pill bg-success">Active</span>')
                                          : gridjs.html('<span class="badge rounded-pill bg-secondary">InActive</span>');
                                      }

                                      //return row.cells[3].data === true
                                          // ? gridjs.html('<span><i class="bi bi-check-square" style="color: darkgreen;"></i></span>')
                                          // : gridjs.html('<span><i class="bi bi-app"></i></span>');
                                },
                                { 
                                    name: 'Created Date', 
                                    formatter: (cell, row) => {
                                        const dateString = row.cells[4].data.split('.')[0];
                                        const date = new Date(dateString);

                                        if (isNaN(date)) {
                                            return 'Invalid Date';
                                        }
                                        return date.toLocaleString('en-GB', {
                                            year: 'numeric',
                                            month: 'numeric',
                                            day: 'numeric',
                                            hour: 'numeric',
                                            minute: 'numeric',
                                            hour12: true,
                                        });
                                    }
                                },
                                { name: 'Created By', id: 'createdBy' },
                                { 
                                    name: 'Updated Date', 
                                    formatter: (cell, row) => {
                                        const dateString = row.cells[6].data.split('.')[0];
                                        const date = new Date(dateString);

                                        if(isNaN(date)) {
                                            return 'Invalid Date';
                                        }
                                        return date.toLocaleString('en-GB', {
                                            year: 'numeric',
                                            month: 'numeric',
                                            day: 'numeric',
                                            hour: 'numeric',
                                            minute: 'numeric',
                                            hour12: true,
                                        });
                                    }
                                },
                                { 
                                    name: 'Action',
                                    formatter: (cell, row) => {
                                        const rawData = JSON.stringify({
                                            boM_Id: row.cells[0].data,
                                            item_Id: row.cells[1].data,
                                            description: row.cells[2].data,
                                            isActive: row.cells[3].data,
                                            createdDate: row.cells[4].data,
                                            createdBy: row.cells[5].data,
                                            updatedDate: row.cells[6].data,
                                        });

                                        return gridjs.html(`
                                           <div style="display:flex;">
                                                <button class="btn btn-primary d-grid view-bom-btn" style="margin-right:10px;" data-row='${rawData}' onclick="navigateToView(${row.cells[0].data}, 'view')">
                                                    <span><i class="bi bi-eye"></i> View</span>
                                                </button>
                                                <button class="btn btn-warning d-grid edit-bom-btn" style="margin-right:10px;" data-row='${rawData}' onclick="navigateToEdit(${row.cells[0].data}, 'edit')">
                                                    <span><i class="bi bi-pencil-square"></i> Edit</span>
                                                </button>
                                                <button class="btn btn-danger deactivate-account delete-bom-btn" data-id="${row.cells[0].data}">
                                                    <span><i class="bi bi-trash"></i> Delete</span>
                                                </button>
                                            </div>
                                        `);
                                    }
                                },
                            ],
                            data: result.data,
                            pagination: false,
                            search: false,
                            sort: true,
                            className: {
                                table: 'custom-table',
                            }
                        }).render(document.getElementById("gridTable"));
                        // $('#listTable').DataTable( {
                        //     data: result.data,
                        //     paging: false,
                        //     searching: false,
                        //     "info": false,
                        //     "bDestroy": true,
                        //     columns: [
                        //         { data: 'boM_Id' },
                        //         { data: 'item_Id' ,
                        //             render: function(data, type, row) {
                        //                 var item = itemList.find(function(i) {
                        //                     return i.itemId === data;
                        //                 });
                        //                 return item ? item.itemCode: '';
                        //             }
                        //         },
                        //         { data: 'description' },
                        //         {
                        //             data: null,
                        //             render: function (data, type, row, meta) {
                        //                 if (row.isActive == true) {
                        //                     return '<span><i class="bi bi-check-square" style="color: darkgreen;"></i></span>'
                        //                 }
                        //                 else {
                        //                     return '<span><i class="bi bi-app""></i></span>'
                        //                 }
                        //             }
                        //         },
                        //         { data: 'createdDate' },
                        //         { data: 'createdBy' },
                        //         {
                        //             data: null,
                        //             render: function (data, type, row, meta) {
                        //                 const rawData = JSON.stringify(row).replace(/"/g, "&quot;");
                        //                 return `<div style="display:flex;">
                        //                             <button class="btn btn-success d-grid edit-bom-btn" style="margin-right:10px;" data-row="${rawData}">
                        //                                 <span><i class="bi bi-pencil-square"></i>Edit</span>
                        //                             </button>
                        //                             <button class="btn btn-danger deactivate-account delete-bom-btn" data-id="${row.boM_Id}">
                        //                                 <span><i class="bi bi-trash"></i>Delete</span>
                        //                             </button>
                        //                         </div>`;
                        //             }
                        //         }
                        //     ],
                        // });

                        var curCnt = 0;
                        var pageSize = parseInt($("#selpageSize").val());
                        var startEntry = ((page - 1) * pageSize) + 1;
                        var ttlRecords = result.totalRecords === -1 ? $('#lblTotal').text() : result.totalRecords;
                        var endEntry = Math.min(page * pageSize, ttlRecords);

                        if (ttlRecords === 0 || startEntry > ttlRecords) {
                            startEntry = 0;
                            endEntry = 0;
                        }
                        $('#lblCurCount').html(`${startEntry} to ${endEntry}`);

                        if (page == 1) {
                            $('#lblTotal').html(result.totalRecords);
                            $('#ulPagination').html('');

                            var pageSize = $('#selpageSize').val();
                            const myDiv = document.getElementById('ulPagination');
                            var ttlPage = result.totalRecords / pageSize;
                            if ((result.totalRecords % pageSize) > 0) {
                                ttlPage = ttlPage + 1;
                            }
                            $('#txtTotalRecord').val(result.totalRecords);
                            $('#txtTotalPage').val(ttlPage);

                            myDiv.innerHTML += '<li class="page-item disabled"><a href="javascript:prevPage()">Previous</a></li>';
                            for (var i = 1; i <= ttlPage; i++) {
                                if (i == 1) {
                                       myDiv.innerHTML += '<li class="page-item active" id="btnP'+ i +'"><a href="javascript:loadList('+ i +')" class="page-link">'+ i +'</a></li>';
                                }
                                else {
                                       myDiv.innerHTML += '<li class="page-item" id="btnP'+ i +'"><a href="javascript:loadList('+ i +')" class="page-link">'+ i +'</a></li>';
                                }
                            }
                            myDiv.innerHTML += '<li class="page-item disabled"><a href="javascript:nextPage()">Next</a></li>';
                        }
                    }
                    else {
                        swal.fire({
                            icon: 'error',
                            title: "Wait",
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: "Wait",
                        text: error.val
                    });
                }
            });
        }

        function navigateToNew(mode) {
            window.location.href = '@Url.Action("BOMDetails", "BOM", new { id = "_id_", mode = "_mode_" })'.replace('_id_', 0).replace('_mode_', mode);

            // getRawItemList();
            // getFinishedItemList();
            // clearForm();
            // $('#newModal').modal("show");
        }

        // function cancelForm() {
        //     $('#newModal').modal("toggle");
        //     clearForm();
        // }

        // function clearForm() {
        //     removeErrMsg(['bomName', 'txtdesc', 'txtCreatedBy'], true);
        //     document.getElementById('txtBomId').value = '';

        //     document.getElementById("chkIsActive").checked = false;

        //     const firstItem = document.querySelector(".item");
        //     if (firstItem) {
        //         const subitem = firstItem.querySelector("select").id;
        //         const qty = firstItem.querySelector('input[type="number"]').id;
        //         const remark = firstItem.querySelector('input[type="text"]').id;
        //         const detailId = firstItem.querySelector('input[type="hidden"]');
        //         detailId.value = "";
        //         removeErrMsg([subitem, qty, remark], true);
        //     }

        //     const itemBlock = document.querySelectorAll(".itemBlock");
        //     itemBlock.forEach((item, index) => {
        //         if (index != 0) {
        //             item.remove();
        //         }
        //     });

        //     bgAdjust();
        //     itemIndex = 1;
        // }

        function getFinishedItemList() {
             $.ajax({
                url: "/Item/GetFinishedItemList/",
                type: "GET",
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.success == true) {
                        itemList = result.data.map(function (i) {
                            return {
                                itemId : i.item_Id,
                                itemCode: i.itemCode,
                                itemDescription: i.description,
                            };
                        });

                        // console.log("itemlist", itemList);
                        // const dropdown = document.getElementById('bomName');
                        // dropdown.innerHTML = "";

                        // const defaultOption = document.createElement("option");
                        // defaultOption.value = "";
                        // defaultOption.textContent = "Choose an Item";
                        // defaultOption.disabled = true;
                        // defaultOption.selected = true;
                        // dropdown.appendChild(defaultOption);

                        // result.data.forEach(function (i) {
                        //     const option = document.createElement("option");
                        //     option.value = i.item_Id;
                        //     option.textContent = i.itemCode;
                        //     dropdown.appendChild(option);
                        // });
                    } else {
                        swal.fire({
                            icon: 'error',
                            title: 'Wait',
                            text: result.errMessage
                        });
                    }
                },
                error: function (error) {
                    swal.fire({
                        icon: 'error',
                        title: 'Wait',
                        text: error.val
                    });
                }
            });
        }

        // function getRawItemList () {
        //     $.ajax({
        //         url: "/Item/GetRawItemList/",
        //         type: "GET",
        //         dataType: 'JSON',
        //         contentType: 'application/json; charset=utf-8',
        //         success: function (result) {
        //             if (result.success == true) {
        //                 // itemList = result.data.map(function (i) {
        //                 //     return {
        //                 //         itemId : i.item_Id,
        //                 //         itemCode: i.itemCode,
        //                 //         itemDescription: i.description,
        //                 //     };
        //                 // });

        //                 const dropdown = document.getElementById('subItem1');
        //                 if (dropdown)
        //                 {
        //                     dropdown.innerHTML = "";
        //                     const defaultOption = document.createElement("option");
        //                     defaultOption.value = "";
        //                     defaultOption.textContent = "Choose an Item";
        //                     defaultOption.disabled = true;
        //                     defaultOption.selected = true;
        //                     dropdown.appendChild(defaultOption);

        //                     result.data.forEach(function (i) {
        //                         const option = document.createElement("option");
        //                         option.value = i.item_Id;
        //                         option.textContent = i.itemCode;
        //                         dropdown.appendChild(option);
        //                     });
        //                 }

                        
        //             } else {
        //                 swal.fire({
        //                     icon: 'error',
        //                     title: 'Wait',
        //                     text: result.errMessage
        //                 });
        //             }
        //         },
        //         error: function (error) {
        //             swal.fire({
        //                 icon: 'error',
        //                 title: 'Wait',
        //                 text: error.val
        //             });
        //         }
        //     });
        // }

        // document.getElementById("textlink").addEventListener("click", function () {
        //    itemIndex++;
        //    createNewInputField(null, itemIndex, false);
        //    bgAdjust();

        // });

        // function createNewInputField(dtl, index, isEditing = false) {
        //     const container = document.getElementById("itemContainer");
        //     const firstItem = container.querySelector(".itemBlock");
        //     const dataIdx = firstItem.getAttribute("data-index");

        //     const newItem = firstItem.cloneNode(true);
        //     newItem.setAttribute("data-index", index);

        //     const select = newItem.querySelector("select");
        //     const qtyInput = newItem.querySelector('input[type="number"]');
        //     const remarkInput = newItem.querySelector('input[type="text"]');
        //     const detailId = newItem.querySelector('input[type="hidden"]');

        //     const newItemIndex = index;
        //     select.id = `subItem${newItemIndex}`;
        //     qtyInput.id = `txtQty${newItemIndex}`;
        //     remarkInput.id = `txtRemark${newItemIndex}`;
        //     detailId.id = `txtBomDtlId${newItemIndex}`;

        //     newItem.querySelector(`label[for^="subItem"]`).setAttribute("for", `subItem${newItemIndex}`);
        //     newItem.querySelector(`label[for^="txtQty"]`).setAttribute("for", `txtQty${newItemIndex}`);
        //     newItem.querySelector(`label[for^="txtRemark"]`).setAttribute("for", `txtRemark${newItemIndex}`);

        //     select.value = isEditing ? dtl.itemId : "";
        //     qtyInput.value = isEditing ? dtl.qty : "";
        //     remarkInput.value = isEditing ? dtl.remark : "";
        //     detailId.value = isEditing ? dtl.bomDetailId : "";

        //     const errBlock1 = newItem.querySelector(`#subItem${dataIdx}Error`);
        //     errBlock1.id = `subItem${newItemIndex}Error`;
        //     const errBlock2 = newItem.querySelector(`#txtQty${dataIdx}Error`);
        //     errBlock2.id = `txtQty${newItemIndex}Error`;
        //     const errBlock3 = newItem.querySelector(`#txtRemark${dataIdx}Error`);
        //     errBlock3.id = `txtRemark${newItemIndex}Error`;

        //     container.appendChild(newItem);
        //     removeErrMsg([`subItem${newItemIndex}`, `txtQty${newItemIndex}`, `txtRemark${newItemIndex}`]);

        // };

        // function bgAdjust() {
        //     const allBlocks = document.querySelectorAll(".itemBlock");
        //     allBlocks.forEach((block, index) => {
        //         block.style.backgroundColor = "";

        //         if ((index + 1) % 2 === 0) {
        //             block.style.backgroundColor = "#E3F4F4";
        //             block.style.border = "1px solid #E3F4F4";
        //         }
        //     });
        // }

        // function removeItem(icon) {
        //     const item = icon.closest('.itemBlock');
        //     const container = document.getElementById("itemContainer");
        //     const items = container.querySelectorAll(".itemBlock");
        //     const itemCount = items.length;

        //     if (itemCount > 1)
        //     {
        //         item.remove();
        //         bgAdjust();
        //         // const allBlocks = document.querySelectorAll(".itemBlock");
        //         // allBlocks.forEach((block, index) => {
        //         //     block.style.backgroundColor = "";
        //         //     block.style.border = "";

        //         //     if ((index + 1) % 2 === 0) {
        //         //         block.style.backgroundColor = "#E3F4F4";
        //         //         block.style.border = "1px solid #E3F4F4";
        //         //     }
        //         // });
        //     } else {
        //         swal.fire({
        //             icon: 'info',
        //             title: "Cannot Remove",
        //             text: "At least one sub-item must remain."
        //         });
        //     }
        // };

        // function saveBOM() {
        //     const items = document.querySelectorAll('.item');
        //     const itemCount  = items.length;
        //     const formData = [];
        //     let isValid = true;

        //     var fields = ['bomName', 'txtdesc'];
        //     removeErrMsg(fields);

        //     //validation for BOM header
        //     fields.forEach(field => {
        //         if (!document.getElementById(field).value.trim()) {
        //             isValid = false;
        //             const label = document.querySelector(`label[for="${field}"]`).textContent;
        //             showError(field, `${label} is required.`);
        //         }
        //     });

        //     //validation for subItem
        //     items.forEach(item => {
        //         removeErrMsg([item.querySelector("select").id, item.querySelector('input[type="number"]').id, item.querySelector('input[type="text"]').id]);
        //         const subitem = item.querySelector("select").value;
        //         const qty = item.querySelector('input[type="number"]').value;
        //         const remark = item.querySelector('input[type="text"]').value;
        //         const bomDtlId = item.querySelector('input[type="hidden"]').value;

        //         if (!subitem) {
        //             isValid = false;
        //             showError(item.querySelector("select").id, "Please choose a sub item.");
        //         }
        //         if (!qty || isNaN(qty) || qty <=0) {
        //             isValid = false;
        //             showError(item.querySelector('input[type="number"]').id, "Please enter a valid quantity (number >= 1)");
        //         }

        //         formData.push({
        //             BOMDetail_Id: parseInt(bomDtlId) || 0,
        //             BOM_Id: parseInt($('#txtBomId').val()) || 0,
        //             Item_Id: parseInt(subitem),
        //             Qty: parseInt(qty),
        //             Remark: remark
        //         });
        //     });

        //     // const container = document.getElementById('newModal');
        //     // console.log("after container", container);
        //     if (isValid) {
        //        var bomData = {
        //             BOM_Id: parseInt($('#txtBomId').val()) || 0,
        //             Item_Id: parseInt($('#bomName').val()),
        //             CreatedBy: $('#txtCreatedBy').val(),
        //             Description: $('#txtdesc').val(),
        //             IsActive: $('#chkIsActive').prop("checked"),
        //             SubItems: formData,
        //        };

        //         $.ajax({
        //             url: '/BOM/SaveBOM',
        //             type: 'POST',
        //             data: JSON.stringify(bomData),
        //             dataType: 'JSON',
        //             contentType: 'application/json; charset=utf-8',
        //             beforeSend: function () {
        //                 Swal.fire({
        //                     text: 'Please Wait',
        //                     width: '300px',

        //                     allowEscapeKey: false,
        //                     allowOutsideClick: false,
        //                     showConfirmButton: false,
        //                 });
        //                 Swal.showLoading()
        //             },
        //             success: function (result) {
        //                 if (result.success == true) {
        //                     swal.fire({
        //                         icon: 'success',
        //                         title: "Success Save",
        //                         text: "",
        //                         didClose: () => {
        //                           window.location.reload();
        //                         }
        //                     });
        //                 }
        //                 else {
        //                     swal.fire({
        //                         icon: 'error',
        //                         title: "Wait",
        //                         text: result.errMessage
        //                     });
        //                 }
        //             },
        //             error: function (error) {
        //                 console.log(error);
        //                 swal.fire({
        //                     icon: 'error',
        //                     title: "Wait",
        //                     text: error.val
        //                 });
        //             }
        //         });
        //     }

        //     console.log(bomData);
        // }

        // function showError(fieldId, message) {
        //     document.getElementById(fieldId).classList.add('is-invalid');
        //     document.getElementById(fieldId + 'Error').textContent = message;
        // }

        // function removeErrMsg(fields, clearValue = false) {
        //     if (fields != null)
        //     {
        //         if (!Array.isArray(fields)) {
        //             fields = [fields];
        //         }
        //         fields.forEach(function(field) {
        //             document.getElementById(field).classList.remove('is-invalid');
        //             document.getElementById(field).classList.remove('is-valid');
        //             document.getElementById(field + 'Error').textContent = '';
        //             if (clearValue) document.getElementById(field).value = '';
        //         });
        //     }
        // }

        // $('#gridTable').on('click', '.edit-bom-btn', function () {
        //     const row = JSON.parse($(this).attr('data-row').replace(/&quot;/g, '"'));
        //     editBOMForm(row);
        // });

        function navigateToView(id, mode) {
            window.location.href = '@Url.Action("BOMDetails", "BOM", new { id = "_id_", mode = "_mode_" })'.replace('_id_', id).replace('_mode_', mode);
        }

        function navigateToEdit(id, mode) {
            window.location.href = '@Url.Action("BOMDetails", "BOM", new { id = "_id_", mode = "_mode_" })'.replace('_id_', id).replace('_mode_', mode);
            //`/edit?id=${id}`;
            // var url = '@Url.Action("BOMDetails", "BOM", new { id = "_id_" })'.replace('_id_', id);

            // $.ajax({
            //     url: url,
            //     type: 'GET',
            //     fata: { id: id },
            //     success: function(response) {
            //         $('#content-area').html(response);
            //         history.pushState({ path: url }, '', url);
            //     },
            //     error: function(xhs, status, error) {
            //         console.error('Error fetching BOM details:', error);
            //     }
            // });
        }

        // async function editBOMForm(row) {
        //     var hasValue = false;
        //     console.log(row);

        //     $('#bomName').val(row.item_Id);
        //     $('#txtdesc').val(row.description);
        //     $('#txtCreatedBy').val(row.createdBy);
        //     $('#txtBomId').val(row.boM_Id);
        //     document.getElementById("chkIsActive").checked = row.isActive == true ? true : false;

        //     //fetch details
        //     var bomDtls = [];

            // $.ajax({
            //     url: '/BOM/GetBOMDetail',
            //     type: 'POST',
            //     data: JSON.stringify(row.boM_Id),
            //     dataType: 'JSON',
            //     contentType: 'application/json; charset=utf-8',
            //     success: function (result) {
            //         if (result.success == true) {
            //            bomDtls = result.data.map(function (i) {
            //                 return {
            //                     bomId: i.boM_Id,
            //                     bomDetailId: i.bomDetail_Id,
            //                     itemId: i.item_Id,
            //                     qty: i.qty,
            //                     remark: i.remark,
            //                 };
            //             });

            //             const container = document.getElementById("itemContainer");
            //             const items = container.querySelectorAll(".itemBlock");
            //             const itemCount = items.length;

            //             bomDtls.forEach((dtl, index) => {
            //                 if (index === 0) {
            //                     const firstItem = container.querySelector(".itemBlock");
            //                     const select = firstItem.querySelector("select");
            //                     const qtyInput = firstItem.querySelector('input[type="number"]');
            //                     const remarkInput = firstItem.querySelector('input[type="text"]');
            //                     const detailId = firstItem.querySelector('input[type="hidden"]');

            //                     select.value = dtl.itemId;  
            //                     qtyInput.value = dtl.qty;
            //                     remarkInput.value = dtl.remark;
            //                     detailId.value = dtl.bomDetailId;

            //                 } else if (itemCount < bomDtls.length) {
            //                     createNewInputField(dtl, index+1, true);
            //                 }
            //                 index++;
            //             });
            //             bgAdjust();
            //         }
            //         else {
            //             swal.fire({
            //                 icon: 'error',
            //                 title: "Wait",
            //                 text: result.errMessage
            //             });
            //         }
            //     },
            //     error: function (error) {
            //         console.log(error);
            //         swal.fire({
            //             icon: 'error',
            //             title: "Wait",
            //             text: error.val
            //         });
            //     }
            // });
        //     $("#newModal").modal("show");
        // }

        $('#gridTable').on('click', '.delete-bom-btn', function () {
            const id = $(this).attr('data-id');
            deleteBom(id);
        });

        function deleteBom(id) {
            console.log(id);
            swal.fire({
                title: "Are you sure want to delete?",
                text: "You will not be able to recover this record!",
                inputAttributes: {
                    autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'ok',
                cancelButtonText: 'cancel',
                allowOutsideClick: false
              }).then(function(r) {
                if (r.isConfirmed == true) {
                    var data = {
                        BOM_Id: id,
                    };
                    $.ajax({
                        url: '/BOM/DeleteBOM',
                        type: 'DELETE',
                        data: JSON.stringify(data),
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8',
                        beforeSend: function () {
                            Swal.fire({
                                text: 'Please Wait',
                                width: '300px',

                                allowEscapeKey: false,
                                allowOutsideClick: false,
                                showConfirmButton: false,
                            });
                            Swal.showLoading()
                        },
                        success: function (result) {
                            if (result.success == true) {
                                swal.fire({
                                    icon: 'success',
                                    title: "Success Deleted",
                                    text: "",
                                    didClose: () => {
                                      window.location.reload();
                                    }
                                });
                            }
                            else {
                                swal.fire({
                                    icon: 'error',
                                    title: "Wait",
                                    text: result.errMessage
                                });
                            }
                        },
                        error: function (error) {
                            console.log(error);
                            swal.fire({
                                icon: 'error',
                                title: "Wait",
                                text: error.val
                            });
                        }
                    });

                } else {
                    return;
                }
              });
        }

    </script>
}
